<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>动态规划 on Freeze&#39;s Blogs</title>
    <link>https://freeze.org.cn/docs/DP/</link>
    <description>Recent content in 动态规划 on Freeze&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://freeze.org.cn/docs/DP/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简介</title>
      <link>https://freeze.org.cn/docs/DP/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DP/intro/</guid>
      <description>简介 $  动态规划（DP） 是「打表」的最高境界，原理和考试时查草稿差不多。
假如一道填空题需要求 $1024×768$，正常学生会在草稿纸上计算出它的值 $=768432$。
此时某道应用题中再次出现了 $1024×768$：
部分学生会在打过的草稿里找到 $1024×768=768432$，直接抄进答题卡，省得再计算。更专业的学生会把草稿打成表格，方便查表和检验。
动态规划将「草稿纸」的参考性利用到极致，极大提高解题效率。
基本原理 $  例题
斐波那契数列是形如 $1, 1, 2, 3, 5, 8, \cdots$ 的数列。求数列的第 $n$ 项。
 $f[n]$ 表示数列的第 $n$ 项，则：
$$f[n]=\left\{\begin{aligned}&amp; 1, n=1, 2\\&amp; f[n-1]+f[n-2], n≥3\end{aligned}\right.$$先把特殊的 $f[1]=f[2]=1$ 填进表：
   $f[1]$ $f[2]$     $1$ $1$    根据公式计算 $f[3]$ 时，需要用到 $f[1]$ 和 $f[2]$。在表中查找它们的值，代入计算：</description>
    </item>
    
    <item>
      <title>基础 DP</title>
      <link>https://freeze.org.cn/docs/DP/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DP/basics/</guid>
      <description>斐波那契数列 $  斐波那契数列是形如 $1,1,2,3,5,8,\cdots$ 的数列。求数列的第 $n$ 项。
$f[n]$ 表示数列的第 $n$ 项，则：
$$ f[n]=f[n-1]+f[n-2],n≥3 $$
   初始条件 $f[1]=f[2]=1$ 计算顺序 $f[3\rightarrow n]$     边界条件 $f[n]$ 时间复杂度 $O(n)$    int f[]; f[1] = f[2] = 1; for(int i = 3; i &amp;lt;= n; i ++) f[i] = f[i - 1] + f[i - 2]; 汉诺塔问题 $  汉诺塔由 $n$ 个大小不同的圆盘和三根杆子 $a,b,c$ 组成。初始时，$n$个圆盘从大到小依次套在 $a$ 杆上，如下图所示：
现在要求把 $a$ 杆上的 $n$ 个圆盘按以下规则移到 $c$ 杆上：</description>
    </item>
    
    <item>
      <title>背包 DP</title>
      <link>https://freeze.org.cn/docs/DP/knap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DP/knap/</guid>
      <description>01 背包 $  用体积为 $m$ 的背包装 $n$ 种物品，每种物品只有 $1$ 个。第 $i$ 种物品的体积为 $w_i$，价值为 $c_i$，将哪些物品装入背包可使总价值最大？
$f[i,v]$ 表示把前 $i$ 个物品（部分或全部）放入体积为 $v$ 的背包，可以获得的最大总价值。
若只考虑第 $i$ 个物品的策略（放或不放），则问题转而只涉及到前 $i-1$ 个物品：
  若不放第 $i$ 个物品，则 $f[i,v]=f[i-1,v]$；
  若放第 $i$ 个物品，则前 $i-1$ 个物品只能放在体积为 $v-w_i$ 的空间里，故 $f[i,v]=f[i-1,v-w_i]+c_i$。
  $$f[i,v] = \max\left\{\begin{aligned}&amp;f[i-1,v]\\&amp;f[i-1,v-w_i]+c_i,v≥w_i\end{aligned}\right.$$由于 $f[i,v]$ 的值只由 $f[i-1,v]$ 和 $f[i-1,v-w_i]$ 决定，所以先求 $f[1,0\cdots m]$，再求 $f[2,0\cdots m]$，$\cdots$，直到求出 $f[n,m]$。时间复杂度为 $O(nm)$。
当 $v &amp;lt; w_i$ 时，第 $i$ 个物品放不进体积为 $v$ 的背包，此时 $f[i,v]$ 只能等于 $f[i-1,v]$。  for(int i = 1; i &amp;lt;= n; i ++) { for(int v = 0; v &amp;lt; w[i]; v ++) f[i][v] = f[i - 1][v]; for(int v = w[i]; v &amp;lt;= m; v ++) f[i][v] = max(f[i - 1][v], f[i - 1][v - w[i]] + c[i]); } 空间优化 $  假设背包体积为 $4$，物品个数为 $3$，体积和价值如下：</description>
    </item>
    
  </channel>
</rss>
