<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on Freeze&#39;s Blogs</title>
    <link>https://freeze.org.cn/docs/DS/</link>
    <description>Recent content in 数据结构 on Freeze&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://freeze.org.cn/docs/DS/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简介</title>
      <link>https://freeze.org.cn/docs/DS/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/intro/</guid>
      <description>概念 $  数据结构是计算机储存、组织数据的方式，分为逻辑结构和物理结构。
逻辑结构 $  数据元素之间的逻辑关系，分为以下四种：
1. 线性结构 $  线性结构用于将元素按照某种顺序排列成「一条线」。
2. 集合结构 $  集合结构用于分类元素，同类元素置于同个集合。如下图，$2,4,5,8,\textbf{♂}$ 为同类元素，$1,3,6,7$ 为同类元素。
3. 树形结构 $  树形结构的元素存在「一对多」的层次关系，适用于描述「上下级」关系，在 图论中有详细介绍。
4. 图形结构 $  图形结构的元素存在「多对多」的关系，适用于描述「城市道路连通」关系，在 图论中有详细介绍。
物理结构 $  元素在储存器中的储存方式，分为以下两种：
1. 顺序结构 $  我们熟知的「数组」就是顺序结构，将元素存于一段连续内存中。
顺序结构具有以下性质：
  支持随机访问元素；
  不支持插入元素。
  相当于食堂打饭排队，大家都按顺序排好，每个人占一小段空间，谁也不插队。
2. 链式结构 $  链式结构把元素存于任意内存单元（不一定连续），用指针存放关联元素的地址。
链式机构具有以下性质：
  不支持随机访问元素；
  支持插入元素。
  事实上食堂总会有人插队，相当于在两个元素之间插入一个元素。</description>
    </item>
    
    <item>
      <title>栈</title>
      <link>https://freeze.org.cn/docs/DS/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/stack/</guid>
      <description>简介 $  栈是一种「先进后出」的数据结构。类似于在桶中堆积物品，取物品时只能从顶端开始取，最先进桶的被压在最底下，最后被取出来。基本操作见 STL Stack。
表达式计算 $  算术表达式分为三类（$op$ 为运算符，$A,B$ 为数字或表达式）：
  中缀表达式：全国人民都在用的表达式，如「$5×(3+2)$」；
  前缀表达式：形如「$op \ \textcolor{red}{A} \ \textcolor{blue}{B}$」，如「$× \ \textcolor{red}{5} \ \textcolor{blue}{+} \ \textcolor{blue}{3} \ \textcolor{blue}{2}$」；
  后缀表达式：形如「$\textcolor{red}{A} \ \textcolor{blue}{B} \ op$」，如「$\textcolor{red}{3} \ \textcolor{red}{2} \ \textcolor{red}{+} \ \textcolor{blue}{5} \ ×$」。
  计算前/后缀表达式时，先递归求出 $A,B$ 的值，二者再做 $op$ 运算。计算方案是唯一确定的，且不需要使用括号。计算后缀表达式的算法最容易设计。
后缀表达式 $    定义一个栈，用于存放数；
  逐一扫描后缀表达式中的元素：
  若扫到一个数 $n$，则把 $n$ 入栈；
  若扫到运算符 $op$ ，则弹出栈顶的两个元素，二者做 $op$ 计算。将计算结果入栈。</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://freeze.org.cn/docs/DS/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/link/</guid>
      <description>简介 $    链表只能按顺序依次访问元素，而数组支持随机访问。
  链表支持在任意位置插入或删除元素，而数组不支持。
  链表节点 $  用一个结构体表示链表的节点，其中可以存储任意数据。另外用 prev 和 next 两个指针指向前后相邻的节点。
struct Node { int val; // 数据（可以是任意类型）  Node *prev, *next; // 指针 }; 初始化 $  初始化链表时，额外建立两个节点 head 和 tail 代表链表头尾，把实际节点存储在 head 与 tail 之间，简化链表边界的判断。
Node *head, *tail; void init() { head = new Node(); tail = new Node(); head-&amp;gt;next = tail; tail-&amp;gt;prev = next; } 插入/删除节点 $  如何在 $1$ 和 $2$ 之间插入 $3$ ？</description>
    </item>
    
    <item>
      <title>队列</title>
      <link>https://freeze.org.cn/docs/DS/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/queue/</guid>
      <description>简介 $  队列是一种「先进先出」的数据结构。元素从队列的前端进入（入队），从末端离开（出队），类似于排队。基本操作见 STL Queue。
双向队列 $  队列元素只能从一端进，另一端出，有时无法满足问题的需要。双向队列应运而生，它支持从两端插入或删除元素。
双向队列的基本操作见 STL Deque。
单调队列 $  单调队列的元素从队头到队尾满足单调性，适用于查询某一动态区间的最大（或最小）元素。
插入元素 $  将 $A[i]$ 入队，维护队列单调性，同时保证队列元素在 $A[p\cdots i]$ 范围内。以单调递增队列为例：
  重复弹出队头，直到队头 $≥p$；
  重复弹出队尾，直到 $A[$队尾$]&amp;lt;A[i]$（若单调递减，则重复直到 $A[$队尾$]&amp;gt;A[i]$）。
  将 $i$ 入队。
  涉及双端操作，须使用双向队列。此时 $A[p\cdots i]$ 范围内最小元素为 $A[$队头$]$。
deque&amp;lt;int&amp;gt; q; // 存储元素下标  void insert(int i, int p) { // 将 a[i] 入队，维护队列元素在 a[p...i] 范围内  while(!q.empty() &amp;amp;&amp;amp; q.front() &amp;lt; p) q.</description>
    </item>
    
    <item>
      <title>二叉堆</title>
      <link>https://freeze.org.cn/docs/DS/heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/heap/</guid>
      <description>简介 $  二叉堆（Binary Heap） 是一种基于完全二叉树的数据结构。
  小根堆：任意节点 $≥$ 其父节点，根节点最小。
  大根堆：任意节点 $≤$ 其父节点，根节点最大。
  本篇以小根堆为例，介绍二叉堆的实现方式。
构造 $  按照「从上到下，从左到右」的顺序给节点编号。
该二叉堆具有以下性质：
  $1$ 号节点是根节点。
  $u$ 号节点的父节点为 $u÷2$（向下取整）。
  $u$ 号节点的左子节点为 $2u$，右子节点为 $2u+1$。
  二叉堆的任意一条支路都按照升序排序。
  使用数组保存二叉堆。
int t[], n; // t[u] : u 号节点的值 // n : 节点总数 插入 $  如何往小根堆中插入元素 $2$？
  在堆底新建节点，值为 $2$；
  对新节点所在支路进行排序。重复执行以下步骤：</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>https://freeze.org.cn/docs/DS/DSU/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/DSU/</guid>
      <description>简介 $  并查集 支持以下操作：
  往一个集合中加入元素；
  快速查询两个元素是否在同一集合；
  合并两个集合为一个集合。
  基本原理 $  若 $a \ b$，$e \ c$，$e \ d$ 分别在同一个集合，则一共有几个集合？$b$ 和 $d$ 是否同集？
构造并查集 $  把属于同一集合的两个节点连一起，易知集合数 $=$ 连通图数。若两个节点连通，则它们同集。
<<<<<<< HEAD
并查集在每个集合中选取一个代表元素作为根节点，构造「树型结构」。如下图，$a$ 和 $e$ 分别是两个集合的代表元素。
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) flowchart TDsubgraph &amp;nbspe((e))--c((c))e((e))--d((d))endsubgraph &amp;nbspa((a))--b((b)) end$fa[i]$ 代表节点 $i$ 的父节点编号。如上图，$fa[b]=a$，$fa[d]=e$，$fa[c]=e$。根节点没有父节点，其 $fa$ 值都设为 $0$，如 $fa[a]=0$，$fa[e]=0$。</description>
=======
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) flowchart TDsubgraph &amp;nbspe((e))---c((c))e((e))---d((d))endsubgraph &amp;nbspa((a))---b((b)) end并查集在每个集合中选取一个代表元素作为根节点，构造「树型结构」。如下图，$a$ 和 $e$ 分别是两个集合的代表元素。
flowchart TDsubgraph &amp;nbspe((e))--c((c))e((e))--d((d))endsubgraph &amp;nbspa((a))--b((b)) end$fa[i]$ 代表节点 $i$ 的父节点编号。如上图，$fa[b]=a$，$fa[d]=e$，$fa[c]=e$。根节点没有父节点，其 $fa$ 值都设为 $0$，如 $fa[a]=0$，$fa[e]=0$。</description>
>>>>>>> 348abda768c2d46f07ff3fdeed20cbb5f111c98c
    </item>
    
    <item>
      <title>树状数组</title>
      <link>https://freeze.org.cn/docs/DS/treearray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/treearray/</guid>
      <description>前置知识 $  你得先学会 $lowbit(n)$ 的计算方式。
引入问题 $  数组 $A$ 中共 $n$ 个元素，对其反复进行以下操作共 $m$ 次：
  单点修改：将 $A[ x]$ 加上 $k$。
  区间查询：查询 $A[l\cdots r]$ 的和。
  int a[]; void set(int id, int v) { // 单点修改  a[id] = v; } int ask(int l, int r) { // 区间查询  int ans = 0; for(int i = l; i &amp;lt;= r; i ++) ans += a[i]; return ans; }     暴力算法（$\textcolor{red}{×}$） 树状数组（$\textcolor{green}{√}$）     单点修改 $\textcolor{green}{O(1)}$ $\textcolor{green}{O(\log{n})}$   区间查询 $\textcolor{red}{O(n)}$ $\textcolor{green}{O(\log{n})}$   $m$ 次操作 $\textcolor{red}{O(mn)}$ $\textcolor{green}{O(m\log{n})}$    构造 $  在原数组的上方构建树型结构，每个节点表示一段区间和：</description>
    </item>
    
    <item>
      <title>线段树</title>
      <link>https://freeze.org.cn/docs/DS/segtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/DS/segtree/</guid>
      <description>引入问题 $  数组 $A$ 中共 $n$ 个元素，对其反复进行以下操作共 $m$ 次：
  单点修改：将 $A[id]$ 修改为 $v$。
  区间查询：查询 $A[l\cdots r]$ 的最小值。
  区间修改：将 $A[l\cdots r]$ 每个数加上 $v$。
  int a[]; void set(int id, int v) { // 单点修改  a[id] = v; } int ask(int l, int r) { // 区间查询  int ans = 0; for(int i = l; i &amp;lt;= r; i ++) ans = min(ans, a[i]); return ans; } void add(int l, int r, int v) { // 区间修改  for(int i = l; i &amp;lt;= r; i ++) a[i] += v; }     暴力算法（$\textcolor{red}{×}$） 线段树（$\textcolor{green}{√}$）     单点修改 $\textcolor{green}{O(1)}$ $\textcolor{green}{O(\log{n})}$   区间查询 $\textcolor{red}{O(n)}$ $\textcolor{green}{O(\log{n})}$   区间修改 $\textcolor{red}{O(n)}$ $\textcolor{green}{O(\log{n})}$   $m$ 次操作 $\textcolor{red}{O(mn)}$ $\textcolor{green}{O(m\log{n})}$    构造 $  查询数组 $A={6,2,3,7,1,5,4,2}$ 中的最小值时，通常使用「两两比较法」：每次比较相邻两项，只保留更小的一项。比较的过程可以画成一棵二叉树，树根是答案。</description>
    </item>
    
  </channel>
</rss>
