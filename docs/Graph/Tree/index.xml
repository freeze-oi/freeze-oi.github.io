<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>树 on Freeze&#39;s Blogs</title>
    <link>https://freeze.org.cn/docs/Graph/Tree/</link>
    <description>Recent content in 树 on Freeze&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://freeze.org.cn/docs/Graph/Tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>树的遍历</title>
      <link>https://freeze.org.cn/docs/Graph/Tree/traversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/Graph/Tree/traversal/</guid>
      <description>简介 $  递归访问树中所有节点的过程叫做树的遍历。本章介绍二叉树的 $3$ 种遍历方式。
前序遍历 $  先访问根节点，再遍历左子树，最后遍历右子树。上图的前序遍历顺序为 $1→2→4→5→3$。
void dfs(int u) { // 打印以 u 为根的树的遍历顺序  if(!u) return; cout &amp;lt;&amp;lt; u &amp;lt;&amp;lt; endl; dfs(l[u]); // l[u] 表示 u 的左子节点  dfs(r[u]); // r[u] 表示 u 的右子节点 } 中序遍历 $  先遍历左子树，再访问根节点，最后遍历右子树。上图的中序遍历顺序为 $4→2→5→1→3$。
void dfs(int u) { if(!u) return; dfs(l[u]); cout &amp;lt;&amp;lt; u &amp;lt;&amp;lt; endl; dfs(r[u]); } 后序遍历 $  先遍历左子树，再遍历右子树，最后访问根节点。上图的后序遍历顺序为 $4→5→2→3→1$。
void dfs(int u) { if(!</description>
    </item>
    
    <item>
      <title>最近公共祖先</title>
      <link>https://freeze.org.cn/docs/Graph/Tree/LCA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/Graph/Tree/LCA/</guid>
      <description>Warning
学习本章前，最好先去看看 树形 DP。
 简介 $  最近公共祖先全称为 $Least \ Common \ Ancestors$，简称 $LCA$。
节点 $p,q$ 的最近公共祖先（节点 $s$）是 $p$ 到 $q$ 的最短路径中 深度 最浅的节点：
如何求两个节点的 $LCA$？首先考虑暴力算法。
0 用 $p,q$ 两个指针分别指向这两个节点，并且 $p$ 的 深度 比 $q$ 深。
1 将 $p$ 不断往父节点方向移，直到 $p,q$ 处于同一深度。
2 $p$ 和 $q$ 同时往父节点移，直到它们相遇于 $s$ 节点。$s$ 节点为 $p$ 和 $q$ 的 $LCA$。
 var src1 = [&#34;/Graph/Tree/LCA_2.png&#34;, &#34;/Graph/Tree/LCA_3.png&#34;, &#34;/Graph/Tree/LCA_4.png&#34;];var src2 = [&#34;</description>
    </item>
    
    <item>
      <title>最小生成树</title>
      <link>https://freeze.org.cn/docs/Graph/Tree/MST/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://freeze.org.cn/docs/Graph/Tree/MST/</guid>
      <description>简介 $   无向图 $G$ 的生成树同时满足以下性质：
  包含 $G$ 中的所有节点；
  任意两个节点都 连通；
  具有树的所有性质。
  下图的 $b$ 和 $c$ 皆为 $a$ 的生成树。
最小生成树是所有生成树中边权和最小的树。$n$ 个节点的无向图中，最小生成树有 $n-1$ 条边。
Kruskal 算法 $  Kruskal 算法是一种贪心算法。
  将 $m$ 条边按照边权升序排序；
  从小到大枚举边，若此边的两个顶点未连通，则在树中加入此边，并连通两个顶点。重复直到共加入 $n-1$ 条边。
  使用 并查集判断和维护两个顶点是否连通。
时间复杂度为 $O(m\log{m})$，适用于稀疏图。
int n, m, fa[]; struct edge { int x, y, len; } g[]; bool cmp(edge x, edge y) { return x.</description>
    </item>
    
  </channel>
</rss>
