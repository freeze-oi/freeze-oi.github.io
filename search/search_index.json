{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Freeze's Blogs $ \u516c\u544a \u952e\u5165 Shift + F5 \u5237\u65b0\u67e5\u770b\u6700\u65b0\u7248\u672c\u3002\u79fb\u52a8\u7aef\u9700\u8981\u5237\u65b0\u7f13\u5b58\u3002 \u7279\u522b\u611f\u8c22\u7528\u6237 Q2322 \u3001 Breeze \u3001 Fishencan \u3001 111 \u3001 Jade \u3001 Asami \u5bf9\u7f51\u7ad9\u7ef4\u62a4\u505a\u51fa\u7684\u5de8\u5927\u8d21\u732e\u3002 \u6b22\u8fce C #include <stdio.h> int main ( void ) { printf ( \"Welcome To Freeze! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Welcome To Freeze!\" << std :: endl ; return 0 ; } \u53d1\u73b0\u9690\u85cf\u533a\u57df\uff01","title":"\u4e3b\u9875"},{"location":"#freezes-blogs","text":"\u516c\u544a \u952e\u5165 Shift + F5 \u5237\u65b0\u67e5\u770b\u6700\u65b0\u7248\u672c\u3002\u79fb\u52a8\u7aef\u9700\u8981\u5237\u65b0\u7f13\u5b58\u3002 \u7279\u522b\u611f\u8c22\u7528\u6237 Q2322 \u3001 Breeze \u3001 Fishencan \u3001 111 \u3001 Jade \u3001 Asami \u5bf9\u7f51\u7ad9\u7ef4\u62a4\u505a\u51fa\u7684\u5de8\u5927\u8d21\u732e\u3002 \u6b22\u8fce C #include <stdio.h> int main ( void ) { printf ( \"Welcome To Freeze! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Welcome To Freeze!\" << std :: endl ; return 0 ; } \u53d1\u73b0\u9690\u85cf\u533a\u57df\uff01","title":"Freeze's Blogs"},{"location":"posts/basis/bfs/","text":"\u7b80\u4ecb $ \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \uff08 Breadth First Search \uff0c\u7b80\u79f0 BFS \uff09\u6309\u7167 \u5c42\u6b21\u987a\u5e8f \u67e5\u627e\u8282\u70b9\uff0c\u5982\u4e0b\u56fe\uff1a \u8bbf\u95ee\u8282\u70b9 0\uff08\u6839\u8282\u70b9\uff09\uff1b \u8bbf\u95ee\u8282\u70b9 0 \u7684\u6240\u6709\u5b50\u7ed3\u70b9\uff08\u7ed3\u70b9 1\u30012\uff09\uff1b \u8bbf\u95ee\u8282\u70b9 1\u30012 \u7684\u6240\u6709\u5b50\u7ed3\u70b9\uff08\u7ed3\u70b9 3\u30014\u30015\uff09\uff1b \\(\\cdots \\ \\cdots\\) \u91cd\u590d\u8bbf\u95ee\u5b50\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u8bbf\u95ee\u5230\u76ee\u6807\u8282\u70b9\u3002 \u57fa\u672c\u539f\u7406 $ \u5b9a\u4e49\u4e00\u4e2a \u961f\u5217 \uff0c\u7528\u4e8e\u5b58\u653e\u8282\u70b9\u7f16\u53f7\uff1b \u5c06\u6839\u8282\u70b9\u7f16\u53f7\u63d2\u5165\u961f\u5c3e\uff08\u5165\u961f\uff09\uff1b \u5c06\u961f\u5934\u7684\u6240\u6709\u5b50\u8282\u70b9\u5165\u961f\uff0c\u79fb\u9664\u961f\u5934\u5143\u7d20\uff08\u51fa\u961f\uff09\uff0c\u91cd\u590d\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002 Warning \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8bbf\u95ee\u540c\u4e00\u8282\u70b9\uff0c\u5df2\u7ecf\u8fdb\u8fc7\u961f\u5217\u7684\u7ed3\u70b9\u4e0d\u80fd\u518d\u6b21\u5165\u961f\u3002 Code bool vis []; // vis[i] \u4ee3\u8868\u8282\u70b9 i \u662f\u5426\u8fdb\u8fc7\u961f\u5217 void bfs ( int s , int e ) { // \u5728\u6839\u8282\u70b9\u4e3a s \u7684\u56fe\u4e2d\u627e\u5230\u8282\u70b9 e memset ( vis , false , sizeof vis ); queue < int > Q ; Q . push ( s ); // \u6839\u8282\u70b9\u5165\u961f while ( ! Q . empty ()) { int top = Q . top (); Q . pop (); // \u51fa\u961f if ( top == e ) return ; // \u627e\u5230\u7ed3\u70b9 e for ( int i = top \u7684\u6240\u6709\u5b50\u8282\u70b9\u7f16\u53f7 ) if ( ! vis [ i ]) // \u5982\u679c\u6ca1\u6709\u8fdb\u8fc7\u961f\u5217 Q . push ( i ), vis [ i ] = true ; // \u5165\u961f } } \u8282\u70b9\u5c42\u6570 $ \u6c42\u4efb\u610f\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\uff08\u6df1\u5ea6\uff09\u3002 \u5b50\u8282\u70b9\u5c42\u6570 = \u7236\u8282\u70b9\u5c42\u6570 + 1\u3002 Code struct Node { int id , step ; // id \u4e3a\u8282\u70b9\u7f16\u53f7\uff0cstep \u4e3a\u5c42\u6570 }; bool vis []; int bfs ( int s , int e ) { // \u5728\u6839\u8282\u70b9\u4e3a s \u7684\u56fe\u4e2d\uff0c\u8fd4\u56de\u8282\u70b9 e \u7684\u5c42\u6570 memset ( vis , false , sizeof vis ); queue < Node > Q ; Q . push ( Node { s , 1 }); while ( ! Q . empty ()) { Node top = Q . top (); Q . pop (); if ( top . id == e ) return top . step ; for ( int i = top \u7684\u6240\u6709\u5b50\u8282\u70b9\u7f16\u53f7 ) if ( ! vis [ i ]) { Q . push ( Node { i , top . step + 1 }); // \u5b50\u8282\u70b9\u5c42\u6570 = \u7236\u8282\u70b9\u5c42\u6570 + 1 vis [ i ] = true ; } } }","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"posts/basis/bfs/#_1","text":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \uff08 Breadth First Search \uff0c\u7b80\u79f0 BFS \uff09\u6309\u7167 \u5c42\u6b21\u987a\u5e8f \u67e5\u627e\u8282\u70b9\uff0c\u5982\u4e0b\u56fe\uff1a \u8bbf\u95ee\u8282\u70b9 0\uff08\u6839\u8282\u70b9\uff09\uff1b \u8bbf\u95ee\u8282\u70b9 0 \u7684\u6240\u6709\u5b50\u7ed3\u70b9\uff08\u7ed3\u70b9 1\u30012\uff09\uff1b \u8bbf\u95ee\u8282\u70b9 1\u30012 \u7684\u6240\u6709\u5b50\u7ed3\u70b9\uff08\u7ed3\u70b9 3\u30014\u30015\uff09\uff1b \\(\\cdots \\ \\cdots\\) \u91cd\u590d\u8bbf\u95ee\u5b50\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u8bbf\u95ee\u5230\u76ee\u6807\u8282\u70b9\u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/bfs/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a \u961f\u5217 \uff0c\u7528\u4e8e\u5b58\u653e\u8282\u70b9\u7f16\u53f7\uff1b \u5c06\u6839\u8282\u70b9\u7f16\u53f7\u63d2\u5165\u961f\u5c3e\uff08\u5165\u961f\uff09\uff1b \u5c06\u961f\u5934\u7684\u6240\u6709\u5b50\u8282\u70b9\u5165\u961f\uff0c\u79fb\u9664\u961f\u5934\u5143\u7d20\uff08\u51fa\u961f\uff09\uff0c\u91cd\u590d\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002 Warning \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8bbf\u95ee\u540c\u4e00\u8282\u70b9\uff0c\u5df2\u7ecf\u8fdb\u8fc7\u961f\u5217\u7684\u7ed3\u70b9\u4e0d\u80fd\u518d\u6b21\u5165\u961f\u3002 Code bool vis []; // vis[i] \u4ee3\u8868\u8282\u70b9 i \u662f\u5426\u8fdb\u8fc7\u961f\u5217 void bfs ( int s , int e ) { // \u5728\u6839\u8282\u70b9\u4e3a s \u7684\u56fe\u4e2d\u627e\u5230\u8282\u70b9 e memset ( vis , false , sizeof vis ); queue < int > Q ; Q . push ( s ); // \u6839\u8282\u70b9\u5165\u961f while ( ! Q . empty ()) { int top = Q . top (); Q . pop (); // \u51fa\u961f if ( top == e ) return ; // \u627e\u5230\u7ed3\u70b9 e for ( int i = top \u7684\u6240\u6709\u5b50\u8282\u70b9\u7f16\u53f7 ) if ( ! vis [ i ]) // \u5982\u679c\u6ca1\u6709\u8fdb\u8fc7\u961f\u5217 Q . push ( i ), vis [ i ] = true ; // \u5165\u961f } }","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/basis/bfs/#_3","text":"\u6c42\u4efb\u610f\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\uff08\u6df1\u5ea6\uff09\u3002 \u5b50\u8282\u70b9\u5c42\u6570 = \u7236\u8282\u70b9\u5c42\u6570 + 1\u3002 Code struct Node { int id , step ; // id \u4e3a\u8282\u70b9\u7f16\u53f7\uff0cstep \u4e3a\u5c42\u6570 }; bool vis []; int bfs ( int s , int e ) { // \u5728\u6839\u8282\u70b9\u4e3a s \u7684\u56fe\u4e2d\uff0c\u8fd4\u56de\u8282\u70b9 e \u7684\u5c42\u6570 memset ( vis , false , sizeof vis ); queue < Node > Q ; Q . push ( Node { s , 1 }); while ( ! Q . empty ()) { Node top = Q . top (); Q . pop (); if ( top . id == e ) return top . step ; for ( int i = top \u7684\u6240\u6709\u5b50\u8282\u70b9\u7f16\u53f7 ) if ( ! vis [ i ]) { Q . push ( Node { i , top . step + 1 }); // \u5b50\u8282\u70b9\u5c42\u6570 = \u7236\u8282\u70b9\u5c42\u6570 + 1 vis [ i ] = true ; } } }","title":"\u8282\u70b9\u5c42\u6570"},{"location":"posts/basis/binary/","text":"\u7b80\u4ecb $ Question \u73a9\u8fc7\u300c\u6570\u5b57\u70b8\u5f39\u300d\u6e38\u620f\u5417\uff1f \u53eb\u4f60\u7684\u670b\u53cb\u5728\u4f60\u80cc\u540e\u5199\u4e00\u4e2a \\([1,1000]\\) \u4e2d\u7684\u6b63\u6574\u6570 \\(n\\) \uff1b \u6bcf\u8f6e\u4f60\u90fd\u4f1a\u7ed9\u51fa\u6570\u5b57 \\(x\\) \uff0c\u4f60\u670b\u53cb\u53ea\u80fd\u56de\u7b54\u300c \\(n\\) \u6bd4 \\(x\\) \u5927\u300d\u300c \\(n\\) \u6bd4 \\(x\\) \u5c0f\u300d\u6216\u300c\u731c\u4e2d\u300d\u3002 \u4e00\u65e6\u731c\u4e2d\uff0c\u6570\u5b57\u70b8\u5f39\u5c31\u4f1a\u7206\u70b8\u3002\u4f60\u80fd\u82b1\u6700\u5c11\u6b21\u6570\u5f15\u7206\u70b8\u5f39\u5417\uff1f \u6700\u521d \\(n\u2208(0,1001)\\) \u3002\u4f60\u53ef\u4ee5\u5148\u731c \\(500\\) \uff1a \u82e5 \\(n>500\\) \uff0c\u5219\u53ef\u4ee5\u8fdb\u4e00\u6b65\u786e\u5b9a \\(n\u2208(500,1001)\\) \uff1b \u82e5 \\(n<500\\) \uff0c\u5219\u53ef\u4ee5\u8fdb\u4e00\u6b65\u786e\u5b9a \\(n\u2208(0,500)\\) \uff1b \u5426\u5219 \\(n=500\\) \uff0c\u731c\u4e2d\u3002 \u91cd\u590d\u731c\u8303\u56f4\u7684\u4e2d\u95f4\u6570\uff0c\u6bcf\u6b21\u90fd\u4f1a\u5c06 \\(n\\) \u7684\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\uff0c\u6700\u591a \\(\\log{n}\\) \u6b21\u5c31\u53ef\u4ee5\u786e\u5b9a \\(n\\) \u7684\u503c\u3002 \u901a\u8fc7\u82e5\u5e72\u6b21\u6298\u534a\u8303\u56f4\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\uff0c\u662f \u4e8c\u5206\u7b97\u6cd5 \u7684\u57fa\u672c\u601d\u60f3\u3002 \u57fa\u672c\u539f\u7406 $ \\(l\\) \u8868\u793a \\(n\\) \u6240\u5728\u8303\u56f4\u7684\u5de6\u7aef\u70b9\uff0c \\(r\\) \u8868\u793a\u53f3\u7aef\u70b9\uff0c\u5373 \\(n\u2208(l,r)\\) \u3002\u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u53d6\u8303\u56f4\u7684\u4e2d\u95f4\u6570 \\(m=\\lfloor(l+r)/2\\rfloor\\) \uff1b \u82e5 \\(n>m\\) \uff0c\u5219\u53ef\u4ee5\u786e\u5b9a \\(n\u2208(m,r)\\) \uff0c\u4ee4 \\(l=m\\) \uff1b \u82e5 \\(n<m\\) \uff0c\u5219\u53ef\u4ee5\u786e\u5b9a \\(n\u2208(l,m)\\) \uff0c\u4ee4 \\(r=m\\) \uff1b \u82e5 \\(n=m\\) \uff0c\u8df3\u51fa\u5faa\u73af\u3002 \u521d\u59cb\u6761\u4ef6\uff1a \\(l=0,r=1001\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int binSearch ( int n ) { // \u4f7f\u7528\u4e8c\u5206\u7b97\u6cd5\u731c\u51fa n \u7684\u6700\u5c11\u6b21\u6570 int l = 0 , r = 1001 , frq = 0 ; // frq \u8bb0\u5f55\u6b21\u6570 while ( ++ frq ) { int m = ( l + r ) / 2 ; if ( n > m ) l = m ; else if ( n < m ) r = m ; else break ; } return frq ; }","title":"\u4e8c\u5206\u7b97\u6cd5"},{"location":"posts/basis/binary/#_1","text":"Question \u73a9\u8fc7\u300c\u6570\u5b57\u70b8\u5f39\u300d\u6e38\u620f\u5417\uff1f \u53eb\u4f60\u7684\u670b\u53cb\u5728\u4f60\u80cc\u540e\u5199\u4e00\u4e2a \\([1,1000]\\) \u4e2d\u7684\u6b63\u6574\u6570 \\(n\\) \uff1b \u6bcf\u8f6e\u4f60\u90fd\u4f1a\u7ed9\u51fa\u6570\u5b57 \\(x\\) \uff0c\u4f60\u670b\u53cb\u53ea\u80fd\u56de\u7b54\u300c \\(n\\) \u6bd4 \\(x\\) \u5927\u300d\u300c \\(n\\) \u6bd4 \\(x\\) \u5c0f\u300d\u6216\u300c\u731c\u4e2d\u300d\u3002 \u4e00\u65e6\u731c\u4e2d\uff0c\u6570\u5b57\u70b8\u5f39\u5c31\u4f1a\u7206\u70b8\u3002\u4f60\u80fd\u82b1\u6700\u5c11\u6b21\u6570\u5f15\u7206\u70b8\u5f39\u5417\uff1f \u6700\u521d \\(n\u2208(0,1001)\\) \u3002\u4f60\u53ef\u4ee5\u5148\u731c \\(500\\) \uff1a \u82e5 \\(n>500\\) \uff0c\u5219\u53ef\u4ee5\u8fdb\u4e00\u6b65\u786e\u5b9a \\(n\u2208(500,1001)\\) \uff1b \u82e5 \\(n<500\\) \uff0c\u5219\u53ef\u4ee5\u8fdb\u4e00\u6b65\u786e\u5b9a \\(n\u2208(0,500)\\) \uff1b \u5426\u5219 \\(n=500\\) \uff0c\u731c\u4e2d\u3002 \u91cd\u590d\u731c\u8303\u56f4\u7684\u4e2d\u95f4\u6570\uff0c\u6bcf\u6b21\u90fd\u4f1a\u5c06 \\(n\\) \u7684\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\uff0c\u6700\u591a \\(\\log{n}\\) \u6b21\u5c31\u53ef\u4ee5\u786e\u5b9a \\(n\\) \u7684\u503c\u3002 \u901a\u8fc7\u82e5\u5e72\u6b21\u6298\u534a\u8303\u56f4\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\uff0c\u662f \u4e8c\u5206\u7b97\u6cd5 \u7684\u57fa\u672c\u601d\u60f3\u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/binary/#_2","text":"\\(l\\) \u8868\u793a \\(n\\) \u6240\u5728\u8303\u56f4\u7684\u5de6\u7aef\u70b9\uff0c \\(r\\) \u8868\u793a\u53f3\u7aef\u70b9\uff0c\u5373 \\(n\u2208(l,r)\\) \u3002\u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u53d6\u8303\u56f4\u7684\u4e2d\u95f4\u6570 \\(m=\\lfloor(l+r)/2\\rfloor\\) \uff1b \u82e5 \\(n>m\\) \uff0c\u5219\u53ef\u4ee5\u786e\u5b9a \\(n\u2208(m,r)\\) \uff0c\u4ee4 \\(l=m\\) \uff1b \u82e5 \\(n<m\\) \uff0c\u5219\u53ef\u4ee5\u786e\u5b9a \\(n\u2208(l,m)\\) \uff0c\u4ee4 \\(r=m\\) \uff1b \u82e5 \\(n=m\\) \uff0c\u8df3\u51fa\u5faa\u73af\u3002 \u521d\u59cb\u6761\u4ef6\uff1a \\(l=0,r=1001\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int binSearch ( int n ) { // \u4f7f\u7528\u4e8c\u5206\u7b97\u6cd5\u731c\u51fa n \u7684\u6700\u5c11\u6b21\u6570 int l = 0 , r = 1001 , frq = 0 ; // frq \u8bb0\u5f55\u6b21\u6570 while ( ++ frq ) { int m = ( l + r ) / 2 ; if ( n > m ) l = m ; else if ( n < m ) r = m ; else break ; } return frq ; }","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/basis/compress/","text":"\u7b80\u4ecb $ \u5c06\u957f\u5ea6\u4e3a \\(m\\) \u7684 bool \u6570\u7ec4\u7528\u4e00\u4e2a \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6574\u6570\u8868\u793a\uff0c\u8be5\u6574\u6570\u7684\u7b2c \\(i\\) \u4f4d\u5bf9\u5e94\u539f\u6570\u7ec4\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u3002 \u64cd\u4f5c \u8fd0\u7b97 \u53d6\u51fa\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d (n >> (k - 1)) & 1 \u5c06\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u53d6\u53cd n ^ (1 << (k - 1)) \u5c06\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(1\\) n | (1 << (k - 1)) \u5c06\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(0\\) n & (~(1 << (k - 1))) \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 STL Bitset \u3002 \u6210\u5bf9\u53d8\u6362 $ \u82e5 \\(n>0\\) \u4e3a\u5076\u6570\uff0c\u5219 \\(n \\ \\rm xor \\ 1=n+1\\) \uff1b \u82e5 \\(n>0\\) \u4e3a\u5947\u6570\uff0c\u5219 \\(n \\ \\rm xor \\ 1=n-1\\) \u3002 \u56e0\u6b64\uff0c\u300c \\(0\\) \u4e0e \\(1\\) \u300d\uff0c\u300c \\(2\\) \u4e0e \\(3\\) \u300d\uff0c\u300c \\(4\\) \u4e0e \\(5\\) \u300d\uff0c \\(\\cdots\\) \u5173\u4e8e \\(\\rm xor \\ 1\\) \u8fd0\u7b97\u6784\u6210\u300c\u6210\u5bf9\u53d8\u6362\u300d\u3002\u6b64\u7279\u6027\u5e94\u7528\u4e8e\u4e34\u63a5\u8868\u7684 \u53cd\u5411\u8fb9\u8bbf\u95ee \u3002 Lowbit \u8fd0\u7b97 $ \\(\\rm lowbit(n)\\) \u4e3a \\(n\\) \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u300c\u6700\u4f4e\u4f4d\u7684 \\(1\\) \u53ca\u5176\u540e\u6240\u6709\u7684 \\(0\\) \u300d\u6784\u6210\u7684\u6570\u503c\u3002\u4f8b\u5982\uff1a \\(n=10=(1010)_2\\) \uff0c \\(\\rm lowbit(n)=(10)_2=2\\) \u3002 \u5047\u8bbe \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u4e3a \\(1\\) \uff0c\u7b2c \\(0\\sim k-1\\) \u4f4d\u90fd\u4e3a \\(0\\) \uff1a \u5c06 \\(n\\) \u53d6\u53cd\uff0c\u6b64\u65f6 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u4e3a \\(0\\) \uff0c\u7b2c \\(0\\sim k-1\\) \u4f4d\u4e3a \\(1\\) \uff0c\u7b2c \\(k+1\\) \u5230\u6700\u9ad8\u4f4d\u548c\u539f\u6765\u76f8\u53cd\uff1b \u4ee4 \\(n=n+1\\) \uff0c\u6b64\u65f6\u7b2c \\(k\\) \u4f4d\u4e3a \\(1\\) \uff0c\u7b2c \\(0\\sim k-1\\) \u4f4d\u4e3a \\(0\\) \uff0c\u7b2c \\(k+1\\) \u5230\u6700\u9ad8\u4f4d\u4ecd\u4e0e\u539f\u6765\u76f8\u53cd\uff1b \u6b64\u65f6 \\(n\\&(\\sim n+1)\\) \u4ec5\u6709\u7b2c \\(k\\) \u4f4d\u4e3a \\(1\\) \u3002 \u7531\u4e8e\u5728\u8865\u7801\u8868\u793a\u4e0b \\(-n=\\sim n+1\\) \uff0c\u56e0\u6b64\uff1a \\[ \\rm lowbit(n)=n\\&(\\sim n+1)=n\\&-n \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 \\(n\\) \\(\\sim n\\) \\(\\sim n+1\\) \\(n\\&(\\sim n+1)\\) \\((\\) 101000 \\()_2\\) \\((\\) 010111 \\()_2\\) \\((\\) 011000 \\()_2\\) \\((\\) 001000 \\()_2\\) th, td { font-size: 14px; }","title":"\u72b6\u6001\u538b\u7f29"},{"location":"posts/basis/compress/#_1","text":"\u5c06\u957f\u5ea6\u4e3a \\(m\\) \u7684 bool \u6570\u7ec4\u7528\u4e00\u4e2a \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6574\u6570\u8868\u793a\uff0c\u8be5\u6574\u6570\u7684\u7b2c \\(i\\) \u4f4d\u5bf9\u5e94\u539f\u6570\u7ec4\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u3002 \u64cd\u4f5c \u8fd0\u7b97 \u53d6\u51fa\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d (n >> (k - 1)) & 1 \u5c06\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u53d6\u53cd n ^ (1 << (k - 1)) \u5c06\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(1\\) n | (1 << (k - 1)) \u5c06\u4e8c\u8fdb\u5236\u6570 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(0\\) n & (~(1 << (k - 1))) \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 STL Bitset \u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/compress/#_2","text":"\u82e5 \\(n>0\\) \u4e3a\u5076\u6570\uff0c\u5219 \\(n \\ \\rm xor \\ 1=n+1\\) \uff1b \u82e5 \\(n>0\\) \u4e3a\u5947\u6570\uff0c\u5219 \\(n \\ \\rm xor \\ 1=n-1\\) \u3002 \u56e0\u6b64\uff0c\u300c \\(0\\) \u4e0e \\(1\\) \u300d\uff0c\u300c \\(2\\) \u4e0e \\(3\\) \u300d\uff0c\u300c \\(4\\) \u4e0e \\(5\\) \u300d\uff0c \\(\\cdots\\) \u5173\u4e8e \\(\\rm xor \\ 1\\) \u8fd0\u7b97\u6784\u6210\u300c\u6210\u5bf9\u53d8\u6362\u300d\u3002\u6b64\u7279\u6027\u5e94\u7528\u4e8e\u4e34\u63a5\u8868\u7684 \u53cd\u5411\u8fb9\u8bbf\u95ee \u3002","title":"\u6210\u5bf9\u53d8\u6362"},{"location":"posts/basis/compress/#lowbit","text":"\\(\\rm lowbit(n)\\) \u4e3a \\(n\\) \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u300c\u6700\u4f4e\u4f4d\u7684 \\(1\\) \u53ca\u5176\u540e\u6240\u6709\u7684 \\(0\\) \u300d\u6784\u6210\u7684\u6570\u503c\u3002\u4f8b\u5982\uff1a \\(n=10=(1010)_2\\) \uff0c \\(\\rm lowbit(n)=(10)_2=2\\) \u3002 \u5047\u8bbe \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u4e3a \\(1\\) \uff0c\u7b2c \\(0\\sim k-1\\) \u4f4d\u90fd\u4e3a \\(0\\) \uff1a \u5c06 \\(n\\) \u53d6\u53cd\uff0c\u6b64\u65f6 \\(n\\) \u7684\u7b2c \\(k\\) \u4f4d\u4e3a \\(0\\) \uff0c\u7b2c \\(0\\sim k-1\\) \u4f4d\u4e3a \\(1\\) \uff0c\u7b2c \\(k+1\\) \u5230\u6700\u9ad8\u4f4d\u548c\u539f\u6765\u76f8\u53cd\uff1b \u4ee4 \\(n=n+1\\) \uff0c\u6b64\u65f6\u7b2c \\(k\\) \u4f4d\u4e3a \\(1\\) \uff0c\u7b2c \\(0\\sim k-1\\) \u4f4d\u4e3a \\(0\\) \uff0c\u7b2c \\(k+1\\) \u5230\u6700\u9ad8\u4f4d\u4ecd\u4e0e\u539f\u6765\u76f8\u53cd\uff1b \u6b64\u65f6 \\(n\\&(\\sim n+1)\\) \u4ec5\u6709\u7b2c \\(k\\) \u4f4d\u4e3a \\(1\\) \u3002 \u7531\u4e8e\u5728\u8865\u7801\u8868\u793a\u4e0b \\(-n=\\sim n+1\\) \uff0c\u56e0\u6b64\uff1a \\[ \\rm lowbit(n)=n\\&(\\sim n+1)=n\\&-n \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 \\(n\\) \\(\\sim n\\) \\(\\sim n+1\\) \\(n\\&(\\sim n+1)\\) \\((\\) 101000 \\()_2\\) \\((\\) 010111 \\()_2\\) \\((\\) 011000 \\()_2\\) \\((\\) 001000 \\()_2\\) th, td { font-size: 14px; }","title":"Lowbit \u8fd0\u7b97"},{"location":"posts/basis/dfs/","text":"\u7b80\u4ecb $ \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \uff08 Depth First Search \uff0c\u7b80\u79f0 DFS \uff09\u5728\u67e5\u627e\u8282\u70b9\u65f6\uff0c\u6bcf\u6b21\u90fd\u5c3d\u53ef\u80fd\u5f80\u66f4\u6df1\u5904\u8bbf\u95ee\uff0c\u5982\u4e0b\u56fe\uff1a \u57fa\u672c\u539f\u7406 $ DFS \u7b97\u6cd5\u5728\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u9012\u5f52\uff1a \u82e5\u5f53\u524d\u7ed3\u70b9\u4e3a\u76ee\u6807\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\uff1b \u9012\u5f52\u641c\u7d22\u5f53\u524d\u7ed3\u70b9\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9\u3002 Code void dfs ( int s , int e ) { // \u4ece\u8282\u70b9 i \u51fa\u53d1\uff0c\u67e5\u627e\u7ed3\u70b9 e if ( s == e ) return ; // \u627e\u5230\u7ed3\u70b9 e for ( int i = \u7ed3\u70b9 k \u7684\u5b50\u8282\u70b9\u7f16\u53f7 ) dfs ( i , e ); // \u641c\u7d22 return ; // \u56de\u6eaf\uff08\u6b64\u5904\u53ef\u4ee5\u7701\u7565\uff09 }","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"posts/basis/dfs/#_1","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \uff08 Depth First Search \uff0c\u7b80\u79f0 DFS \uff09\u5728\u67e5\u627e\u8282\u70b9\u65f6\uff0c\u6bcf\u6b21\u90fd\u5c3d\u53ef\u80fd\u5f80\u66f4\u6df1\u5904\u8bbf\u95ee\uff0c\u5982\u4e0b\u56fe\uff1a","title":"\u7b80\u4ecb"},{"location":"posts/basis/dfs/#_2","text":"DFS \u7b97\u6cd5\u5728\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u9012\u5f52\uff1a \u82e5\u5f53\u524d\u7ed3\u70b9\u4e3a\u76ee\u6807\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\uff1b \u9012\u5f52\u641c\u7d22\u5f53\u524d\u7ed3\u70b9\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9\u3002 Code void dfs ( int s , int e ) { // \u4ece\u8282\u70b9 i \u51fa\u53d1\uff0c\u67e5\u627e\u7ed3\u70b9 e if ( s == e ) return ; // \u627e\u5230\u7ed3\u70b9 e for ( int i = \u7ed3\u70b9 k \u7684\u5b50\u8282\u70b9\u7f16\u53f7 ) dfs ( i , e ); // \u641c\u7d22 return ; // \u56de\u6eaf\uff08\u6b64\u5904\u53ef\u4ee5\u7701\u7565\uff09 }","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/basis/high-pre/","text":"\u7b80\u4ecb $ \u9ad8\u7cbe\u5ea6\u662f\u4e00\u5957\u652f\u6301\u9ad8\u4f4d\u6570\u7684\u8fd0\u7b97\u7cfb\u7edf\uff0c\u4f8b\u5982\u6c42\u4e24\u4e2a 114514 \u4f4d\u6570\u7684\u548c\u3002 \u8f93\u5165 $ \u5148\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u518d\u628a\u6bcf\u4e00\u4f4d\u53d6\u51fa\uff0c\u5b58\u5165\u6570\u7ec4\u3002 Code void init ( int a []) { memset ( a , 0 , sizeof a ); // \u6e05\u7a7a\u6570\u7ec4 a string s ; cin >> s ; a [ 0 ] = s . length (); // a[0] \u7528\u4e8e\u50a8\u5b58\u6570\u7684\u957f\u5ea6 for ( int i = 1 ; i <= a [ 0 ]; i ++ ) a [ i ] = s [ a [ 0 ] - i ] - '0' ; // \u5c06\u5b57\u7b26\u4e32\u5012\u5e8f\u50a8\u5b58\uff0c\u4fbf\u4e8e\u6309\u4f4d\u8ba1\u7b97 } \u4e5f\u53ef\u4ee5\u9010\u4e2a\u8bfb\u5165\u5b57\u7b26\u3002 Code void init ( int a []) { memset ( a , 0 , sizeof a ); int i = 0 ; char s = getchar (); while ( s < '0' || s > '9' ) s = getchar (); while ( s >= '0' && s <= '9' ) a [ ++ i ] = s \u2013 '0' , s = getchar (); a [ 0 ] = i ; } \u6bd4\u8f83 $ \u5148\u6bd4\u8f83\u4f4d\u6570\uff0c\u82e5\u4f4d\u6570\u76f8\u540c\u5219\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u9010\u4f4d\u6bd4\u8f83\u3002 Code int cmp ( int a [], int b []) { // a > b \u5219\u8fd4\u56de 1\uff0ca < b \u5219\u8fd4\u56de -1\uff0c\u5426\u5219\u8fd4\u56de 0 if ( a [ 0 ] != b [ 0 ]) return a [ 0 ] > b [ 0 ] ? 1 : -1 ; for ( int i = a [ 0 ]; i >= 1 ; i -- ) if ( a [ i ] != b [ i ]) return a [ i ] > b [ i ] ? 1 : -1 ; return 0 ; } \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 $ \u4ece\u4e2a\u4f4d\u5f00\u59cb\uff0c\u5c06\u4e24\u4e2a\u6570\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u8d85\u8fc7 \\(10\\) \u8981\u8fdb\u4f4d\u3002 Code void plus ( int a [], int b [], int c []) { // \u5c06 a + b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = max ( a [ 0 ], b [ 0 ]); for ( int i = 1 ; i <= c [ 0 ]; i ++ ) { c [ i ] += a [ i ] + b [ i ]; if ( c [ i ] >= 10 ) // \u8fdb 1 c [ i + 1 ] += 1 , c [ i ] %= 10 ; } while ( c [ c [ 0 ] + 1 ] != 0 ) c [ 0 ] ++ ; // \u4fee\u6b63\u4f4d\u6570 } \u9ad8\u7cbe\u5ea6\u51cf\u6cd5 $ \u4ece\u4e2a\u4f4d\u5f00\u59cb\uff0c\u5c06\u4e24\u4e2a\u6570\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u5b57\u76f8\u51cf\uff0c\u5c0f\u4e8e \\(0\\) \u8981\u501f\u4f4d\u3002 Code void minus ( int a [], int b [], int c []) { // \u5c06 a - b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = max ( a [ 0 ], b [ 0 ]); for ( int i = 1 ; i <= c [ 0 ]; i ++ ) { if ( a [ i ] < b [ i ]) // \u501f\u4f4d a [ i + 1 ] -- , a [ i ] += 10 ; c [ i ] = a [ i ] - b [ i ]; } while ( c [ c [ 0 ]] == 0 && c [ 0 ] >= 1 ) c [ 0 ] -- ; // \u4fee\u6b63\u4f4d\u6570 } \u9ad8\u7cbe\u5ea6\u4e58\u6cd5 $ \u9ad8\u7cbe \u00d7 \u4f4e\u7cbe $ \u4ece\u4e2a\u4f4d\u5f00\u59cb\uff0c\u5c06\u9ad8\u7cbe\u5ea6\u6570\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u4f4e\u7cbe\u5ea6\u6570\uff0c\u8d85\u8fc7 \\(10\\) \u8981\u8fdb\u4f4d\u3002 Warning \u9ad8\u7cbe\u5ea6\u4e58\u6cd5\u7684\u8fdb\u4f4d\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6309\u4f4d\u4e58\u5b8c\u540e\u8fd8\u8981\u5904\u7406\u591a\u4f59\u7684\u8fdb\u4f4d\u3002 Code void mult ( int a [], int b , int c []) { // \u5c06 a \u00d7 b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = a [ 0 ]; for ( int i = 1 ; i <= a [ 0 ]; i ++ ) { c [ i ] += a [ i ] * b ; if ( c [ i ] >= 10 ) c [ i + 1 ] += c [ i ] / 10 , c [ i ] /= 10 ; } while ( c [ c [ 0 ] + 1 ]) // \u5904\u7406\u591a\u4f59\u7684\u8fdb\u4f4d c [ c [ 0 ] + 1 ] += c [ c [ 0 ]] / 10 , c [ c [ 0 ]] /= 10 , c [ 0 ] ++ ; } \u9ad8\u7cbe \u00d7 \u9ad8\u7cbe $ \u505a\u7ad6\u5f0f\u4e58\u6cd5\u65f6\uff0c \\(a\\) \u7684\u7b2c \\(i\\) \u4f4d\u4e58 \\(b\\) \u7684\u7b2c \\(j\\) \u4f4d\u6700\u7ec8\u4f1a\u52a0\u5728\u7b54\u6848\u7684\u7b2c \\(i+j-1\\) \u4f4d\u4e0a\u3002 Warning \u8ba1\u7b97\u7ed3\u675f\u540e\u8981\u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 \\(0\\) \u3002 Code void mult ( int a [], int b [], int c []) { // \u5c06 a \u00d7 b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = a [ 0 ] + b [ 0 ]; int d ; // \u7528\u4e8e\u5b58\u653e\u8fdb\u4f4d for ( int i = 1 ; i <= a [ 0 ]; i ++ ) { d = 0 ; for ( int j = 1 ; j <= b [ 0 ]; j ++ ) { c [ i + j - 1 ] += a [ i ] * b [ j ] + d ; d = c [ i + j - 1 ] / 10 , c [ i + j - 1 ] %= 10 ; } c [ i + b [ 0 ]] = d ; // \u591a\u4f59\u7684\u8fdb\u4f4d } while ( c [ c [ 0 ]] == 0 && c [ 0 ] > 1 ) c [ 0 ] -- ; // \u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 0 } \u9ad8\u7cbe\u5ea6\u9664\u6cd5 $ \u505a\u7ad6\u5f0f\u9664\u6cd5\u65f6\uff0c\u5c06\u9664\u6570\u7684\u6700\u9ad8\u4f4d\u548c\u88ab\u9664\u6570\u5bf9\u9f50\uff0c\u9010\u4f4d\u300c\u8bd5\u5546\u300d\uff0c\u5982\u4e0b\u56fe\uff08\u7a7a\u4f4d\u5df2\u7528 \\(0\\) \u586b\u8865\uff09\uff1a \u9ad8\u7cbe\u5ea6\u9664\u6cd5\u6b65\u9aa4\uff1a \u5c06\u9664\u6570\u7684\u6700\u9ad8\u4f4d\u548c\u88ab\u9664\u6570\u5bf9\u9f50\uff1b \u5c06\u88ab\u9664\u6570\u4e00\u76f4\u51cf\u53bb\u9664\u6570\uff0c\u76f4\u5230\u88ab\u9664\u6570 < \u9664\u6570\uff0c\u8bb0\u5f55\u51cf\u7684\u6b21\u6570\uff1b \u91cd\u590d\u4e0a\u4e24\u6b65\uff0c\u76f4\u5230\u9664\u5230\u4e2a\u4f4d\uff1b \u6309\u987a\u5e8f\u8f93\u51fa\u51cf\u7684\u6b21\u6570\uff0c\u5f97\u5230\u6574\u4e2a\u5f0f\u5b50\u7684\u5546\u3002\u6700\u540e\u7684\u88ab\u9664\u6570\u662f\u4f59\u6570\u3002 Warning \u8ba1\u7b97\u7ed3\u675f\u540e\u8981\u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 \\(0\\) \u3002 \u6837\u4f8b\u7a0b\u5e8f\u7684 dev() \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\uff0c\u6570\u7ec4 a \u5b58\u50a8\u7684\u6570\u53d8\u4e3a a\u00f7b \u7684\u4f59\u6570\u3002 Code void shift ( int a [], int d ) { // \u5728 a \u7684\u540e\u9762\u8865 d \u4e2a 0\uff08\u82e5 d < 0 \u5219\u53bb\u6389|d|\u4e2a 0\uff09 int b [ 100001 ] = {}; for ( int i = a [ 0 ] + d ; i >= max ( 0 , 1 + d ); i -- ) b [ i ] = a [ i - d ]; a [ 0 ] += d ; for ( int i = 1 ; i <= max ( a [ 0 ], a [ 0 ] - d ); i ++ ) a [ i ] = b [ i ]; } void dev ( int a [], int b [], int c []) { // \u5c06 a \u00f7 b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); if ( b [ 0 ] == 1 && b [ 1 ] == 0 ) return ; // \u9664\u6570\u4e3a 0 \u65f6\u65e0\u610f\u4e49 if ( cmp ( a , b ) == -1 ) { // \u88ab\u9664\u6570 < \u9664\u6570\u65f6\uff0c\u5546\u4e3a 0 c [ 0 ] = 1 , c [ 1 ] = 0 ; return ; } c [ 0 ] = a [ 0 ] - b [ 0 ] + 1 ; shift ( b , a [ 0 ] - b [ 0 ]); // \u8c03\u6574 b \u7684\u4f4d\u6570\uff0c\u4f7f b \u548c a \u5bf9\u9f50 for ( int i = c [ 0 ]; i >= 1 ; i -- ) { while ( cmp ( a , b ) >= 0 ) { // \u7528\u9ad8\u7cbe\u5ea6\u51cf\u6cd5\u6a21\u62df\u300c\u8bd5\u5546\u300d c [ i ] ++ ; for ( int j = 1 ; j <= a [ 0 ]; j ++ ) { if ( a [ j ] < b [ j ]) a [ j + 1 ] -- , a [ j ] += 10 ; a [ j ] -= b [ j ]; } while ( a [ a [ 0 ]] == 0 && a [ 0 ] > 1 ) a [ 0 ] -- ; // \u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 0 } shift ( b , -1 ); // \u5c06 b \u51cf\u5c0f\u4e00\u4f4d\uff0c\u548c\u65b0\u7684\u88ab\u9664\u6570\u5bf9\u9f50 } while ( c [ c [ 0 ]] == 0 && c [ 0 ] > 1 ) c [ 0 ] -- ; // \u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 0 } \u8f93\u51fa $ \u6570\u636e\u662f\u5012\u5e8f\u50a8\u5b58\u7684\uff0c\u6545\u5012\u5e8f\u8f93\u51fa\uff1a Code void print ( int a []) { for ( int i = a [ 0 ]; i >= 1 ; i -- ) printf ( \"%d\" , a [ i ]); printf ( \" \\n \" ); }","title":"\u9ad8\u7cbe\u5ea6"},{"location":"posts/basis/high-pre/#_1","text":"\u9ad8\u7cbe\u5ea6\u662f\u4e00\u5957\u652f\u6301\u9ad8\u4f4d\u6570\u7684\u8fd0\u7b97\u7cfb\u7edf\uff0c\u4f8b\u5982\u6c42\u4e24\u4e2a 114514 \u4f4d\u6570\u7684\u548c\u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/high-pre/#_2","text":"\u5148\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u518d\u628a\u6bcf\u4e00\u4f4d\u53d6\u51fa\uff0c\u5b58\u5165\u6570\u7ec4\u3002 Code void init ( int a []) { memset ( a , 0 , sizeof a ); // \u6e05\u7a7a\u6570\u7ec4 a string s ; cin >> s ; a [ 0 ] = s . length (); // a[0] \u7528\u4e8e\u50a8\u5b58\u6570\u7684\u957f\u5ea6 for ( int i = 1 ; i <= a [ 0 ]; i ++ ) a [ i ] = s [ a [ 0 ] - i ] - '0' ; // \u5c06\u5b57\u7b26\u4e32\u5012\u5e8f\u50a8\u5b58\uff0c\u4fbf\u4e8e\u6309\u4f4d\u8ba1\u7b97 } \u4e5f\u53ef\u4ee5\u9010\u4e2a\u8bfb\u5165\u5b57\u7b26\u3002 Code void init ( int a []) { memset ( a , 0 , sizeof a ); int i = 0 ; char s = getchar (); while ( s < '0' || s > '9' ) s = getchar (); while ( s >= '0' && s <= '9' ) a [ ++ i ] = s \u2013 '0' , s = getchar (); a [ 0 ] = i ; }","title":"\u8f93\u5165"},{"location":"posts/basis/high-pre/#_3","text":"\u5148\u6bd4\u8f83\u4f4d\u6570\uff0c\u82e5\u4f4d\u6570\u76f8\u540c\u5219\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u9010\u4f4d\u6bd4\u8f83\u3002 Code int cmp ( int a [], int b []) { // a > b \u5219\u8fd4\u56de 1\uff0ca < b \u5219\u8fd4\u56de -1\uff0c\u5426\u5219\u8fd4\u56de 0 if ( a [ 0 ] != b [ 0 ]) return a [ 0 ] > b [ 0 ] ? 1 : -1 ; for ( int i = a [ 0 ]; i >= 1 ; i -- ) if ( a [ i ] != b [ i ]) return a [ i ] > b [ i ] ? 1 : -1 ; return 0 ; }","title":"\u6bd4\u8f83"},{"location":"posts/basis/high-pre/#_4","text":"\u4ece\u4e2a\u4f4d\u5f00\u59cb\uff0c\u5c06\u4e24\u4e2a\u6570\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u8d85\u8fc7 \\(10\\) \u8981\u8fdb\u4f4d\u3002 Code void plus ( int a [], int b [], int c []) { // \u5c06 a + b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = max ( a [ 0 ], b [ 0 ]); for ( int i = 1 ; i <= c [ 0 ]; i ++ ) { c [ i ] += a [ i ] + b [ i ]; if ( c [ i ] >= 10 ) // \u8fdb 1 c [ i + 1 ] += 1 , c [ i ] %= 10 ; } while ( c [ c [ 0 ] + 1 ] != 0 ) c [ 0 ] ++ ; // \u4fee\u6b63\u4f4d\u6570 }","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5"},{"location":"posts/basis/high-pre/#_5","text":"\u4ece\u4e2a\u4f4d\u5f00\u59cb\uff0c\u5c06\u4e24\u4e2a\u6570\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u5b57\u76f8\u51cf\uff0c\u5c0f\u4e8e \\(0\\) \u8981\u501f\u4f4d\u3002 Code void minus ( int a [], int b [], int c []) { // \u5c06 a - b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = max ( a [ 0 ], b [ 0 ]); for ( int i = 1 ; i <= c [ 0 ]; i ++ ) { if ( a [ i ] < b [ i ]) // \u501f\u4f4d a [ i + 1 ] -- , a [ i ] += 10 ; c [ i ] = a [ i ] - b [ i ]; } while ( c [ c [ 0 ]] == 0 && c [ 0 ] >= 1 ) c [ 0 ] -- ; // \u4fee\u6b63\u4f4d\u6570 }","title":"\u9ad8\u7cbe\u5ea6\u51cf\u6cd5"},{"location":"posts/basis/high-pre/#_6","text":"","title":"\u9ad8\u7cbe\u5ea6\u4e58\u6cd5"},{"location":"posts/basis/high-pre/#_7","text":"\u4ece\u4e2a\u4f4d\u5f00\u59cb\uff0c\u5c06\u9ad8\u7cbe\u5ea6\u6570\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u4f4e\u7cbe\u5ea6\u6570\uff0c\u8d85\u8fc7 \\(10\\) \u8981\u8fdb\u4f4d\u3002 Warning \u9ad8\u7cbe\u5ea6\u4e58\u6cd5\u7684\u8fdb\u4f4d\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6309\u4f4d\u4e58\u5b8c\u540e\u8fd8\u8981\u5904\u7406\u591a\u4f59\u7684\u8fdb\u4f4d\u3002 Code void mult ( int a [], int b , int c []) { // \u5c06 a \u00d7 b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = a [ 0 ]; for ( int i = 1 ; i <= a [ 0 ]; i ++ ) { c [ i ] += a [ i ] * b ; if ( c [ i ] >= 10 ) c [ i + 1 ] += c [ i ] / 10 , c [ i ] /= 10 ; } while ( c [ c [ 0 ] + 1 ]) // \u5904\u7406\u591a\u4f59\u7684\u8fdb\u4f4d c [ c [ 0 ] + 1 ] += c [ c [ 0 ]] / 10 , c [ c [ 0 ]] /= 10 , c [ 0 ] ++ ; }","title":"\u9ad8\u7cbe \u00d7 \u4f4e\u7cbe"},{"location":"posts/basis/high-pre/#_8","text":"\u505a\u7ad6\u5f0f\u4e58\u6cd5\u65f6\uff0c \\(a\\) \u7684\u7b2c \\(i\\) \u4f4d\u4e58 \\(b\\) \u7684\u7b2c \\(j\\) \u4f4d\u6700\u7ec8\u4f1a\u52a0\u5728\u7b54\u6848\u7684\u7b2c \\(i+j-1\\) \u4f4d\u4e0a\u3002 Warning \u8ba1\u7b97\u7ed3\u675f\u540e\u8981\u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 \\(0\\) \u3002 Code void mult ( int a [], int b [], int c []) { // \u5c06 a \u00d7 b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); c [ 0 ] = a [ 0 ] + b [ 0 ]; int d ; // \u7528\u4e8e\u5b58\u653e\u8fdb\u4f4d for ( int i = 1 ; i <= a [ 0 ]; i ++ ) { d = 0 ; for ( int j = 1 ; j <= b [ 0 ]; j ++ ) { c [ i + j - 1 ] += a [ i ] * b [ j ] + d ; d = c [ i + j - 1 ] / 10 , c [ i + j - 1 ] %= 10 ; } c [ i + b [ 0 ]] = d ; // \u591a\u4f59\u7684\u8fdb\u4f4d } while ( c [ c [ 0 ]] == 0 && c [ 0 ] > 1 ) c [ 0 ] -- ; // \u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 0 }","title":"\u9ad8\u7cbe \u00d7 \u9ad8\u7cbe"},{"location":"posts/basis/high-pre/#_9","text":"\u505a\u7ad6\u5f0f\u9664\u6cd5\u65f6\uff0c\u5c06\u9664\u6570\u7684\u6700\u9ad8\u4f4d\u548c\u88ab\u9664\u6570\u5bf9\u9f50\uff0c\u9010\u4f4d\u300c\u8bd5\u5546\u300d\uff0c\u5982\u4e0b\u56fe\uff08\u7a7a\u4f4d\u5df2\u7528 \\(0\\) \u586b\u8865\uff09\uff1a \u9ad8\u7cbe\u5ea6\u9664\u6cd5\u6b65\u9aa4\uff1a \u5c06\u9664\u6570\u7684\u6700\u9ad8\u4f4d\u548c\u88ab\u9664\u6570\u5bf9\u9f50\uff1b \u5c06\u88ab\u9664\u6570\u4e00\u76f4\u51cf\u53bb\u9664\u6570\uff0c\u76f4\u5230\u88ab\u9664\u6570 < \u9664\u6570\uff0c\u8bb0\u5f55\u51cf\u7684\u6b21\u6570\uff1b \u91cd\u590d\u4e0a\u4e24\u6b65\uff0c\u76f4\u5230\u9664\u5230\u4e2a\u4f4d\uff1b \u6309\u987a\u5e8f\u8f93\u51fa\u51cf\u7684\u6b21\u6570\uff0c\u5f97\u5230\u6574\u4e2a\u5f0f\u5b50\u7684\u5546\u3002\u6700\u540e\u7684\u88ab\u9664\u6570\u662f\u4f59\u6570\u3002 Warning \u8ba1\u7b97\u7ed3\u675f\u540e\u8981\u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 \\(0\\) \u3002 \u6837\u4f8b\u7a0b\u5e8f\u7684 dev() \u51fd\u6570\u6267\u884c\u7ed3\u675f\u540e\uff0c\u6570\u7ec4 a \u5b58\u50a8\u7684\u6570\u53d8\u4e3a a\u00f7b \u7684\u4f59\u6570\u3002 Code void shift ( int a [], int d ) { // \u5728 a \u7684\u540e\u9762\u8865 d \u4e2a 0\uff08\u82e5 d < 0 \u5219\u53bb\u6389|d|\u4e2a 0\uff09 int b [ 100001 ] = {}; for ( int i = a [ 0 ] + d ; i >= max ( 0 , 1 + d ); i -- ) b [ i ] = a [ i - d ]; a [ 0 ] += d ; for ( int i = 1 ; i <= max ( a [ 0 ], a [ 0 ] - d ); i ++ ) a [ i ] = b [ i ]; } void dev ( int a [], int b [], int c []) { // \u5c06 a \u00f7 b \u7684\u7ed3\u679c\u5b58\u5165 c memset ( c , 0 , sizeof c ); if ( b [ 0 ] == 1 && b [ 1 ] == 0 ) return ; // \u9664\u6570\u4e3a 0 \u65f6\u65e0\u610f\u4e49 if ( cmp ( a , b ) == -1 ) { // \u88ab\u9664\u6570 < \u9664\u6570\u65f6\uff0c\u5546\u4e3a 0 c [ 0 ] = 1 , c [ 1 ] = 0 ; return ; } c [ 0 ] = a [ 0 ] - b [ 0 ] + 1 ; shift ( b , a [ 0 ] - b [ 0 ]); // \u8c03\u6574 b \u7684\u4f4d\u6570\uff0c\u4f7f b \u548c a \u5bf9\u9f50 for ( int i = c [ 0 ]; i >= 1 ; i -- ) { while ( cmp ( a , b ) >= 0 ) { // \u7528\u9ad8\u7cbe\u5ea6\u51cf\u6cd5\u6a21\u62df\u300c\u8bd5\u5546\u300d c [ i ] ++ ; for ( int j = 1 ; j <= a [ 0 ]; j ++ ) { if ( a [ j ] < b [ j ]) a [ j + 1 ] -- , a [ j ] += 10 ; a [ j ] -= b [ j ]; } while ( a [ a [ 0 ]] == 0 && a [ 0 ] > 1 ) a [ 0 ] -- ; // \u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 0 } shift ( b , -1 ); // \u5c06 b \u51cf\u5c0f\u4e00\u4f4d\uff0c\u548c\u65b0\u7684\u88ab\u9664\u6570\u5bf9\u9f50 } while ( c [ c [ 0 ]] == 0 && c [ 0 ] > 1 ) c [ 0 ] -- ; // \u53bb\u6389\u6700\u9ad8\u4f4d\u591a\u4f59\u7684 0 }","title":"\u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"posts/basis/high-pre/#_10","text":"\u6570\u636e\u662f\u5012\u5e8f\u50a8\u5b58\u7684\uff0c\u6545\u5012\u5e8f\u8f93\u51fa\uff1a Code void print ( int a []) { for ( int i = a [ 0 ]; i >= 1 ; i -- ) printf ( \"%d\" , a [ i ]); printf ( \" \\n \" ); }","title":"\u8f93\u51fa"},{"location":"posts/basis/sort/","text":"\u9009\u62e9\u6392\u5e8f $ \u6bcf\u6b21\u627e\u51fa\u7b2c \\(i\\) \u5c0f\u7684\u5143\u7d20\uff0c\u4e0e\u6570\u7ec4\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u4ea4\u6362\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Graph Code for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ j ] < a [ k ]) swap ( a [ i ], a [ k ]); \u5192\u6ce1\u6392\u5e8f $ \u6bcf\u6b21\u68c0\u67e5\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5927\u4e8e\u540e\u4e00\u4e2a\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u5f53\u6ca1\u6709\u53ef\u4ea4\u6362\u7684\u5143\u7d20\u65f6\uff0c\u6392\u5e8f\u7ed3\u675f\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 \u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8f83\u5927\u7684\u5143\u7d20\u50cf\u6c14\u6ce1\u822c\u300c\u6d6e\u300d\u5230\u6570\u5217\u7684\u672b\u5c3e\uff0c\u6545\u53eb\u505a\u5192\u6ce1\u6392\u5e8f\u3002 Graph Code while ( true ) { bool solve = false ; for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] > a [ i + 1 ]) swap ( a [ i ], a [ i + 1 ]), solve = true ; if ( ! solve ) break ; } \u63d2\u5165\u6392\u5e8f $ \u5c06\u6570\u5217\u5206\u4e3a\u300c\u5df2\u6392\u5e8f\u300d\u548c\u300c\u672a\u6392\u5e8f\u300d\u4e24\u90e8\u5206\uff0c\u6bcf\u6b21\u4ece\u300c\u672a\u6392\u5e8f\u300d\u533a\u57df\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u300c\u5df2\u6392\u5e8f\u300d\u533a\u57df\u7684\u6b63\u786e\u4f4d\u7f6e\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Graph Code for ( int i = 2 ; i <= n ; i ++ ) { int cnt = a [ i ], j = i - 1 ; while ( j >= 1 && a [ j ] > cnt ) a [ j + 1 ] = a [ j -- ]; a [ j + 1 ] = cnt ; } \u8ba1\u6570\u6392\u5e8f $ \\(f[i]\\) \u8868\u793a\u5143\u7d20 \\(i\\) \u7684\u51fa\u73b0\u6b21\u6570\u3002 \u626b\u63cf\u6570\u7ec4\uff0c\u5c06\u5f53\u524d\u5143\u7d20 \\(x\\) \u5bf9\u5e94\u7684 \\(f[x]\\) \u52a0\u4e00\uff1b \u904d\u5386 \\(f[i=1\\cdots maxn]\\) \uff0c\u4f9d\u6b21\u8f93\u51fa \\(f[i]\\) \u4e2a \\(i\\) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Warning \u5f53\u5143\u7d20\u8303\u56f4\u8fc7\u5927\u65f6\uff0c\u4e0d\u5b9c\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u3002 Graph Code int maxn = -1e9 , p = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { f [ a [ i ]] ++ ; maxn = max ( maxn , a [ i ]); } for ( int i = 1 ; i <= maxn ; i ++ ) for ( int i = 1 ; i <= f [ i ]; i ++ ) a [ ++ p ] = i ; \u5feb\u901f\u6392\u5e8f $ \u8bbe\u5b9a\u57fa\u51c6\u6570\uff08\u901a\u5e38\u662f\u6570\u5217\u6700\u4e2d\u95f4\u7684\u6570\uff09\uff0c\u5c06\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u6570\u653e\u5728\u5b83\u5de6\u8fb9\uff0c\u5927\u4e8e\u5b83\u7684\u653e\u5728\u53f3\u8fb9\uff1b \u9012\u5f52\u6392\u5e8f\u57fa\u51c6\u6570\u7684\u5de6\u53f3\u4e24\u90e8\u5206\u3002 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(o(n\\log{n})\\) \uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Graph Code void qsort ( int l , int r ) { if ( l >= r ) return ; int i = l , j = r , m = ( l + r ) / 2 ; while ( i <= j ) { while ( a [ i ] < a [ m ]) i ++ ; while ( a [ j ] > a [ m ]) j -- ; if ( i <= j ) swap ( a [ i ++ ], a [ j -- ]); } qsort ( l , j ), qsort ( i , r ); } \u5f52\u5e76\u6392\u5e8f $ \u5c06\u6570\u5217\u5206\u4e3a\u5de6\u53f3\u4e24\u4e2a\u5b50\u5e8f\u5217\uff1b \u9012\u5f52\u6392\u5e8f\u5de6\u53f3\u5b50\u5e8f\u5217\uff1b \u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\log{n})\\) \u3002 Graph Code void msort ( int l , int r ) { int m = ( l + r ) / 2 ; msort ( l , m ), msort ( m + 1 , r ); int i = l , j = m + 1 , k = l ; while ( i <= m && j <= r ) if ( a [ i ] <= a [ j ]) b [ k ++ ] = a [ i ++ ]; else b [ k ++ ] = a [ j ++ ]; while ( i <= m ) b [ k ++ ] = a [ i ++ ]; while ( j <= n ) b [ k ++ ] = a [ j ++ ]; for ( int i = l ; i <= r ; i ++ ) a [ i ] = b [ i ]; } \u7334\u5b50\u6392\u5e8f $ \u4ece\u6570\u5217\u4e2d\u968f\u673a\u9009\u53d6\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u91cd\u590d\u76f4\u5230\u6240\u6709\u5143\u7d20\u5347\u5e8f\u6392\u5217\u3002\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\u00b7n!)\\) \uff0c\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\u221e)\\) \u3002 Graph Code srand ( unsigned ( time ( 0 ))); // \u4f2a\u968f\u673a\u79cd\u5b50 while ( true ) { swap ( a [ rand () % n + 1 ], a [ rand () % n + 1 ]); bool solve = true ; for ( int i = 2 ; i <= n ; i ++ ) if ( a [ i ] < a [ i - 1 ]) solve = false ; if ( solve ) break ; } \u5404\u7c7b\u6392\u5e8f\u7b97\u6cd5\u7684\u6bd4\u8f83 $ \u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747 \u6700\u597d \u6700\u574f \u7a33\u5b9a\u6027 \u9009\u62e9\u6392\u5e8f \\(O(n^2)\\) \\(O(n^2)\\) \\(O(n^2)\\) \u4e0d\u7a33\u5b9a \u5192\u6ce1\u6392\u5e8f \\(O(n^2)\\) \\(O(n)\\) \\(O(n^2)\\) \u7a33\u5b9a \u63d2\u5165\u6392\u5e8f \\(O(n^2)\\) \\(O(n)\\) \\(O(n^2)\\) \u7a33\u5b9a \u8ba1\u6570\u6392\u5e8f \\(O(n)\\) \\(O(n)\\) \\(O(n)\\) \u7a33\u5b9a \u5feb\u901f\u6392\u5e8f \\(O(n\\log{n})\\) \\(O(n\\log{n})\\) \\(O(n^2)\\) \u4e0d\u7a33\u5b9a \u5f52\u5e76\u6392\u5e8f \\(O(n\\log{n})\\) \\(O(n\\log{n})\\) \\(O(n\\log{n})\\) \u7a33\u5b9a \u7334\u5b50\u6392\u5e8f \\(O(n\u00b7n!)\\) \\(O(n)\\) \\(O(\u221e)\\) \u4e0d\u7a33\u5b9a \u6c42\u9006\u5e8f\u5bf9 $ Faq \u8be5\u6a21\u5757\u6b63\u5728\u5f00\u53d1\u4e2d \\(\\cdots \\ \\cdots\\)","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"posts/basis/sort/#_1","text":"\u6bcf\u6b21\u627e\u51fa\u7b2c \\(i\\) \u5c0f\u7684\u5143\u7d20\uff0c\u4e0e\u6570\u7ec4\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u4ea4\u6362\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Graph Code for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ j ] < a [ k ]) swap ( a [ i ], a [ k ]);","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"posts/basis/sort/#_2","text":"\u6bcf\u6b21\u68c0\u67e5\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5927\u4e8e\u540e\u4e00\u4e2a\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u5f53\u6ca1\u6709\u53ef\u4ea4\u6362\u7684\u5143\u7d20\u65f6\uff0c\u6392\u5e8f\u7ed3\u675f\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 \u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8f83\u5927\u7684\u5143\u7d20\u50cf\u6c14\u6ce1\u822c\u300c\u6d6e\u300d\u5230\u6570\u5217\u7684\u672b\u5c3e\uff0c\u6545\u53eb\u505a\u5192\u6ce1\u6392\u5e8f\u3002 Graph Code while ( true ) { bool solve = false ; for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] > a [ i + 1 ]) swap ( a [ i ], a [ i + 1 ]), solve = true ; if ( ! solve ) break ; }","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"posts/basis/sort/#_3","text":"\u5c06\u6570\u5217\u5206\u4e3a\u300c\u5df2\u6392\u5e8f\u300d\u548c\u300c\u672a\u6392\u5e8f\u300d\u4e24\u90e8\u5206\uff0c\u6bcf\u6b21\u4ece\u300c\u672a\u6392\u5e8f\u300d\u533a\u57df\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u300c\u5df2\u6392\u5e8f\u300d\u533a\u57df\u7684\u6b63\u786e\u4f4d\u7f6e\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Graph Code for ( int i = 2 ; i <= n ; i ++ ) { int cnt = a [ i ], j = i - 1 ; while ( j >= 1 && a [ j ] > cnt ) a [ j + 1 ] = a [ j -- ]; a [ j + 1 ] = cnt ; }","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"posts/basis/sort/#_4","text":"\\(f[i]\\) \u8868\u793a\u5143\u7d20 \\(i\\) \u7684\u51fa\u73b0\u6b21\u6570\u3002 \u626b\u63cf\u6570\u7ec4\uff0c\u5c06\u5f53\u524d\u5143\u7d20 \\(x\\) \u5bf9\u5e94\u7684 \\(f[x]\\) \u52a0\u4e00\uff1b \u904d\u5386 \\(f[i=1\\cdots maxn]\\) \uff0c\u4f9d\u6b21\u8f93\u51fa \\(f[i]\\) \u4e2a \\(i\\) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Warning \u5f53\u5143\u7d20\u8303\u56f4\u8fc7\u5927\u65f6\uff0c\u4e0d\u5b9c\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u3002 Graph Code int maxn = -1e9 , p = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { f [ a [ i ]] ++ ; maxn = max ( maxn , a [ i ]); } for ( int i = 1 ; i <= maxn ; i ++ ) for ( int i = 1 ; i <= f [ i ]; i ++ ) a [ ++ p ] = i ;","title":"\u8ba1\u6570\u6392\u5e8f"},{"location":"posts/basis/sort/#_5","text":"\u8bbe\u5b9a\u57fa\u51c6\u6570\uff08\u901a\u5e38\u662f\u6570\u5217\u6700\u4e2d\u95f4\u7684\u6570\uff09\uff0c\u5c06\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u6570\u653e\u5728\u5b83\u5de6\u8fb9\uff0c\u5927\u4e8e\u5b83\u7684\u653e\u5728\u53f3\u8fb9\uff1b \u9012\u5f52\u6392\u5e8f\u57fa\u51c6\u6570\u7684\u5de6\u53f3\u4e24\u90e8\u5206\u3002 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(o(n\\log{n})\\) \uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Graph Code void qsort ( int l , int r ) { if ( l >= r ) return ; int i = l , j = r , m = ( l + r ) / 2 ; while ( i <= j ) { while ( a [ i ] < a [ m ]) i ++ ; while ( a [ j ] > a [ m ]) j -- ; if ( i <= j ) swap ( a [ i ++ ], a [ j -- ]); } qsort ( l , j ), qsort ( i , r ); }","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"posts/basis/sort/#_6","text":"\u5c06\u6570\u5217\u5206\u4e3a\u5de6\u53f3\u4e24\u4e2a\u5b50\u5e8f\u5217\uff1b \u9012\u5f52\u6392\u5e8f\u5de6\u53f3\u5b50\u5e8f\u5217\uff1b \u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\log{n})\\) \u3002 Graph Code void msort ( int l , int r ) { int m = ( l + r ) / 2 ; msort ( l , m ), msort ( m + 1 , r ); int i = l , j = m + 1 , k = l ; while ( i <= m && j <= r ) if ( a [ i ] <= a [ j ]) b [ k ++ ] = a [ i ++ ]; else b [ k ++ ] = a [ j ++ ]; while ( i <= m ) b [ k ++ ] = a [ i ++ ]; while ( j <= n ) b [ k ++ ] = a [ j ++ ]; for ( int i = l ; i <= r ; i ++ ) a [ i ] = b [ i ]; }","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"posts/basis/sort/#_7","text":"\u4ece\u6570\u5217\u4e2d\u968f\u673a\u9009\u53d6\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u91cd\u590d\u76f4\u5230\u6240\u6709\u5143\u7d20\u5347\u5e8f\u6392\u5217\u3002\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\u00b7n!)\\) \uff0c\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\u221e)\\) \u3002 Graph Code srand ( unsigned ( time ( 0 ))); // \u4f2a\u968f\u673a\u79cd\u5b50 while ( true ) { swap ( a [ rand () % n + 1 ], a [ rand () % n + 1 ]); bool solve = true ; for ( int i = 2 ; i <= n ; i ++ ) if ( a [ i ] < a [ i - 1 ]) solve = false ; if ( solve ) break ; }","title":"\u7334\u5b50\u6392\u5e8f"},{"location":"posts/basis/sort/#_8","text":"\u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747 \u6700\u597d \u6700\u574f \u7a33\u5b9a\u6027 \u9009\u62e9\u6392\u5e8f \\(O(n^2)\\) \\(O(n^2)\\) \\(O(n^2)\\) \u4e0d\u7a33\u5b9a \u5192\u6ce1\u6392\u5e8f \\(O(n^2)\\) \\(O(n)\\) \\(O(n^2)\\) \u7a33\u5b9a \u63d2\u5165\u6392\u5e8f \\(O(n^2)\\) \\(O(n)\\) \\(O(n^2)\\) \u7a33\u5b9a \u8ba1\u6570\u6392\u5e8f \\(O(n)\\) \\(O(n)\\) \\(O(n)\\) \u7a33\u5b9a \u5feb\u901f\u6392\u5e8f \\(O(n\\log{n})\\) \\(O(n\\log{n})\\) \\(O(n^2)\\) \u4e0d\u7a33\u5b9a \u5f52\u5e76\u6392\u5e8f \\(O(n\\log{n})\\) \\(O(n\\log{n})\\) \\(O(n\\log{n})\\) \u7a33\u5b9a \u7334\u5b50\u6392\u5e8f \\(O(n\u00b7n!)\\) \\(O(n)\\) \\(O(\u221e)\\) \u4e0d\u7a33\u5b9a","title":"\u5404\u7c7b\u6392\u5e8f\u7b97\u6cd5\u7684\u6bd4\u8f83"},{"location":"posts/basis/sort/#_9","text":"Faq \u8be5\u6a21\u5757\u6b63\u5728\u5f00\u53d1\u4e2d \\(\\cdots \\ \\cdots\\)","title":"\u6c42\u9006\u5e8f\u5bf9"},{"location":"posts/basis/dp/","text":"\u57fa\u672c\u539f\u7406 $ \u52a8\u6001\u89c4\u5212\uff08DP\uff09\u662f\u6c42\u89e3\u591a\u9636\u6bb5\u95ee\u9898\u7684\u4e00\u79cd\u7b56\u7565\uff0c\u6c42\u89e3\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b 5 \u6b65\u3002 1.\u5224\u65ad\u95ee\u9898\u548c\u5b50\u95ee\u9898 $ \u628a\u4e00\u4e2a \u4e3b\u95ee\u9898 \u5206\u6210\u591a\u4e2a \u5b50\u95ee\u9898 \uff0c\u5148\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u518d\u901a\u8fc7\u5b50\u95ee\u9898\u6c42\u89e3\u4e3b\u95ee\u9898\u3002 \u4f8b\u9898 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u7684\u4e3b\u95ee\u9898\u662f\u6c42 \\(f[i]\\) \uff0c\u5b50\u95ee\u9898\u662f\u6c42 \\(f[i-1]\\) \u548c \\(f[i-2]\\) \u3002 2.\u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b $ \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u7528\u4e8e\u63cf\u8ff0\u95ee\u9898\u548c\u5b50\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u4f8b\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f \\(f[i]=f[i-1]+f[i-2]\\) \u3002 3.\u5224\u65ad\u521d\u59cb/\u8fb9\u754c\u6761\u4ef6 $ \u521d\u59cb\u6761\u4ef6 \u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u9884\u5907\u6761\u4ef6\uff0c\u5148\u4e8e\u72b6\u6001\u8f6c\u79fb\u800c\u5b58\u5728\u3002 \\(f[1]=f[2]=1\\) \u662f\u521d\u59cb\u6761\u4ef6\uff0c\u72b6\u6001\u8f6c\u79fb\u4ece \\(f[3]\\) \u5f00\u59cb\uff08 \\(f[3]=f[1]+f[2]\\) \uff09\u3002 \u8fb9\u754c\u6761\u4ef6 \u662f\u72b6\u6001\u8f6c\u79fb\u7684\u7ed3\u675f\u6761\u4ef6\u3002 \u82e5\u53ea\u8981\u6c42\u5230\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c \\(n\\) \u9879\uff0c\u5219 \\(i=n\\) \u662f\u8fb9\u754c\u6761\u4ef6\u3002 \\(i\\) \u8d85\u8fc7 \\(n\\) \u65f6\u5e94\u7ed3\u675f\u72b6\u6001\u8f6c\u79fb\u3002 4.\u5224\u65ad\u8ba1\u7b97\u987a\u5e8f $ \u5408\u7406\u7684 \u8ba1\u7b97\u987a\u5e8f \u5fc5\u987b\u4f7f\u6bcf\u4e2a\u95ee\u9898\u7684\u5b50\u95ee\u9898\u90fd\u5148\u4e8e\u5b83\u88ab\u6c42\u89e3\u3002 \u82e5\u96be\u4ee5\u5224\u65ad\u8ba1\u7b97\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u4f8b\u9898\uff0c\u9700\u8981\u4ece \\(f[3]\\) \u987a\u6b21\u8ba1\u7b97\u5230 \\(f[n]\\) \u3002 5.\u4ee3\u7801\u5b9e\u73b0 $ Code f [ 1 ] = f [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ]; \u91cd\u8981\u6027\u8d28 $ \u6700\u4f18\u5b50\u7ed3\u6784\u6027 $ \u7528 DP \u5904\u7406\u6700\u4f18\u5316\u95ee\u9898\u65f6\uff0c\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ea\u53d6\u51b3\u4e8e\u5176\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u4e0e\u975e\u6700\u4f18\u89e3\u65e0\u5173\u3002 \u65e0\u540e\u6548\u6027 $ \u72b6\u6001 \\(A\\) \u7684\u89e3\u4e00\u65e6\u88ab\u786e\u5b9a\uff0c\u5219\u4e4b\u540e\u7684\u72b6\u6001\u4e0d\u518d\u88ab\u72b6\u6001 \\(A\\) \u4e4b\u524d\u7684\u72b6\u6001\u6240\u5f71\u54cd\u3002 \\(f[i-1]\\) \u548c \\(f[i-2]\\) \u7684\u503c\u4e00\u65e6\u88ab\u786e\u5b9a\uff0c\u5219 \\(f[i]\\) \u7684\u503c\u53ea\u4e0e\u5b83\u4eec\u4e24\u4e2a\u6709\u5173\uff0c\u4e0e \\(f[1\\cdots i-3]\\) \u65e0\u5173\u3002 \u5b50\u95ee\u9898\u91cd\u53e0\u6027 $ \u591a\u4e2a\u95ee\u9898\u6709\u53ef\u80fd\u5305\u542b\u540c\u4e00\u4e2a\u5b50\u95ee\u9898\u3002 \\(f[i]=f[i-1]+f[i-2]\\) \uff0c \\(f[i-1]=f[i-2]+f[i-3]\\) \uff0c\u56e0\u6b64 \\(\\lceil\\) \u6c42 \\(f[i]\\rfloor\\) \u548c \\(\\lceil\\) \u6c42 \\(f[i-1]\\rfloor\\) \u8fd9\u4e24\u4e2a\u95ee\u9898\u90fd\u5305\u542b \\(\\lceil\\) \u6c42 \\(f[i-2]\\rfloor\\) \u8fd9\u4e00\u5b50\u95ee\u9898\u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/dp/#_1","text":"\u52a8\u6001\u89c4\u5212\uff08DP\uff09\u662f\u6c42\u89e3\u591a\u9636\u6bb5\u95ee\u9898\u7684\u4e00\u79cd\u7b56\u7565\uff0c\u6c42\u89e3\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b 5 \u6b65\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/basis/dp/#1","text":"\u628a\u4e00\u4e2a \u4e3b\u95ee\u9898 \u5206\u6210\u591a\u4e2a \u5b50\u95ee\u9898 \uff0c\u5148\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u518d\u901a\u8fc7\u5b50\u95ee\u9898\u6c42\u89e3\u4e3b\u95ee\u9898\u3002 \u4f8b\u9898 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u7684\u4e3b\u95ee\u9898\u662f\u6c42 \\(f[i]\\) \uff0c\u5b50\u95ee\u9898\u662f\u6c42 \\(f[i-1]\\) \u548c \\(f[i-2]\\) \u3002","title":"1.\u5224\u65ad\u95ee\u9898\u548c\u5b50\u95ee\u9898"},{"location":"posts/basis/dp/#2","text":"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u7528\u4e8e\u63cf\u8ff0\u95ee\u9898\u548c\u5b50\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u4f8b\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f \\(f[i]=f[i-1]+f[i-2]\\) \u3002","title":"2.\u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b"},{"location":"posts/basis/dp/#3","text":"\u521d\u59cb\u6761\u4ef6 \u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u9884\u5907\u6761\u4ef6\uff0c\u5148\u4e8e\u72b6\u6001\u8f6c\u79fb\u800c\u5b58\u5728\u3002 \\(f[1]=f[2]=1\\) \u662f\u521d\u59cb\u6761\u4ef6\uff0c\u72b6\u6001\u8f6c\u79fb\u4ece \\(f[3]\\) \u5f00\u59cb\uff08 \\(f[3]=f[1]+f[2]\\) \uff09\u3002 \u8fb9\u754c\u6761\u4ef6 \u662f\u72b6\u6001\u8f6c\u79fb\u7684\u7ed3\u675f\u6761\u4ef6\u3002 \u82e5\u53ea\u8981\u6c42\u5230\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c \\(n\\) \u9879\uff0c\u5219 \\(i=n\\) \u662f\u8fb9\u754c\u6761\u4ef6\u3002 \\(i\\) \u8d85\u8fc7 \\(n\\) \u65f6\u5e94\u7ed3\u675f\u72b6\u6001\u8f6c\u79fb\u3002","title":"3.\u5224\u65ad\u521d\u59cb/\u8fb9\u754c\u6761\u4ef6"},{"location":"posts/basis/dp/#4","text":"\u5408\u7406\u7684 \u8ba1\u7b97\u987a\u5e8f \u5fc5\u987b\u4f7f\u6bcf\u4e2a\u95ee\u9898\u7684\u5b50\u95ee\u9898\u90fd\u5148\u4e8e\u5b83\u88ab\u6c42\u89e3\u3002 \u82e5\u96be\u4ee5\u5224\u65ad\u8ba1\u7b97\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u4f8b\u9898\uff0c\u9700\u8981\u4ece \\(f[3]\\) \u987a\u6b21\u8ba1\u7b97\u5230 \\(f[n]\\) \u3002","title":"4.\u5224\u65ad\u8ba1\u7b97\u987a\u5e8f"},{"location":"posts/basis/dp/#5","text":"Code f [ 1 ] = f [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ];","title":"5.\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/basis/dp/#_2","text":"","title":"\u91cd\u8981\u6027\u8d28"},{"location":"posts/basis/dp/#_3","text":"\u7528 DP \u5904\u7406\u6700\u4f18\u5316\u95ee\u9898\u65f6\uff0c\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ea\u53d6\u51b3\u4e8e\u5176\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u4e0e\u975e\u6700\u4f18\u89e3\u65e0\u5173\u3002","title":"\u6700\u4f18\u5b50\u7ed3\u6784\u6027"},{"location":"posts/basis/dp/#_4","text":"\u72b6\u6001 \\(A\\) \u7684\u89e3\u4e00\u65e6\u88ab\u786e\u5b9a\uff0c\u5219\u4e4b\u540e\u7684\u72b6\u6001\u4e0d\u518d\u88ab\u72b6\u6001 \\(A\\) \u4e4b\u524d\u7684\u72b6\u6001\u6240\u5f71\u54cd\u3002 \\(f[i-1]\\) \u548c \\(f[i-2]\\) \u7684\u503c\u4e00\u65e6\u88ab\u786e\u5b9a\uff0c\u5219 \\(f[i]\\) \u7684\u503c\u53ea\u4e0e\u5b83\u4eec\u4e24\u4e2a\u6709\u5173\uff0c\u4e0e \\(f[1\\cdots i-3]\\) \u65e0\u5173\u3002","title":"\u65e0\u540e\u6548\u6027"},{"location":"posts/basis/dp/#_5","text":"\u591a\u4e2a\u95ee\u9898\u6709\u53ef\u80fd\u5305\u542b\u540c\u4e00\u4e2a\u5b50\u95ee\u9898\u3002 \\(f[i]=f[i-1]+f[i-2]\\) \uff0c \\(f[i-1]=f[i-2]+f[i-3]\\) \uff0c\u56e0\u6b64 \\(\\lceil\\) \u6c42 \\(f[i]\\rfloor\\) \u548c \\(\\lceil\\) \u6c42 \\(f[i-1]\\rfloor\\) \u8fd9\u4e24\u4e2a\u95ee\u9898\u90fd\u5305\u542b \\(\\lceil\\) \u6c42 \\(f[i-2]\\rfloor\\) \u8fd9\u4e00\u5b50\u95ee\u9898\u3002","title":"\u5b50\u95ee\u9898\u91cd\u53e0\u6027"},{"location":"posts/basis/dp/basis/","text":"\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217 $ Question \u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\u5f62\u5982 \\(1,1,2,3,5,8,\\cdots\\) \u7684\u6570\u5217\u3002\u6c42\u6570\u5217\u7684\u7b2c \\(n\\) \u9879\u3002 \\(f[n]\\) \u8868\u793a\u6570\u5217\u7684\u7b2c \\(n\\) \u9879\uff0c\u5219\uff1a \\[ f[n]=f[n-1]+f[n-2],n\u22653 \\] \u521d\u59cb\u6761\u4ef6 \\(f[1]=f[2]=1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[3\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) Code int f []; f [ 1 ] = f [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ]; \u6c49\u8bfa\u5854\uff08Hanoi\uff09\u95ee\u9898 $ Question \u6c49\u8bfa\u5854\u7531 \\(n\\) \u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u5706\u76d8\u548c\u4e09\u6839\u6746\u5b50 \\(a,b,c\\) \u7ec4\u6210\u3002\u521d\u59cb\u65f6\uff0c \\(n\\) \u4e2a\u5706\u76d8\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u5957\u5728 \\(a\\) \u6746\u4e0a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u73b0\u5728\u8981\u6c42\u628a \\(a\\) \u6746\u4e0a\u7684 \\(n\\) \u4e2a\u5706\u76d8\u6309\u4ee5\u4e0b\u89c4\u5219\u79fb\u5230 \\(c\\) \u6746\u4e0a\uff1a \u4e00\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u5706\u76d8\uff1b \u5706\u76d8\u53ea\u80fd\u5b58\u653e\u5728\u67f1\u5b50\u4e0a\uff1b \u5728\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5927\u5706\u76d8\u4e0d\u80fd\u538b\u5728\u5c0f\u5706\u76d8\u4e0a\u3002 \u6c42\u5706\u76d8\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002 \\(f[n]\\) \u8868\u793a\u5c06 \\(n\\) \u4e2a\u5706\u76d8\u4ece\u4e00\u4e2a\u6746\u6574\u4f53\u79fb\u5230\u53e6\u4e00\u4e2a\u6746\uff0c\u9700\u8981\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002 \u5c06 \\(n\\) \u4e2a\u76d8\u5b50\u4ece\u5c0f\u5230\u5927\u7f16\u53f7\u4e3a \\(1\\sim n\\) \u3002\u5c06\u5b83\u4eec\u4ece \\(a\\) \u6746\u79fb\u5230 \\(c\\) \u6746\uff0c\u9700\u8981\u505a\u4ee5\u4e0b \\(3\\) \u6b65\uff1a \u5c06 \\(a\\) \u6746\u4e0a\u7684 \\(1\\sim n-1\\) \u53f7\u76d8\u79fb\u81f3 \\(b\\) \u6746\uff0c\u603b\u79fb\u52a8\u6b21\u6570\u4e3a \\(f[n-1]\\) \uff1b \u5c06 \\(a\\) \u6746\u4e0a\u7684 \\(n\\) \u53f7\u76d8\u79fb\u81f3 \\(c\\) \u6746\uff0c\u603b\u79fb\u52a8\u6b21\u6570\u4e3a \\(1\\) \uff1b \u5c06 \\(b\\) \u6746\u4e0a\u7684 \\(1\\sim n-1\\) \u53f7\u76d8\u79fb\u81f3 \\(c\\) \u6746\uff0c\u603b\u79fb\u52a8\u6b21\u6570\u4e3a \\(f[n-1]\\) \u3002 \\[ f[n]=2\u00b7f[n-1]+1,n\u22651 \\] \u521d\u59cb\u6761\u4ef6 \\(f[1]=1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[2\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) Code int f []; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = 2 * f [ i - 1 ] + 1 ; \u9aa8\u724c\u95ee\u9898 $ Question \u7528\u82e5\u5e72\u4e2a \\(1\u00d72\\) \u7684\u9aa8\u724c\u94fa\u6ee1 \\(2\u00d7n\\) \u7684\u65b9\u683c\u3002\u5982\u56fe\u4e3a \\(n=3\\) \u65f6\u7684\u6240\u6709\u94fa\u6cd5\uff1a \u6c42\u4efb\u610f\u7684 \\(n\\) \u5bf9\u5e94\u7684\u94fa\u6cd5\u603b\u6570\u3002 \\(f[n]\\) \u8868\u793a \\(2\u00d7n\\) \u65b9\u683c\u7684\u94fa\u6cd5\u603b\u6570\u3002\u5bf9\u4e8e\u4e0d\u597d\u5206\u6790\u7684\u95ee\u9898\uff0c\u5148\u7528\u679a\u4e3e\u6cd5\u627e\u51fa\u89c4\u5f8b\uff1a \u82e5 \\(n=1\\) \uff0c\u663e\u7136\u53ea\u6709\u4e00\u79cd\u94fa\u6cd5\uff0c \\(f[1]=1\\) \uff1b \u82e5 \\(n=2\\) \uff0c\u53ef\u4ee5\u5168\u90e8\u7ad6\u653e\uff0c\u6216\u5168\u90e8\u6a2a\u653e\uff0c \\(f[2]=2\\) \u82e5 \\(n=3\\) \uff0c\u53ef\u4ee5\u5168\u90e8\u7ad6\u653e\uff0c\u6216\u4e00\u4e2a\u7ad6\u653e\uff0c\u4e24\u4e2a\u6a2a\u653e\uff0c\u5171 \\(3\\) \u79cd\u653e\u6cd5\u3002 \\(f[3]=3\\) \u3002 \u603b\u7ed3\u51fa\u4e00\u822c\u89c4\u5f8b\uff1a \u82e5\u7b2c\u4e00\u4e2a\u9aa8\u724c\u7ad6\u653e\u5728\u5de6\u8fb9\uff0c\u5219\u5269\u4e0b \\(2\u00d7(n-1)\\) \u4e2a\u65b9\u683c\u672a\u94fa\u6ee1\uff0c\u94fa\u6cd5\u6570\u4e3a \\(f[n-1]\\) \uff1b \u82e5\u7b2c\u4e00\u4e2a\u9aa8\u724c\u6a2a\u653e\u5728\u5de6\u4e0a\u89d2\uff0c\u4e3a\u4e86\u4e0d\u7559\u7a7a\uff0c\u7b2c\u4e8c\u4e2a\u9aa8\u724c\u5fc5\u987b\u6a2a\u653e\u5728\u5b83\u7684\u6b63\u4e0b\u65b9\u3002\u5269\u4e0b \\(2\u00d7(n-2)\\) \u4e2a\u65b9\u683c\u672a\u94fa\u6ee1\uff0c\u94fa\u6cd5\u6570\u4e3a \\(f[n-2]\\) \u3002 \\[ f[n]=f[n-1]+f[n-2],n\u22653 \\] \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6070\u597d\u548c \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u76f8\u540c\u3002 Info \u4e0d\u540c\u95ee\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u53ef\u80fd\u76f8\u540c\u3002 \u5e73\u9762\u5206\u5272 $ Question \u5e73\u9762\u4e0a\u6709 \\(n\\) \u6761\u5c01\u95ed\u66f2\u7ebf\uff0c\u6bcf \\(2\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u6070\u597d\u76f8\u4ea4\u4e8e \\(2\\) \u70b9\uff0c\u4e14\u6bcf \\(3\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u4e0d\u4ea4\u4e8e\u540c\u4e00\u70b9\u3002\u6c42 \\(n\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u628a\u5e73\u9762\u5206\u5272\u6210\u7684\u533a\u57df\u4e2a\u6570\u3002 \\(a[n]\\) \u8868\u793a \\(n\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u5206\u5272\u6210\u7684\u533a\u57df\u4e2a\u6570\uff0c\u7531\u4e0a\u56fe\u53ef\u5f97\uff1a \\(a[2]-a[1]=2\\) \uff0c \\(a[3]-a[2]=4\\) \uff0c \\(a[4]-a[3]=6\\) \uff0c\u603b\u7ed3\u51fa\u89c4\u5f8b: \\(a[n]-a[n-1]=2(n-1)\\) \u3002\u53d8\u5f62\u5f97\uff1a \\[ a[n]=a[n-1]+2(n-1),n\u22651 \\] \u6b63\u786e\u6027\u8bc1\u660e\uff1a \u65b0\u589e\u4e00\u6761\u66f2\u7ebf\u65f6\uff1a \\(\u2235\\) \u6bcf\u4e0e\u5e73\u9762\u4e0a\u4e00\u6761\u5df2\u6709\u66f2\u7ebf\u76f8\u4ea4\u4e00\u6b21\uff0c\u5c31\u4f1a\u589e\u52a0\u4e00\u4e2a\u533a\u57df\uff0c \\(\u2234\\) \u65b0\u589e\u533a\u57df\u6570 \\(=\\) \u65b0\u589e\u4ea4\u70b9\u6570\u3002 \\(\u2235\\) \u65b0\u589e\u7684\u7b2c \\(n\\) \u6761\u66f2\u7ebf\u4e0e\u5df2\u6709\u7684 \\(n-1\\) \u6761\u66f2\u7ebf\u5404\u6709 \\(2\\) \u4e2a\u4ea4\u70b9\uff0c \\(\u2234\\) \u65b0\u589e\u533a\u57df\u6570 \\(=\\) \u65b0\u589e\u4ea4\u70b9\u6570 \\(=2\u00b7(n-1)\\) \u3002 \\(\u2234\\) \u73b0\u6709\u533a\u57df\u4e2a\u6570 \\(a[n]=\\) \u539f\u6709\u533a\u57df\u4e2a\u6570 \\(+\\) \u65b0\u589e\u533a\u57df\u4e2a\u6570 \\(=a[n-1]+2(n-1)\\) \u3002 \u521d\u59cb\u6761\u4ef6 \\(a[1]=2\\) \u8ba1\u7b97\u987a\u5e8f \\(a[2\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(a[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) Code int a []; a [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) a [ i ] = a [ i - 1 ] + 2 * ( n - 1 ); \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08LIS\uff09 $ Question \u6570\u5217 \\(A\\) \u7684\u957f\u5ea6\u4e3a \\(n\\) \uff0c\u6c42 \\(A\\) \u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 1 \u7684\u957f\u5ea6\u3002 \u6837\u4f8b\uff1a \\(A=\\{2,3,6,4,5,1\\}\\) \uff0c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \\(=\\{2,3,4,5\\}\\) \uff0c\u957f\u5ea6\u4e3a \\(4\\) \u3002 \\(f[i]\\) \u8868\u793a\u4ee5 \\(A_i\\) \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u6c42 \\(f[i]\\) \u65f6\uff0c\u5b50\u95ee\u9898 \\(f[1\\sim i-1]\\) \u5df2\u6c42\u5f97\u6700\u4f18\u89e3\uff0c\u6545\u679a\u4e3e \\(j=1\\cdots i-1\\) \u5e76\u505a\u4ee5\u4e0b\u5224\u65ad\uff1a \u82e5 \\(A_j<A_i\\) \uff0c\u5219 \\(A_i\\) \u53ef\u4ee5\u63a5\u5728 \\(A_j\\) \u4e4b\u540e\uff0c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3a \\(f[j]+1\\) \uff1b \u82e5 \\(A_j\u2265A_i\\) \uff0c\u5219 \\(A_i\\) \u4e0d\u53ef\u4ee5\u63a5\u5728 \\(A_j\\) \u4e4b\u540e\uff0c\u8df3\u8fc7\u3002 \\[ f[i]=\\max_{j<i, \\ A_j<A_i}(f[j])+1 \\] \u521d\u59cb\u6761\u4ef6 \\(f[1\\cdots n]=1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(f[1\\cdots n]\\) \u7684\u6700\u5927\u503c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) Code for ( int i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ j ] < a [ i ]) f [ i ] = max ( f [ i ], f [ j ] + 1 ); } \u5355\u8c03\u6808\u4f18\u5316 $ \u8fd0\u7528 \u5355\u8c03\u6808 \u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f9d\u6b21\u626b\u63cf\u6570\u7ec4\u5143\u7d20\uff1a \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u6808\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5176\u63d2\u5165\u5355\u8c03\u6808\uff1b \u5426\u5219\u4e8c\u5206\u67e5\u627e\u6808\u4e2d\u7b2c\u4e00\u4e2a\u6bd4\u5f53\u524d\u5143\u7d20\u5927\u7684\u5143\u7d20\uff0c\u5e76\u66ff\u6362\u3002 \u7531\u4e8e STL Stack \u4e0d\u652f\u6301\u8bbf\u95ee\u6808\u5185\u5143\u7d20\uff0c\u6545\u4f7f\u7528 STL Vector \u6a21\u62df\u6808\u3002\u6700\u7ec8\u7684\u7b54\u6848\u662f\u6808\u7684\u957f\u5ea6\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\log{n})\\) \u3002 Code vector < int > s = ( 1 , a [ 1 ]); for ( int i = 2 ; i <= n ; i ++ ) { if ( a [ i ] > s . back ()) s . push_back ( a [ i ]); else s [ * lower_bound ( s . begin (), s . end (), a [ i ])] = a [ i ]; } \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LCS\uff09 $ Question \u7ed9\u5b9a\u957f\u5ea6\u5206\u522b\u4e3a \\(n\\) \u548c \\(m\\) \u7684\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(A\\) \u3001 \\(B\\) \uff0c\u6c42 \\(A\\) \u548c \\(B\\) \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 2 \u957f\u5ea6\u3002 \u6837\u4f8b\uff1a \\(A=\\) freeze \uff0c \\(B=\\) refeze \uff0c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \\(=\\) reeze \uff0c\u957f\u5ea6\u4e3a \\(5\\) \u3002 \\(f[i,j]\\) \u8868\u793a \\(A[1\\cdots i]\\) \u548c \\(B[1\\cdots j]\\) \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u957f\u5ea6\u3002 \u82e5 \\(A_i\u2260B_j\\) \uff0c\u5219\u7ee7\u627f\u6700\u4f18\u5b50\u72b6\u6001\u3002\u5b50\u95ee\u9898 \\(f[i-1,j]\\) \u548c \\(f[i,j-1]\\) \u5df2\u6c42\u5f97\u6700\u4f18\u89e3\uff0c\u6545\u4ee4 \\(f[i,j]=\\max(f[i-1,j],f[i,j-1])\\) \uff1b \u82e5 \\(A_i=B_j\\) \uff0c\u5219 \\(A_i\\) \uff08\u6216 \\(B_j\\) \uff09\u53ef\u4ee5\u63a5\u5728 \\(A[1\\cdots i-1]\\) \u548c \\(B[1\\cdots j-1]\\) \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e4b\u540e\uff0c\u751f\u6210\u7684\u65b0\u5e8f\u5217\u957f\u5ea6\u4e3a \\(f[i-1,j-1]+1\\) \u3002 \\[ f[i,j]=\\max\\left\\{\\begin{aligned} &f[i-1,j]\\\\ &f[i,j-1]\\\\ &f[i-1,j-1]+1,A_i=B_j \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \u65e0 \u8ba1\u7b97\u987a\u5e8f \\(f[i=1\\rightarrow n,j=1\\rightarrow m]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n,m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nm)\\) Code for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) { f [ i ][ j ] = max ( f [ i - 1 ][ j ], f [ i ][ j - 1 ]); if ( a [ i ] == b [ j ]) f [ i ][ j ] = max ( f [ i ][ j ], f [ i - 1 ][ j - 1 ] + 1 ); } \u6570\u5b57\u91d1\u5b57\u5854 $ Question \u4e09\u89d2\u77e9\u9635 \\(A\\) \u6709 \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u6709 \\(i\\) \u5217\u3002\u4ece\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u51fa\u53d1\uff0c\u6bcf\u6b21\u53ef\u4ee5\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u5b57\u3002\u5230\u8fbe\u5e95\u90e8\u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u6700\u5927\u4e3a\u591a\u5c11\uff1f \u6837\u4f8b\uff1a \u6700\u4f18\u8def\u5f84\u4e3a \\(13\u21928\u219226\u219215\\) \uff0c\u6700\u5927\u503c\u4e3a \\(62\\) \u3002 \\((i,j)\\) \u8868\u793a\u77e9\u9635\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6570\u5b57\u3002 \\(f[i,j]\\) \u8868\u793a\u8d70\u5230 \\((i,j)\\) \u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 \u91c7\u7528\u9006\u63a8\u6cd5\uff1a\u8981\u60f3\u8d70\u5230 \\((i,j)\\) \uff0c\u4e0a\u4e00\u6b65\u53ea\u80fd\u5728 \\((i-1,j-1)\\) \u6216 \\((i-1,j)\\) \uff1a \u82e5\u4e0a\u4e00\u6b65\u5728 \\((i-1,j-1)\\) \uff0c\u5219 \\(f[i,j]=(i,j)+f[i-1,j-1]\\) \uff1b \u82e5\u4e0a\u4e00\u6b65 \\((i-1,j)\\) \uff0c\u5219 \\(f[i,j]=(i,j)+f[i-1,j]\\) \u3002 \\[ f[i,j]=(i,j)+\\max\\left\\{\\begin{aligned} &f[i-1,j-1]\\\\ &f[i-1,j] \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \\(f[1,1]=(1,1)\\) \u8ba1\u7b97\u987a\u5e8f \\(f[i=2\\rightarrow n,j=1\\rightarrow i]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n,1\\cdots n]\\) \u7684\u6700\u5927\u503c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) Warning \u5f53 \\(j=1\\) \u6216 \\(j=i\\) \u65f6\uff0c \\(f[i-1,j-1]\\) \u548c \\(f[i-1,j]\\) \u4f1a\u8d8a\u754c\u3002\u8bfb\u5165\u6570\u636e\u524d\u8981\u5c06 \\(f\\) \u6570\u7ec4\u521d\u59cb\u5316\u4e3a \\(-\u221e\\) \uff0c\u4ece\u800c\u4f7f\u8d8a\u754c\u7684\u5143\u7d20\u5728\u53d6\u6700\u5927\u503c\u65f6\u88ab\u81ea\u52a8\u6dd8\u6c70\u3002 Code memset ( f , 0x80 , sizeof f ); f [ 1 ][ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) for ( int j = 1 ; j <= i ; j ++ ) { cin >> cnt ; f [ i ][ j ] = cnt + max ( f [ i - 1 ][ j - 1 ], f [ i - 1 ][ j ]); } for ( int i = 1 ; i <= n ; i ++ ) ans = max ( ans , f [ n ][ i ]); \u6570\u5b57\u77e9\u9635 $ Question \u6570\u5b57\u77e9\u9635 \\(A\\) \u6709 \\(n\\) \u884c \\(m\\) \u5217\u3002\u4ece\u5de6\u4e0a\u89d2\u7684\u5143\u7d20\u51fa\u53d1\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u5de6\u8d70\u3002\u5230\u8fbe\u53f3\u4e0b\u89d2\u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u6700\u5927\u4e3a\u591a\u5c11\uff1f \u6837\u4f8b\uff1a \u6700\u4f18\u8def\u5f84\u4e3a \\(17\u21921\u219220\u219212\u21929\u21922\\) \uff0c\u6700\u5927\u503c\u4e3a \\(61\\) \u3002 \\((i,j)\\) \u8868\u793a\u77e9\u9635\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6570\u5b57\u3002 \\(f[i,j]\\) \u8868\u793a\u8d70\u5230 \\((i,j)\\) \u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 \u7531\u4e8e\u53ea\u80fd\u5411\u5de6\u8d70\u6216\u5411\u4e0b\u8d70\uff0c\u8981\u8d70\u5230 \\((i,j)\\) \uff0c\u4e0a\u4e00\u6b65\u53ea\u80fd\u5728 \\((i-1,j)\\) \u6216 \\((i,j-1)\\) \uff1a \\[ f[i,j]=(i,j)+\\max\\left\\{\\begin{aligned} &f[i-1,j]\\\\ &f[i,j-1] \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \\(f[1,1]=(1,1)\\) \u8ba1\u7b97\u987a\u5e8f \\(f[i=1\\rightarrow n,j=1\\rightarrow m]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n,m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nm)\\) Warning \u5f53 \\(i=1\\) \u6216 \\(j=1\\) \u65f6\uff0c \\(f[i-1,j]\\) \u548c \\(f[i,j-1]\\) \u4f1a\u8d8a\u754c\u3002\u540c\u6837\u9700\u8981\u5c06 \\(f\\) \u6570\u7ec4\u521d\u59cb\u5316\u4e3a \\(-\u221e\\) \u3002 Code memset ( f , 0x80 , sizeof f ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) { cin >> cnt ; if ( i == 1 && j == 1 ) f [ i ][ j ] = cnt ; else f [ i ][ j ] = cnt + max ( f [ i -1 ][ j ], f [ i ][ j - 1 ]); } \u524d\u7f00\u548c $ \u524d\u7f00\u548c\u662f\u4e00\u79cd\u91cd\u8981\u7684\u9884\u5904\u7406\u6280\u5de7\uff0c\u80fd\u5927\u5e45\u964d\u4f4e\u300c\u67e5\u8be2\u533a\u95f4\u5143\u7d20\u548c\u300d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e00\u7ef4\u524d\u7f00\u548c $ \u6570\u5217 \\(A\\) \u6709 \\(n\\) \u4e2a\u5143\u7d20\uff0c \\(f[i]\\) \u8868\u793a \\(A_1+A_2+\\cdots+A_i\\) \uff0c\u5219\u6709\uff1a \\[ f[i]=f[i-1]+A_i \\] \u521d\u59cb\u6761\u4ef6 \\(f[0]=0\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1]\\rightarrow f[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) \u524d\u7f00\u548c\u53ef\u4ee5\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u6570\u5217\u7684\u5b50\u6bb5\u548c\u3002 \\(g[i,j]\\) \u8868\u793a\u4ece \\(A_i\\) \u5230 \\(A_j\\) \u7684\u6240\u6709\u5143\u7d20\u548c\uff0c\u5219\u6709\uff1a \\[ g[i,j]=f[j]-f[i-1] \\] \u5355\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 Code int g ( int i , int j ) { return f [ j ] - f [ i - 1 ]; } int main () { for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] + a [ i ]; while ( cin >> l >> r ) cout << g ( l , r ) << endl ; } \u4e8c\u7ef4\u524d\u7f00\u548c $ \u77e9\u9635 \\(A\\) \u6709 \\(n\\) \u884c \\(m\\) \u5217\u3002 \\(f[i,j]\\) \u8868\u793a\u4ee5 \\((1,1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c\u4ee5 \\((i,j)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u7684\u5143\u7d20\u548c\uff0c\u5219\uff1a \\[ f[i,j]=f[i-1,j]+f[i,j-1]-f[i-1,j-1]+(i,j) \\] \u521d\u59cb\u6761\u4ef6 \\(f[0,0]=0\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1\\rightarrow n,1\\rightarrow m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nm)\\) \u4e8c\u7ef4\u524d\u7f00\u548c\u53ef\u4ee5\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u5b50\u77e9\u9635\u5143\u7d20\u548c\u3002 \\(g[x_1,y_1,x_2,y_2]\\) \u8868\u793a\u4ee5 \\((x_1,y_1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c \\((x_2,y_2)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u5143\u7d20\u548c\uff0c\u5219\uff1a \\[ g[x_1,y_1,x_2,y_2]=f[x_2,y_2]-f[x_1-1,y_2]-f[x_2,y_1-1]+f[x_1-1,y_1-1] \\] \u5355\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 Code int g ( int x1 , int y1 , int x2 , int y2 ) { return f [ x2 ][ y2 ] - f [ x1 - 1 ][ y2 ] - f [ x2 ][ y1 - 1 ] + f [ x1 - 1 ][ y1 - 1 ]; } int main () { f [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) f [ i ][ j ] = f [ i - 1 ][ j ] + f [ i ][ j - 1 ] + a [ i ][ j ]; while ( cin >> x1 >> y1 >> x2 >> y2 ) cout << g ( x1 , y1 , x2 , y2 ) << endl ; } \u5dee\u5206 $ \u5dee\u5206\u662f \u524d\u7f00\u548c \u7684\u9006\u8fd0\u7b97\uff0c\u80fd\u5927\u5e45\u964d\u4f4e\u300c\u533a\u95f4\u6279\u91cf\u64cd\u4f5c\u300d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6570\u5217 \\(A\\) \u6709 \\(n\\) \u4e2a\u5143\u7d20\u3002 \\(f[i]\\) \u4ee3\u8868\u6570\u5217 \\(A\\) \u7b2c \\(i\\) \u9879\u548c\u524d\u4e00\u9879\u7684\u5dee\uff0c\u5373\uff1a \\[ f[i]=A_i-A_{i-1} \\] \u521d\u59cb\u6761\u4ef6 \\(f[1]=A_1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1\\rightarrow n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) \\(f\\) \u88ab\u79f0\u4f5c\u300c\u5dee\u5206\u6570\u5217\u300d\u3002\u6570\u5217 \\(A=\\{5,2,3,1,6,4\\}\\) \u7684\u5dee\u5206\u6570\u5217\u4e3a \\(f=\\{5,-3,1,-2,5,-2\\}\\) \u3002 \u5c06 \\(A[l\\cdots r]\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e0a \\(x\\) \u65f6\uff0c\u5dee\u5206\u6570\u5217\u4e2d \\(f[l]\\) \u589e\u52a0\u4e86 \\(x\\) \uff0c \\(f[r+1]\\) \u51cf\u5c11\u4e86 \\(x\\) \uff0c\u5176\u4f59\u5143\u7d20\u4e0d\u53d8\u3002\u56e0\u6b64\u6bcf\u6b21\u53ea\u4fee\u6539 \\(f[l]\\) \u548c \\(f[r+1]\\) \u7684\u503c\uff0c\u6700\u540e\u901a\u8fc7 \\(f\\) \u6570\u5217\u8fd8\u539f \\(A\\) \u4e2d\u7684\u5143\u7d20\uff0c\u5373\uff1a \\[ A_i=A_{i-1}+f[i] \\] \u5355\u6b21\u6279\u91cf\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 Code void add ( int l , int r , int x ) { // \u5c06\u533a\u95f4 [l, r] \u6279\u91cf\u52a0 x f [ l ] += x , f [ r + 1 ] -= x ; } void query () { // \u8fd8\u539f\u6570\u7ec4\u5143\u7d20 for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = a [ i - 1 ] + f [ i ]; } int main () { for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = a [ i ] - a [ i - 1 ]; int l , r , x ; while ( cin >> l >> r >> x ) { add ( l , r , x ); } query (); } th, td { font-size: 14px; } \\(A\\) \u7684\u4efb\u610f\u5b50\u5e8f\u5217 \\(B\\) \u53ef\u4ee5\u8868\u793a\u4e3a \\(B=\\{A_{k_1} \\ ,A_{k_2} \\ ,\\cdots,A_{k_p} \\ \\}\\) \uff0c\u5176\u4e2d \\(k_1<k_2<\\cdots<k_p\\) \u3002 \u82e5 \\(A\\) \u7684\u5b50\u5e8f\u5217 \\(B\\) \u6ee1\u8db3 \\(A_{k_1}<A_{k_2}<\\cdots<A_{k_p}\\) \uff0c\u5219 \\(B\\) \u662f \\(A\\) \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u3002 \u21a9 \u82e5\u4e00\u4e2a\u5e8f\u5217\u65e2\u662f \\(A\\) \u7684\u5b50\u5e8f\u5217\uff0c\u53c8\u662f \\(B\\) \u7684\u5b50\u5e8f\u5217\uff0c\u5219\u5b83\u662f \\(A\\) \u548c \\(B\\) \u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u21a9","title":"\u57fa\u7840 DP"},{"location":"posts/basis/dp/basis/#fibonacci","text":"Question \u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\u5f62\u5982 \\(1,1,2,3,5,8,\\cdots\\) \u7684\u6570\u5217\u3002\u6c42\u6570\u5217\u7684\u7b2c \\(n\\) \u9879\u3002 \\(f[n]\\) \u8868\u793a\u6570\u5217\u7684\u7b2c \\(n\\) \u9879\uff0c\u5219\uff1a \\[ f[n]=f[n-1]+f[n-2],n\u22653 \\] \u521d\u59cb\u6761\u4ef6 \\(f[1]=f[2]=1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[3\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) Code int f []; f [ 1 ] = f [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ];","title":"\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217"},{"location":"posts/basis/dp/basis/#hanoi","text":"Question \u6c49\u8bfa\u5854\u7531 \\(n\\) \u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u5706\u76d8\u548c\u4e09\u6839\u6746\u5b50 \\(a,b,c\\) \u7ec4\u6210\u3002\u521d\u59cb\u65f6\uff0c \\(n\\) \u4e2a\u5706\u76d8\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u5957\u5728 \\(a\\) \u6746\u4e0a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u73b0\u5728\u8981\u6c42\u628a \\(a\\) \u6746\u4e0a\u7684 \\(n\\) \u4e2a\u5706\u76d8\u6309\u4ee5\u4e0b\u89c4\u5219\u79fb\u5230 \\(c\\) \u6746\u4e0a\uff1a \u4e00\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u5706\u76d8\uff1b \u5706\u76d8\u53ea\u80fd\u5b58\u653e\u5728\u67f1\u5b50\u4e0a\uff1b \u5728\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5927\u5706\u76d8\u4e0d\u80fd\u538b\u5728\u5c0f\u5706\u76d8\u4e0a\u3002 \u6c42\u5706\u76d8\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002 \\(f[n]\\) \u8868\u793a\u5c06 \\(n\\) \u4e2a\u5706\u76d8\u4ece\u4e00\u4e2a\u6746\u6574\u4f53\u79fb\u5230\u53e6\u4e00\u4e2a\u6746\uff0c\u9700\u8981\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002 \u5c06 \\(n\\) \u4e2a\u76d8\u5b50\u4ece\u5c0f\u5230\u5927\u7f16\u53f7\u4e3a \\(1\\sim n\\) \u3002\u5c06\u5b83\u4eec\u4ece \\(a\\) \u6746\u79fb\u5230 \\(c\\) \u6746\uff0c\u9700\u8981\u505a\u4ee5\u4e0b \\(3\\) \u6b65\uff1a \u5c06 \\(a\\) \u6746\u4e0a\u7684 \\(1\\sim n-1\\) \u53f7\u76d8\u79fb\u81f3 \\(b\\) \u6746\uff0c\u603b\u79fb\u52a8\u6b21\u6570\u4e3a \\(f[n-1]\\) \uff1b \u5c06 \\(a\\) \u6746\u4e0a\u7684 \\(n\\) \u53f7\u76d8\u79fb\u81f3 \\(c\\) \u6746\uff0c\u603b\u79fb\u52a8\u6b21\u6570\u4e3a \\(1\\) \uff1b \u5c06 \\(b\\) \u6746\u4e0a\u7684 \\(1\\sim n-1\\) \u53f7\u76d8\u79fb\u81f3 \\(c\\) \u6746\uff0c\u603b\u79fb\u52a8\u6b21\u6570\u4e3a \\(f[n-1]\\) \u3002 \\[ f[n]=2\u00b7f[n-1]+1,n\u22651 \\] \u521d\u59cb\u6761\u4ef6 \\(f[1]=1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[2\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) Code int f []; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = 2 * f [ i - 1 ] + 1 ;","title":"\u6c49\u8bfa\u5854\uff08Hanoi\uff09\u95ee\u9898"},{"location":"posts/basis/dp/basis/#_1","text":"Question \u7528\u82e5\u5e72\u4e2a \\(1\u00d72\\) \u7684\u9aa8\u724c\u94fa\u6ee1 \\(2\u00d7n\\) \u7684\u65b9\u683c\u3002\u5982\u56fe\u4e3a \\(n=3\\) \u65f6\u7684\u6240\u6709\u94fa\u6cd5\uff1a \u6c42\u4efb\u610f\u7684 \\(n\\) \u5bf9\u5e94\u7684\u94fa\u6cd5\u603b\u6570\u3002 \\(f[n]\\) \u8868\u793a \\(2\u00d7n\\) \u65b9\u683c\u7684\u94fa\u6cd5\u603b\u6570\u3002\u5bf9\u4e8e\u4e0d\u597d\u5206\u6790\u7684\u95ee\u9898\uff0c\u5148\u7528\u679a\u4e3e\u6cd5\u627e\u51fa\u89c4\u5f8b\uff1a \u82e5 \\(n=1\\) \uff0c\u663e\u7136\u53ea\u6709\u4e00\u79cd\u94fa\u6cd5\uff0c \\(f[1]=1\\) \uff1b \u82e5 \\(n=2\\) \uff0c\u53ef\u4ee5\u5168\u90e8\u7ad6\u653e\uff0c\u6216\u5168\u90e8\u6a2a\u653e\uff0c \\(f[2]=2\\) \u82e5 \\(n=3\\) \uff0c\u53ef\u4ee5\u5168\u90e8\u7ad6\u653e\uff0c\u6216\u4e00\u4e2a\u7ad6\u653e\uff0c\u4e24\u4e2a\u6a2a\u653e\uff0c\u5171 \\(3\\) \u79cd\u653e\u6cd5\u3002 \\(f[3]=3\\) \u3002 \u603b\u7ed3\u51fa\u4e00\u822c\u89c4\u5f8b\uff1a \u82e5\u7b2c\u4e00\u4e2a\u9aa8\u724c\u7ad6\u653e\u5728\u5de6\u8fb9\uff0c\u5219\u5269\u4e0b \\(2\u00d7(n-1)\\) \u4e2a\u65b9\u683c\u672a\u94fa\u6ee1\uff0c\u94fa\u6cd5\u6570\u4e3a \\(f[n-1]\\) \uff1b \u82e5\u7b2c\u4e00\u4e2a\u9aa8\u724c\u6a2a\u653e\u5728\u5de6\u4e0a\u89d2\uff0c\u4e3a\u4e86\u4e0d\u7559\u7a7a\uff0c\u7b2c\u4e8c\u4e2a\u9aa8\u724c\u5fc5\u987b\u6a2a\u653e\u5728\u5b83\u7684\u6b63\u4e0b\u65b9\u3002\u5269\u4e0b \\(2\u00d7(n-2)\\) \u4e2a\u65b9\u683c\u672a\u94fa\u6ee1\uff0c\u94fa\u6cd5\u6570\u4e3a \\(f[n-2]\\) \u3002 \\[ f[n]=f[n-1]+f[n-2],n\u22653 \\] \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6070\u597d\u548c \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u76f8\u540c\u3002 Info \u4e0d\u540c\u95ee\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u53ef\u80fd\u76f8\u540c\u3002","title":"\u9aa8\u724c\u95ee\u9898"},{"location":"posts/basis/dp/basis/#_2","text":"Question \u5e73\u9762\u4e0a\u6709 \\(n\\) \u6761\u5c01\u95ed\u66f2\u7ebf\uff0c\u6bcf \\(2\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u6070\u597d\u76f8\u4ea4\u4e8e \\(2\\) \u70b9\uff0c\u4e14\u6bcf \\(3\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u4e0d\u4ea4\u4e8e\u540c\u4e00\u70b9\u3002\u6c42 \\(n\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u628a\u5e73\u9762\u5206\u5272\u6210\u7684\u533a\u57df\u4e2a\u6570\u3002 \\(a[n]\\) \u8868\u793a \\(n\\) \u6761\u5c01\u95ed\u66f2\u7ebf\u5206\u5272\u6210\u7684\u533a\u57df\u4e2a\u6570\uff0c\u7531\u4e0a\u56fe\u53ef\u5f97\uff1a \\(a[2]-a[1]=2\\) \uff0c \\(a[3]-a[2]=4\\) \uff0c \\(a[4]-a[3]=6\\) \uff0c\u603b\u7ed3\u51fa\u89c4\u5f8b: \\(a[n]-a[n-1]=2(n-1)\\) \u3002\u53d8\u5f62\u5f97\uff1a \\[ a[n]=a[n-1]+2(n-1),n\u22651 \\] \u6b63\u786e\u6027\u8bc1\u660e\uff1a \u65b0\u589e\u4e00\u6761\u66f2\u7ebf\u65f6\uff1a \\(\u2235\\) \u6bcf\u4e0e\u5e73\u9762\u4e0a\u4e00\u6761\u5df2\u6709\u66f2\u7ebf\u76f8\u4ea4\u4e00\u6b21\uff0c\u5c31\u4f1a\u589e\u52a0\u4e00\u4e2a\u533a\u57df\uff0c \\(\u2234\\) \u65b0\u589e\u533a\u57df\u6570 \\(=\\) \u65b0\u589e\u4ea4\u70b9\u6570\u3002 \\(\u2235\\) \u65b0\u589e\u7684\u7b2c \\(n\\) \u6761\u66f2\u7ebf\u4e0e\u5df2\u6709\u7684 \\(n-1\\) \u6761\u66f2\u7ebf\u5404\u6709 \\(2\\) \u4e2a\u4ea4\u70b9\uff0c \\(\u2234\\) \u65b0\u589e\u533a\u57df\u6570 \\(=\\) \u65b0\u589e\u4ea4\u70b9\u6570 \\(=2\u00b7(n-1)\\) \u3002 \\(\u2234\\) \u73b0\u6709\u533a\u57df\u4e2a\u6570 \\(a[n]=\\) \u539f\u6709\u533a\u57df\u4e2a\u6570 \\(+\\) \u65b0\u589e\u533a\u57df\u4e2a\u6570 \\(=a[n-1]+2(n-1)\\) \u3002 \u521d\u59cb\u6761\u4ef6 \\(a[1]=2\\) \u8ba1\u7b97\u987a\u5e8f \\(a[2\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(a[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) Code int a []; a [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) a [ i ] = a [ i - 1 ] + 2 * ( n - 1 );","title":"\u5e73\u9762\u5206\u5272"},{"location":"posts/basis/dp/basis/#lis","text":"Question \u6570\u5217 \\(A\\) \u7684\u957f\u5ea6\u4e3a \\(n\\) \uff0c\u6c42 \\(A\\) \u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 1 \u7684\u957f\u5ea6\u3002 \u6837\u4f8b\uff1a \\(A=\\{2,3,6,4,5,1\\}\\) \uff0c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \\(=\\{2,3,4,5\\}\\) \uff0c\u957f\u5ea6\u4e3a \\(4\\) \u3002 \\(f[i]\\) \u8868\u793a\u4ee5 \\(A_i\\) \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u6c42 \\(f[i]\\) \u65f6\uff0c\u5b50\u95ee\u9898 \\(f[1\\sim i-1]\\) \u5df2\u6c42\u5f97\u6700\u4f18\u89e3\uff0c\u6545\u679a\u4e3e \\(j=1\\cdots i-1\\) \u5e76\u505a\u4ee5\u4e0b\u5224\u65ad\uff1a \u82e5 \\(A_j<A_i\\) \uff0c\u5219 \\(A_i\\) \u53ef\u4ee5\u63a5\u5728 \\(A_j\\) \u4e4b\u540e\uff0c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3a \\(f[j]+1\\) \uff1b \u82e5 \\(A_j\u2265A_i\\) \uff0c\u5219 \\(A_i\\) \u4e0d\u53ef\u4ee5\u63a5\u5728 \\(A_j\\) \u4e4b\u540e\uff0c\u8df3\u8fc7\u3002 \\[ f[i]=\\max_{j<i, \\ A_j<A_i}(f[j])+1 \\] \u521d\u59cb\u6761\u4ef6 \\(f[1\\cdots n]=1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1\\rightarrow n]\\) \u6700\u7ec8\u7b54\u6848 \\(f[1\\cdots n]\\) \u7684\u6700\u5927\u503c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) Code for ( int i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ j ] < a [ i ]) f [ i ] = max ( f [ i ], f [ j ] + 1 ); }","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08LIS\uff09"},{"location":"posts/basis/dp/basis/#_3","text":"\u8fd0\u7528 \u5355\u8c03\u6808 \u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f9d\u6b21\u626b\u63cf\u6570\u7ec4\u5143\u7d20\uff1a \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u6808\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5176\u63d2\u5165\u5355\u8c03\u6808\uff1b \u5426\u5219\u4e8c\u5206\u67e5\u627e\u6808\u4e2d\u7b2c\u4e00\u4e2a\u6bd4\u5f53\u524d\u5143\u7d20\u5927\u7684\u5143\u7d20\uff0c\u5e76\u66ff\u6362\u3002 \u7531\u4e8e STL Stack \u4e0d\u652f\u6301\u8bbf\u95ee\u6808\u5185\u5143\u7d20\uff0c\u6545\u4f7f\u7528 STL Vector \u6a21\u62df\u6808\u3002\u6700\u7ec8\u7684\u7b54\u6848\u662f\u6808\u7684\u957f\u5ea6\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\log{n})\\) \u3002 Code vector < int > s = ( 1 , a [ 1 ]); for ( int i = 2 ; i <= n ; i ++ ) { if ( a [ i ] > s . back ()) s . push_back ( a [ i ]); else s [ * lower_bound ( s . begin (), s . end (), a [ i ])] = a [ i ]; }","title":"\u5355\u8c03\u6808\u4f18\u5316"},{"location":"posts/basis/dp/basis/#lcs","text":"Question \u7ed9\u5b9a\u957f\u5ea6\u5206\u522b\u4e3a \\(n\\) \u548c \\(m\\) \u7684\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(A\\) \u3001 \\(B\\) \uff0c\u6c42 \\(A\\) \u548c \\(B\\) \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 2 \u957f\u5ea6\u3002 \u6837\u4f8b\uff1a \\(A=\\) freeze \uff0c \\(B=\\) refeze \uff0c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \\(=\\) reeze \uff0c\u957f\u5ea6\u4e3a \\(5\\) \u3002 \\(f[i,j]\\) \u8868\u793a \\(A[1\\cdots i]\\) \u548c \\(B[1\\cdots j]\\) \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u957f\u5ea6\u3002 \u82e5 \\(A_i\u2260B_j\\) \uff0c\u5219\u7ee7\u627f\u6700\u4f18\u5b50\u72b6\u6001\u3002\u5b50\u95ee\u9898 \\(f[i-1,j]\\) \u548c \\(f[i,j-1]\\) \u5df2\u6c42\u5f97\u6700\u4f18\u89e3\uff0c\u6545\u4ee4 \\(f[i,j]=\\max(f[i-1,j],f[i,j-1])\\) \uff1b \u82e5 \\(A_i=B_j\\) \uff0c\u5219 \\(A_i\\) \uff08\u6216 \\(B_j\\) \uff09\u53ef\u4ee5\u63a5\u5728 \\(A[1\\cdots i-1]\\) \u548c \\(B[1\\cdots j-1]\\) \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e4b\u540e\uff0c\u751f\u6210\u7684\u65b0\u5e8f\u5217\u957f\u5ea6\u4e3a \\(f[i-1,j-1]+1\\) \u3002 \\[ f[i,j]=\\max\\left\\{\\begin{aligned} &f[i-1,j]\\\\ &f[i,j-1]\\\\ &f[i-1,j-1]+1,A_i=B_j \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \u65e0 \u8ba1\u7b97\u987a\u5e8f \\(f[i=1\\rightarrow n,j=1\\rightarrow m]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n,m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nm)\\) Code for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) { f [ i ][ j ] = max ( f [ i - 1 ][ j ], f [ i ][ j - 1 ]); if ( a [ i ] == b [ j ]) f [ i ][ j ] = max ( f [ i ][ j ], f [ i - 1 ][ j - 1 ] + 1 ); }","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LCS\uff09"},{"location":"posts/basis/dp/basis/#_4","text":"Question \u4e09\u89d2\u77e9\u9635 \\(A\\) \u6709 \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u6709 \\(i\\) \u5217\u3002\u4ece\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u51fa\u53d1\uff0c\u6bcf\u6b21\u53ef\u4ee5\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u5b57\u3002\u5230\u8fbe\u5e95\u90e8\u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u6700\u5927\u4e3a\u591a\u5c11\uff1f \u6837\u4f8b\uff1a \u6700\u4f18\u8def\u5f84\u4e3a \\(13\u21928\u219226\u219215\\) \uff0c\u6700\u5927\u503c\u4e3a \\(62\\) \u3002 \\((i,j)\\) \u8868\u793a\u77e9\u9635\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6570\u5b57\u3002 \\(f[i,j]\\) \u8868\u793a\u8d70\u5230 \\((i,j)\\) \u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 \u91c7\u7528\u9006\u63a8\u6cd5\uff1a\u8981\u60f3\u8d70\u5230 \\((i,j)\\) \uff0c\u4e0a\u4e00\u6b65\u53ea\u80fd\u5728 \\((i-1,j-1)\\) \u6216 \\((i-1,j)\\) \uff1a \u82e5\u4e0a\u4e00\u6b65\u5728 \\((i-1,j-1)\\) \uff0c\u5219 \\(f[i,j]=(i,j)+f[i-1,j-1]\\) \uff1b \u82e5\u4e0a\u4e00\u6b65 \\((i-1,j)\\) \uff0c\u5219 \\(f[i,j]=(i,j)+f[i-1,j]\\) \u3002 \\[ f[i,j]=(i,j)+\\max\\left\\{\\begin{aligned} &f[i-1,j-1]\\\\ &f[i-1,j] \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \\(f[1,1]=(1,1)\\) \u8ba1\u7b97\u987a\u5e8f \\(f[i=2\\rightarrow n,j=1\\rightarrow i]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n,1\\cdots n]\\) \u7684\u6700\u5927\u503c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) Warning \u5f53 \\(j=1\\) \u6216 \\(j=i\\) \u65f6\uff0c \\(f[i-1,j-1]\\) \u548c \\(f[i-1,j]\\) \u4f1a\u8d8a\u754c\u3002\u8bfb\u5165\u6570\u636e\u524d\u8981\u5c06 \\(f\\) \u6570\u7ec4\u521d\u59cb\u5316\u4e3a \\(-\u221e\\) \uff0c\u4ece\u800c\u4f7f\u8d8a\u754c\u7684\u5143\u7d20\u5728\u53d6\u6700\u5927\u503c\u65f6\u88ab\u81ea\u52a8\u6dd8\u6c70\u3002 Code memset ( f , 0x80 , sizeof f ); f [ 1 ][ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) for ( int j = 1 ; j <= i ; j ++ ) { cin >> cnt ; f [ i ][ j ] = cnt + max ( f [ i - 1 ][ j - 1 ], f [ i - 1 ][ j ]); } for ( int i = 1 ; i <= n ; i ++ ) ans = max ( ans , f [ n ][ i ]);","title":"\u6570\u5b57\u91d1\u5b57\u5854"},{"location":"posts/basis/dp/basis/#_5","text":"Question \u6570\u5b57\u77e9\u9635 \\(A\\) \u6709 \\(n\\) \u884c \\(m\\) \u5217\u3002\u4ece\u5de6\u4e0a\u89d2\u7684\u5143\u7d20\u51fa\u53d1\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u5de6\u8d70\u3002\u5230\u8fbe\u53f3\u4e0b\u89d2\u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u6700\u5927\u4e3a\u591a\u5c11\uff1f \u6837\u4f8b\uff1a \u6700\u4f18\u8def\u5f84\u4e3a \\(17\u21921\u219220\u219212\u21929\u21922\\) \uff0c\u6700\u5927\u503c\u4e3a \\(61\\) \u3002 \\((i,j)\\) \u8868\u793a\u77e9\u9635\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6570\u5b57\u3002 \\(f[i,j]\\) \u8868\u793a\u8d70\u5230 \\((i,j)\\) \u65f6\uff0c\u7ecf\u8fc7\u7684\u6570\u5b57\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 \u7531\u4e8e\u53ea\u80fd\u5411\u5de6\u8d70\u6216\u5411\u4e0b\u8d70\uff0c\u8981\u8d70\u5230 \\((i,j)\\) \uff0c\u4e0a\u4e00\u6b65\u53ea\u80fd\u5728 \\((i-1,j)\\) \u6216 \\((i,j-1)\\) \uff1a \\[ f[i,j]=(i,j)+\\max\\left\\{\\begin{aligned} &f[i-1,j]\\\\ &f[i,j-1] \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \\(f[1,1]=(1,1)\\) \u8ba1\u7b97\u987a\u5e8f \\(f[i=1\\rightarrow n,j=1\\rightarrow m]\\) \u6700\u7ec8\u7b54\u6848 \\(f[n,m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nm)\\) Warning \u5f53 \\(i=1\\) \u6216 \\(j=1\\) \u65f6\uff0c \\(f[i-1,j]\\) \u548c \\(f[i,j-1]\\) \u4f1a\u8d8a\u754c\u3002\u540c\u6837\u9700\u8981\u5c06 \\(f\\) \u6570\u7ec4\u521d\u59cb\u5316\u4e3a \\(-\u221e\\) \u3002 Code memset ( f , 0x80 , sizeof f ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) { cin >> cnt ; if ( i == 1 && j == 1 ) f [ i ][ j ] = cnt ; else f [ i ][ j ] = cnt + max ( f [ i -1 ][ j ], f [ i ][ j - 1 ]); }","title":"\u6570\u5b57\u77e9\u9635"},{"location":"posts/basis/dp/basis/#_6","text":"\u524d\u7f00\u548c\u662f\u4e00\u79cd\u91cd\u8981\u7684\u9884\u5904\u7406\u6280\u5de7\uff0c\u80fd\u5927\u5e45\u964d\u4f4e\u300c\u67e5\u8be2\u533a\u95f4\u5143\u7d20\u548c\u300d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u524d\u7f00\u548c"},{"location":"posts/basis/dp/basis/#_7","text":"\u6570\u5217 \\(A\\) \u6709 \\(n\\) \u4e2a\u5143\u7d20\uff0c \\(f[i]\\) \u8868\u793a \\(A_1+A_2+\\cdots+A_i\\) \uff0c\u5219\u6709\uff1a \\[ f[i]=f[i-1]+A_i \\] \u521d\u59cb\u6761\u4ef6 \\(f[0]=0\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1]\\rightarrow f[n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) \u524d\u7f00\u548c\u53ef\u4ee5\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u6570\u5217\u7684\u5b50\u6bb5\u548c\u3002 \\(g[i,j]\\) \u8868\u793a\u4ece \\(A_i\\) \u5230 \\(A_j\\) \u7684\u6240\u6709\u5143\u7d20\u548c\uff0c\u5219\u6709\uff1a \\[ g[i,j]=f[j]-f[i-1] \\] \u5355\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 Code int g ( int i , int j ) { return f [ j ] - f [ i - 1 ]; } int main () { for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] + a [ i ]; while ( cin >> l >> r ) cout << g ( l , r ) << endl ; }","title":"\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"posts/basis/dp/basis/#_8","text":"\u77e9\u9635 \\(A\\) \u6709 \\(n\\) \u884c \\(m\\) \u5217\u3002 \\(f[i,j]\\) \u8868\u793a\u4ee5 \\((1,1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c\u4ee5 \\((i,j)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u7684\u5143\u7d20\u548c\uff0c\u5219\uff1a \\[ f[i,j]=f[i-1,j]+f[i,j-1]-f[i-1,j-1]+(i,j) \\] \u521d\u59cb\u6761\u4ef6 \\(f[0,0]=0\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1\\rightarrow n,1\\rightarrow m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nm)\\) \u4e8c\u7ef4\u524d\u7f00\u548c\u53ef\u4ee5\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u5b50\u77e9\u9635\u5143\u7d20\u548c\u3002 \\(g[x_1,y_1,x_2,y_2]\\) \u8868\u793a\u4ee5 \\((x_1,y_1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c \\((x_2,y_2)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u5143\u7d20\u548c\uff0c\u5219\uff1a \\[ g[x_1,y_1,x_2,y_2]=f[x_2,y_2]-f[x_1-1,y_2]-f[x_2,y_1-1]+f[x_1-1,y_1-1] \\] \u5355\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 Code int g ( int x1 , int y1 , int x2 , int y2 ) { return f [ x2 ][ y2 ] - f [ x1 - 1 ][ y2 ] - f [ x2 ][ y1 - 1 ] + f [ x1 - 1 ][ y1 - 1 ]; } int main () { f [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) f [ i ][ j ] = f [ i - 1 ][ j ] + f [ i ][ j - 1 ] + a [ i ][ j ]; while ( cin >> x1 >> y1 >> x2 >> y2 ) cout << g ( x1 , y1 , x2 , y2 ) << endl ; }","title":"\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"posts/basis/dp/basis/#_9","text":"\u5dee\u5206\u662f \u524d\u7f00\u548c \u7684\u9006\u8fd0\u7b97\uff0c\u80fd\u5927\u5e45\u964d\u4f4e\u300c\u533a\u95f4\u6279\u91cf\u64cd\u4f5c\u300d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6570\u5217 \\(A\\) \u6709 \\(n\\) \u4e2a\u5143\u7d20\u3002 \\(f[i]\\) \u4ee3\u8868\u6570\u5217 \\(A\\) \u7b2c \\(i\\) \u9879\u548c\u524d\u4e00\u9879\u7684\u5dee\uff0c\u5373\uff1a \\[ f[i]=A_i-A_{i-1} \\] \u521d\u59cb\u6761\u4ef6 \\(f[1]=A_1\\) \u8ba1\u7b97\u987a\u5e8f \\(f[1\\rightarrow n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\) \\(f\\) \u88ab\u79f0\u4f5c\u300c\u5dee\u5206\u6570\u5217\u300d\u3002\u6570\u5217 \\(A=\\{5,2,3,1,6,4\\}\\) \u7684\u5dee\u5206\u6570\u5217\u4e3a \\(f=\\{5,-3,1,-2,5,-2\\}\\) \u3002 \u5c06 \\(A[l\\cdots r]\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e0a \\(x\\) \u65f6\uff0c\u5dee\u5206\u6570\u5217\u4e2d \\(f[l]\\) \u589e\u52a0\u4e86 \\(x\\) \uff0c \\(f[r+1]\\) \u51cf\u5c11\u4e86 \\(x\\) \uff0c\u5176\u4f59\u5143\u7d20\u4e0d\u53d8\u3002\u56e0\u6b64\u6bcf\u6b21\u53ea\u4fee\u6539 \\(f[l]\\) \u548c \\(f[r+1]\\) \u7684\u503c\uff0c\u6700\u540e\u901a\u8fc7 \\(f\\) \u6570\u5217\u8fd8\u539f \\(A\\) \u4e2d\u7684\u5143\u7d20\uff0c\u5373\uff1a \\[ A_i=A_{i-1}+f[i] \\] \u5355\u6b21\u6279\u91cf\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u3002 Code void add ( int l , int r , int x ) { // \u5c06\u533a\u95f4 [l, r] \u6279\u91cf\u52a0 x f [ l ] += x , f [ r + 1 ] -= x ; } void query () { // \u8fd8\u539f\u6570\u7ec4\u5143\u7d20 for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = a [ i - 1 ] + f [ i ]; } int main () { for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = a [ i ] - a [ i - 1 ]; int l , r , x ; while ( cin >> l >> r >> x ) { add ( l , r , x ); } query (); } th, td { font-size: 14px; } \\(A\\) \u7684\u4efb\u610f\u5b50\u5e8f\u5217 \\(B\\) \u53ef\u4ee5\u8868\u793a\u4e3a \\(B=\\{A_{k_1} \\ ,A_{k_2} \\ ,\\cdots,A_{k_p} \\ \\}\\) \uff0c\u5176\u4e2d \\(k_1<k_2<\\cdots<k_p\\) \u3002 \u82e5 \\(A\\) \u7684\u5b50\u5e8f\u5217 \\(B\\) \u6ee1\u8db3 \\(A_{k_1}<A_{k_2}<\\cdots<A_{k_p}\\) \uff0c\u5219 \\(B\\) \u662f \\(A\\) \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u3002 \u21a9 \u82e5\u4e00\u4e2a\u5e8f\u5217\u65e2\u662f \\(A\\) \u7684\u5b50\u5e8f\u5217\uff0c\u53c8\u662f \\(B\\) \u7684\u5b50\u5e8f\u5217\uff0c\u5219\u5b83\u662f \\(A\\) \u548c \\(B\\) \u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u21a9","title":"\u5dee\u5206"},{"location":"posts/basis/dp/interval/","text":"\u7b80\u4ecb $ \u533a\u95f4 DP \u5373\u5728\u533a\u95f4\u4e0a\u8fdb\u884c\u7684 DP\uff0c\u4ee5\u300c\u533a\u95f4\u957f\u5ea6\u300d\u4f5c\u4e3a DP \u7684\u300c\u9636\u6bb5\u300d\uff0c\u901a\u8fc7\u5c0f\u533a\u95f4\u7684\u6700\u4f18\u503c\u63a8\u51fa\u5927\u533a\u95f4\u7684\u6700\u4f18\u503c\u3002 \u57fa\u672c\u539f\u7406 $ Quote Freeze \u61d2\u5f97\u5199\u57fa\u672c\u539f\u7406\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e9b\u4f8b\u9898\u5df2\u7ecf\u4ee3\u8868\u4e86\u533a\u95f4 DP \u7684\u7cbe\u9ad3\u3002 \u4f8b\u9898 $ \u77f3\u5b50\u5408\u5e76 $ Question \u9898\u76ee\u63cf\u8ff0 \\(n\\) \u5806\u77f3\u5b50\u6392\u6210\u4e00\u5217\uff0c\u7b2c \\(i\\) \u5806\u77f3\u5b50\u91cd\u91cf\u4e3a \\(A_i\\) \u3002\u6bcf\u6b21\u5408\u5e76\u76f8\u90bb\u4e24\u5806\u77f3\u5b50\u4e3a\u4e00\u5806\uff0c\u6d88\u8017\u7684\u4f53\u529b\u503c\u4e3a\u8fd9\u4e24\u5806\u77f3\u5b50\u7684\u91cd\u91cf\u548c\u3002\u6c42\u5c06\u6240\u6709\u77f3\u5b50\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u6700\u5c11\u6d88\u8017\u591a\u5c11\u4f53\u529b\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u8868\u793a\u6709 \\(n\\) \u5806\u77f3\u5b50\u3002 \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u5806\u77f3\u5b50\u7684\u91cd\u91cf\u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u6d88\u8017\u4f53\u529b\u503c\u3002 \u8f93\u5165\u6837\u4f8b 4 4 5 9 4 \u8f93\u51fa\u6837\u4f8b 44 \u6570\u636e\u8303\u56f4 \\(1\u2264n\u2264100\\) \uff0c\u6240\u6709\u6570\u636e\u7686\u5728 \\(int\\) \u8303\u56f4\u5185\u3002 \\(f[l,r]\\) \u8868\u793a\u5408\u5e76\u533a\u95f4 \\([l,r]\\) \u5185\u7684\u77f3\u5b50\uff08\u7b2c \\(l\\) \u5806\u81f3\u7b2c \\(r\\) \u5806\u77f3\u5b50\uff09\u82b1\u8d39\u7684\u6700\u5c11\u4f53\u529b\u503c\u3002 \u679a\u4e3e \\(k=l\u2192r-1\\) \uff1a \u5408\u5e76\u533a\u95f4 \\([l,k]\\) \u5185\u7684\u77f3\u5b50\u4e3a\u4e00\u5806\u77f3\u5b50\uff0c\u6d88\u8017\u4f53\u529b\u503c \\(f[l,k]\\) \uff1b \u5408\u5e76\u533a\u95f4 \\([k+1,r]\\) \u5185\u7684\u77f3\u5b50\u4e3a\u4e00\u5806\u77f3\u5b50\uff0c\u6d88\u8017\u4f53\u529b\u503c \\(f[k+1,r]\\) \uff1b \u5408\u5e76\u5269\u4e0b\u4e24\u5806\u77f3\u5b50\uff0c\u6d88\u8017\u4f53\u529b\u503c \\(A_l+A_{l+1}+\\cdots+A_r\\) \u3002 \\[ f[l,r]=\\min_{l\u2264k<r}\\{f[l,k]+f[k+1,r]\\}+\\sum_{i=l}^r A_i \\] \u4f7f\u7528 \u524d\u7f00\u548c \u8fdb\u4e00\u6b65\u4f18\u5316\u67e5\u8be2\u533a\u95f4\u77f3\u5b50\u8d28\u91cf\u548c\u7684\u6548\u7387\uff1a \\[ f[l,r]=\\min_{l\u2264k<r}\\{f[l,k]+f[k+1,r]\\}+sum[r]-sum[l-1] \\] \u7531\u4e8e\u5927\u533a\u95f4\u7684\u300c\u6700\u5c11\u4f53\u529b\u503c\u300d\u7531\u5c0f\u533a\u95f4\u63a8\u51fa\uff0c\u6545\u8ba1\u7b97\u987a\u5e8f\u4e3a\u4ece\u5c0f\u533a\u95f4\u5230\u5927\u533a\u95f4\u3002 \u679a\u4e3e\u533a\u95f4\u957f\u5ea6 \\(len=2\u2192n\\) \uff0c\u6bcf\u6b21\u8ba1\u7b97\u6240\u6709\u957f\u5ea6\u4e3a \\(len\\) \u7684\u533a\u95f4\u7684\u300c\u6700\u5c11\u4f53\u529b\u503c\u300d\u3002 \u521d\u59cb\u6761\u4ef6 \\(f[i,i]=0\\) \uff0c\u5176\u4f59\u4e3a \\(\u221e\\) \u8ba1\u7b97\u987a\u5e8f \\(f[\\) \u5c0f\u533a\u95f4 \\(]\u2192f[\\) \u5927\u533a\u95f4 \\(]\\) \u6700\u7ec8\u7b54\u6848 \\(f[1,n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^3)\\) Code memset ( f , 0x7f , sizeof f ); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ i ] = 0 ; sum [ i ] = sum [ i - 1 ] + a [ i ]; } for ( int len = 2 ; len <= n ; len ++ ) // \u533a\u95f4\u957f\u5ea6 for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { // \u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9 int r = l + len - 1 ; // \u533a\u95f4\u53f3\u7aef\u70b9 for ( int k = l ; k < r ; k ++ ) f [ l ][ r ] = min ( f [ l ][ r ], f [ l ][ k ] + f [ k + 1 ][ r ]); f [ l ][ r ] += sum [ r ] - sum [ l - 1 ]; } \u5220\u6570\u95ee\u9898 $ Question \u9898\u76ee\u63cf\u8ff0 \u6570\u5217 \\(A\\) \u7684 \\(n\\) \u4e2a\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u3002\u73b0\u8981\u6c42\u4ece \\(A\\) \u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u5220\u6389\u8fde\u7eed \\(i\\) \u4e2a\u6570\uff08 \\(1\u2264i\u2264n\\) \uff09\uff0c\u91cd\u590d\u6b64\u64cd\u4f5c\u76f4\u5230\u6570\u5217\u4e3a\u7a7a\u3002 \u6bcf\u6b21\u64cd\u4f5c\u90fd\u80fd\u83b7\u5f97\u4ef7\u503c\u3002\u5220\u9664 \\(A_l\\cdots A_r\\) \u53ef\u83b7\u5f97\u7684\u4ef7\u503c\u4e3a \\(|A_l-A_r|\u00b7(r-l+1)\\) \uff0c\u5982\u679c\u53ea\u80fd\u5220\u4e00\u4e2a\u6570\uff0c\u83b7\u5f97\u7684\u4ef7\u503c\u4e3a\u8be5\u6570\u7684\u503c\u3002\u6c42\u53ef\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u8868\u793a\u6570\u5217\u5143\u7d20\u4e2a\u6570\u3002 \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u8868\u793a \\(A_i\\) \u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002 \u8f93\u5165\u6837\u4f8b 6 54 29 196 21 133 118 \u8f93\u51fa\u6837\u4f8b 768 \u6570\u636e\u8303\u56f4 \\(3\u2264n\u2264100,1\u2264A_i\u22641000\\) \u3002 \\(f[l,r]\\) \u8868\u793a\u5220\u9664 \\(A[l\\cdots r]\\) \u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u3002\u5220\u9664 \\(A[l\\cdots r]\\) \u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u4e00\u6b21\u6027\u5220\u9664 \\(A[l\\cdots r]\\) \uff0c\u5f97\u5230\u4ef7\u503c \\(|A_l-A_r|\u00b7(r-l+1)\\) \uff1b \u5148\u5220\u9664 \\(A[l\\cdots k]\\) \uff0c\u518d\u5220\u9664 \\(A[k+1\\cdots r]\\) \uff0c\u5f97\u5230\u4ef7\u503c \\(f[l,k]+f[k+1,r]\\) \u3002 \\[ f[l,r]=\\max\\left\\{\\begin{aligned} &|A_l-A_r|\u00b7(r-l+1)\\\\ &f[l,k]+f[k+1,r],l\u2264k<r \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \\(f[i,i]=A_i\\) \u8ba1\u7b97\u987a\u5e8f \\(f[\\) \u5c0f\u533a\u95f4 \\(]\u2192f[\\) \u5927\u533a\u95f4 \\(]\\) \u6700\u7ec8\u7b54\u6848 \\(f[1,n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^3)\\) Code for ( int i = 1 ; i <= n ; i ++ ) f [ i ][ i ] = a [ i ]; for ( int len = 2 ; len <= n ; len ++ ) for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { int r = l + len - 1 ; f [ i ][ j ] = abs ( a [ l ] - a [ r ]) * ( r - l + 1 ); for ( int k = l ; k < r ; k ++ ) f [ i ][ j ] = max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ]); }","title":"\u533a\u95f4 DP"},{"location":"posts/basis/dp/interval/#_1","text":"\u533a\u95f4 DP \u5373\u5728\u533a\u95f4\u4e0a\u8fdb\u884c\u7684 DP\uff0c\u4ee5\u300c\u533a\u95f4\u957f\u5ea6\u300d\u4f5c\u4e3a DP \u7684\u300c\u9636\u6bb5\u300d\uff0c\u901a\u8fc7\u5c0f\u533a\u95f4\u7684\u6700\u4f18\u503c\u63a8\u51fa\u5927\u533a\u95f4\u7684\u6700\u4f18\u503c\u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/dp/interval/#_2","text":"Quote Freeze \u61d2\u5f97\u5199\u57fa\u672c\u539f\u7406\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e9b\u4f8b\u9898\u5df2\u7ecf\u4ee3\u8868\u4e86\u533a\u95f4 DP \u7684\u7cbe\u9ad3\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/basis/dp/interval/#_3","text":"","title":"\u4f8b\u9898"},{"location":"posts/basis/dp/interval/#_4","text":"Question \u9898\u76ee\u63cf\u8ff0 \\(n\\) \u5806\u77f3\u5b50\u6392\u6210\u4e00\u5217\uff0c\u7b2c \\(i\\) \u5806\u77f3\u5b50\u91cd\u91cf\u4e3a \\(A_i\\) \u3002\u6bcf\u6b21\u5408\u5e76\u76f8\u90bb\u4e24\u5806\u77f3\u5b50\u4e3a\u4e00\u5806\uff0c\u6d88\u8017\u7684\u4f53\u529b\u503c\u4e3a\u8fd9\u4e24\u5806\u77f3\u5b50\u7684\u91cd\u91cf\u548c\u3002\u6c42\u5c06\u6240\u6709\u77f3\u5b50\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u6700\u5c11\u6d88\u8017\u591a\u5c11\u4f53\u529b\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u8868\u793a\u6709 \\(n\\) \u5806\u77f3\u5b50\u3002 \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u5806\u77f3\u5b50\u7684\u91cd\u91cf\u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u6d88\u8017\u4f53\u529b\u503c\u3002 \u8f93\u5165\u6837\u4f8b 4 4 5 9 4 \u8f93\u51fa\u6837\u4f8b 44 \u6570\u636e\u8303\u56f4 \\(1\u2264n\u2264100\\) \uff0c\u6240\u6709\u6570\u636e\u7686\u5728 \\(int\\) \u8303\u56f4\u5185\u3002 \\(f[l,r]\\) \u8868\u793a\u5408\u5e76\u533a\u95f4 \\([l,r]\\) \u5185\u7684\u77f3\u5b50\uff08\u7b2c \\(l\\) \u5806\u81f3\u7b2c \\(r\\) \u5806\u77f3\u5b50\uff09\u82b1\u8d39\u7684\u6700\u5c11\u4f53\u529b\u503c\u3002 \u679a\u4e3e \\(k=l\u2192r-1\\) \uff1a \u5408\u5e76\u533a\u95f4 \\([l,k]\\) \u5185\u7684\u77f3\u5b50\u4e3a\u4e00\u5806\u77f3\u5b50\uff0c\u6d88\u8017\u4f53\u529b\u503c \\(f[l,k]\\) \uff1b \u5408\u5e76\u533a\u95f4 \\([k+1,r]\\) \u5185\u7684\u77f3\u5b50\u4e3a\u4e00\u5806\u77f3\u5b50\uff0c\u6d88\u8017\u4f53\u529b\u503c \\(f[k+1,r]\\) \uff1b \u5408\u5e76\u5269\u4e0b\u4e24\u5806\u77f3\u5b50\uff0c\u6d88\u8017\u4f53\u529b\u503c \\(A_l+A_{l+1}+\\cdots+A_r\\) \u3002 \\[ f[l,r]=\\min_{l\u2264k<r}\\{f[l,k]+f[k+1,r]\\}+\\sum_{i=l}^r A_i \\] \u4f7f\u7528 \u524d\u7f00\u548c \u8fdb\u4e00\u6b65\u4f18\u5316\u67e5\u8be2\u533a\u95f4\u77f3\u5b50\u8d28\u91cf\u548c\u7684\u6548\u7387\uff1a \\[ f[l,r]=\\min_{l\u2264k<r}\\{f[l,k]+f[k+1,r]\\}+sum[r]-sum[l-1] \\] \u7531\u4e8e\u5927\u533a\u95f4\u7684\u300c\u6700\u5c11\u4f53\u529b\u503c\u300d\u7531\u5c0f\u533a\u95f4\u63a8\u51fa\uff0c\u6545\u8ba1\u7b97\u987a\u5e8f\u4e3a\u4ece\u5c0f\u533a\u95f4\u5230\u5927\u533a\u95f4\u3002 \u679a\u4e3e\u533a\u95f4\u957f\u5ea6 \\(len=2\u2192n\\) \uff0c\u6bcf\u6b21\u8ba1\u7b97\u6240\u6709\u957f\u5ea6\u4e3a \\(len\\) \u7684\u533a\u95f4\u7684\u300c\u6700\u5c11\u4f53\u529b\u503c\u300d\u3002 \u521d\u59cb\u6761\u4ef6 \\(f[i,i]=0\\) \uff0c\u5176\u4f59\u4e3a \\(\u221e\\) \u8ba1\u7b97\u987a\u5e8f \\(f[\\) \u5c0f\u533a\u95f4 \\(]\u2192f[\\) \u5927\u533a\u95f4 \\(]\\) \u6700\u7ec8\u7b54\u6848 \\(f[1,n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^3)\\) Code memset ( f , 0x7f , sizeof f ); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ i ] = 0 ; sum [ i ] = sum [ i - 1 ] + a [ i ]; } for ( int len = 2 ; len <= n ; len ++ ) // \u533a\u95f4\u957f\u5ea6 for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { // \u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9 int r = l + len - 1 ; // \u533a\u95f4\u53f3\u7aef\u70b9 for ( int k = l ; k < r ; k ++ ) f [ l ][ r ] = min ( f [ l ][ r ], f [ l ][ k ] + f [ k + 1 ][ r ]); f [ l ][ r ] += sum [ r ] - sum [ l - 1 ]; }","title":"\u77f3\u5b50\u5408\u5e76"},{"location":"posts/basis/dp/interval/#_5","text":"Question \u9898\u76ee\u63cf\u8ff0 \u6570\u5217 \\(A\\) \u7684 \\(n\\) \u4e2a\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u3002\u73b0\u8981\u6c42\u4ece \\(A\\) \u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u5220\u6389\u8fde\u7eed \\(i\\) \u4e2a\u6570\uff08 \\(1\u2264i\u2264n\\) \uff09\uff0c\u91cd\u590d\u6b64\u64cd\u4f5c\u76f4\u5230\u6570\u5217\u4e3a\u7a7a\u3002 \u6bcf\u6b21\u64cd\u4f5c\u90fd\u80fd\u83b7\u5f97\u4ef7\u503c\u3002\u5220\u9664 \\(A_l\\cdots A_r\\) \u53ef\u83b7\u5f97\u7684\u4ef7\u503c\u4e3a \\(|A_l-A_r|\u00b7(r-l+1)\\) \uff0c\u5982\u679c\u53ea\u80fd\u5220\u4e00\u4e2a\u6570\uff0c\u83b7\u5f97\u7684\u4ef7\u503c\u4e3a\u8be5\u6570\u7684\u503c\u3002\u6c42\u53ef\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u8868\u793a\u6570\u5217\u5143\u7d20\u4e2a\u6570\u3002 \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u8868\u793a \\(A_i\\) \u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002 \u8f93\u5165\u6837\u4f8b 6 54 29 196 21 133 118 \u8f93\u51fa\u6837\u4f8b 768 \u6570\u636e\u8303\u56f4 \\(3\u2264n\u2264100,1\u2264A_i\u22641000\\) \u3002 \\(f[l,r]\\) \u8868\u793a\u5220\u9664 \\(A[l\\cdots r]\\) \u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u3002\u5220\u9664 \\(A[l\\cdots r]\\) \u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u4e00\u6b21\u6027\u5220\u9664 \\(A[l\\cdots r]\\) \uff0c\u5f97\u5230\u4ef7\u503c \\(|A_l-A_r|\u00b7(r-l+1)\\) \uff1b \u5148\u5220\u9664 \\(A[l\\cdots k]\\) \uff0c\u518d\u5220\u9664 \\(A[k+1\\cdots r]\\) \uff0c\u5f97\u5230\u4ef7\u503c \\(f[l,k]+f[k+1,r]\\) \u3002 \\[ f[l,r]=\\max\\left\\{\\begin{aligned} &|A_l-A_r|\u00b7(r-l+1)\\\\ &f[l,k]+f[k+1,r],l\u2264k<r \\end{aligned}\\right. \\] \u521d\u59cb\u6761\u4ef6 \\(f[i,i]=A_i\\) \u8ba1\u7b97\u987a\u5e8f \\(f[\\) \u5c0f\u533a\u95f4 \\(]\u2192f[\\) \u5927\u533a\u95f4 \\(]\\) \u6700\u7ec8\u7b54\u6848 \\(f[1,n]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^3)\\) Code for ( int i = 1 ; i <= n ; i ++ ) f [ i ][ i ] = a [ i ]; for ( int len = 2 ; len <= n ; len ++ ) for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { int r = l + len - 1 ; f [ i ][ j ] = abs ( a [ l ] - a [ r ]) * ( r - l + 1 ); for ( int k = l ; k < r ; k ++ ) f [ i ][ j ] = max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ]); }","title":"\u5220\u6570\u95ee\u9898"},{"location":"posts/basis/dp/knapsack/","text":"01 \u80cc\u5305 $ Question \u9898\u76ee\u63cf\u8ff0 \u7528\u4f53\u79ef\u4e3a \\(m\\) \u7684\u80cc\u5305\u88c5 \\(n\\) \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u53ea\u6709 \\(1\\) \u4e2a\u3002\u7b2c \\(i\\) \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u4e3a \\(w_i\\) \uff0c\u4ef7\u503c\u4e3a \\(c_i\\) \uff0c\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff1f \\(f[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u7269\u54c1\uff08\u90e8\u5206\u6216\u5168\u90e8\uff09\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u82e5\u53ea\u8003\u8651\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u7b56\u7565\uff08\u653e\u6216\u4e0d\u653e\uff09\uff0c\u5219\u95ee\u9898\u8f6c\u800c\u53ea\u6d89\u53ca\u5230\u524d \\(i-1\\) \u4e2a\u7269\u54c1\uff1a \u82e5\u4e0d\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219 \\(f[i,v]=f[i-1,v]\\) \uff1b \u82e5\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219\u524d \\(i-1\\) \u4e2a\u7269\u54c1\u53ea\u80fd\u653e\u5728\u4f53\u79ef\u4e3a \\(v-w_i\\) \u7684\u7a7a\u95f4\u91cc\uff0c\u6545 \\(f[i,v]=f[i-1,v-w_i]+c_i\\) \u3002 \\[ f[i,v] = \\max\\left\\{\\begin{aligned} &f[i-1,v]\\\\ &f[i-1,v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u7531\u4e8e \\(f[i,v]\\) \u7684\u503c\u53ea\u7531 \\(f[i-1,v]\\) \u548c \\(f[i-1,v-w_i]\\) \u51b3\u5b9a\uff0c\u6240\u4ee5\u5148\u6c42 \\(f[1,0\\cdots m]\\) \uff0c\u518d\u6c42 \\(f[2,0\\cdots m]\\) \uff0c \\(\\cdots\\) \uff0c\u76f4\u5230\u6c42\u51fa \\(f[n,m]\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Warning \u5f53 \\(v < w_i\\) \u65f6\uff0c\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u653e\u4e0d\u8fdb\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\uff0c\u6b64\u65f6 \\(f[i,v]\\) \u53ea\u80fd\u7b49\u4e8e \\(f[i-1,v]\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { for ( int v = 0 ; v < w [ i ]; v ++ ) f [ i ][ v ] = f [ i - 1 ][ v ]; for ( int v = w [ i ]; v <= m ; v ++ ) f [ i ][ v ] = max ( f [ i - 1 ][ v ], f [ i - 1 ][ v - w [ i ]] + c [ i ]); } \u7a7a\u95f4\u4f18\u5316 $ \u5047\u8bbe\u80cc\u5305\u4f53\u79ef\u4e3a \\(4\\) \uff0c\u7269\u54c1\u4e2a\u6570\u4e3a \\(3\\) \uff0c\u4f53\u79ef\u548c\u4ef7\u503c\u5982\u4e0b\uff1a \u5e8f\u53f7 \u4f53\u79ef \\(w\\) \u4ef7\u503c \\(c\\) \\(1\\) \\(1\\) \\(2\\) \\(2\\) \\(2\\) \\(3\\) \\(3\\) \\(1\\) \\(3\\) \u7b2c \\(i\\) \u884c\u7b2c \\(v\\) \u5217\u7684\u683c\u5b50 \\((i,v)\\) \u5b58\u653e \\(f[i,v]\\) \u7684\u503c\u3002\u8fd0\u884c 01 \u80cc\u5305\u7a0b\u5e8f\u53ef\u4ee5\u5f97\u5230\u4e0b\u8868\uff1a \\(i\\setminus v\\) \\(0\\) \\(1\\) \\(2\\) \\(3\\) \\(4\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) \\(0\\) \\(2\\) \\(3\\) \\(5\\) \\(5\\) \\(3\\) \\(0\\) \\(3\\) \\(5\\) \\(6\\) \\(8\\) \u7531\u4e8e\u6bcf\u4e00\u884c\u7684\u6570\u636e\u53ea\u4e0e\u4e0a\u4e00\u884c\u6709\u5173\uff0c\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u53bb\u6389 \\(1\\) \u7ef4\uff1a \\[ f[\\textcolor{lightgray}{i,}v] = \\max\\left\\{\\begin{aligned} &f[\\textcolor{lightgray}{i-1,}v]\\\\ &f[\\textcolor{lightgray}{i-1,}v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u9700\u8981\u4fdd\u8bc1\u66f4\u65b0 \\(f[v]\\) \u65f6\uff0c \\(f[v-w_i]\\) \u5728\u7b2c \\(i\\) \u884c\u8fd8\u6ca1\u88ab\u66f4\u65b0\uff0c\u56e0\u6b64\u964d\u5e8f\u679a\u4e3e \\(v\\) \u3002 \u7528 \\(1\\) \u53f7\u7269\u54c1\uff08 \\(w_1=1,c_1=2\\) \uff09\u66f4\u65b0 \\(f[4\\cdots 0]\\) \uff1a \\(f\\setminus v\\) \\(0\\) \\(1\\) \\(2\\) \\(3\\) \\(4\\) \\(f\\) \uff08\u4e0a\u4e00\u884c\uff09 \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[4]\\) \\(0\\) \\(0\\) \\(0\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[4-1]}\\textcolor{red}{+2}\\) \u66f4\u65b0 \\(f[3]\\) \\(0\\) \\(0\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[3-1]}\\textcolor{red}{+2}\\) \\(2\\) \u66f4\u65b0 \\(f[2]\\) \\(0\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[2-1]}\\textcolor{red}{+2}\\) \\(2\\) \\(2\\) \u66f4\u65b0 \\(f[1]\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[1-1]}\\textcolor{red}{+2}\\) \\(2\\) \\(2\\) \\(2\\) \u66f4\u65b0 \\(f[0]\\) \\(\\textcolor{blue}{f[0]=0}\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) \\(f\\) \\(0\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) f [ v ] = max ( f [ v ], f [ v - w [ i ]] + c [ i ]); \u5b8c\u5168\u80cc\u5305 $ Question \u82e5\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4e2a\uff1f \\(f[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u79cd\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u82e5\u4e0d\u653e\u7b2c \\(i\\) \u79cd\u7269\u54c1\uff0c\u5219 \\(f[i,v]=f[i-1,v]\\) \uff1b \u82e5\u591a\u653e\u5165 \\(1\\) \u4e2a\u7b2c \\(i\\) \u79cd\u7269\u54c1\uff0c\u5219\u5269\u4f59\u7684\u524d \\(i\\) \u79cd\u7269\u54c1\u53ea\u80fd\u653e\u5728\u4f53\u79ef\u4e3a \\(v-w_i\\) \u7684\u7a7a\u95f4\u91cc\uff0c\u6545 \\(f[i,v]=f[i,v-w_i]+c_i\\) \u3002 \\[ f[i,v] = \\max\\left\\{\\begin{aligned} &f[i-1,v]\\\\ &f[i,v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { for ( int v = 0 ; v < w [ i ]; v ++ ) f [ i ][ v ] = f [ i - 1 ][ v ]; for ( int v = w [ i ]; v <= m ; v ++ ) f [ i ][ v ] = max ( f [ i - 1 ][ v ], f [ i ][ v - w [ i ]] + c [ i ]); } \u7a7a\u95f4\u4f18\u5316 $ \u5b8c\u5168\u80cc\u5305\u540c\u6837\u4e5f\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\uff1a \\[ f[\\textcolor{lightgray}{i,}v] = \\max\\left\\{\\begin{aligned} &f[\\textcolor{lightgray}{i-1,}v]\\\\ &f[\\textcolor{lightgray}{i,}v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u9700\u8981\u4fdd\u8bc1\u66f4\u65b0 \\(f[v]\\) \u65f6\uff0c \\(f[v-w_i]\\) \u5728\u7b2c \\(i\\) \u884c\u5df2\u7ecf\u88ab\u66f4\u65b0\u4e86\uff0c\u56e0\u6b64\u5347\u5e8f\u679a\u4e3e \\(v\\) \u3002 \u6cbf\u7528 01 \u80cc\u5305\u7684\u4f8b\u5b50 \uff0c\u6539\u53d8 \\(v\\) \u7684\u679a\u4e3e\u987a\u5e8f\u4e3a\u5347\u5e8f\uff1a \u7528 \\(1\\) \u53f7\u7269\u54c1\uff08 \\(w_1=1,c_1=2\\) \uff09\u66f4\u65b0 \\(f[0\\cdots 4]\\) \uff1a \\(f\\setminus v\\) \\(0\\) \\(1\\) \\(2\\) \\(3\\) \\(4\\) \\(f\\) \uff08\u4e0a\u4e00\u884c\uff09 \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[0]\\) \\(\\textcolor{blue}{f[0]=0}\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[1]\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[1-1]}\\textcolor{red}{+2}\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[2]\\) \\(0\\) \\(\\textcolor{blue}{2}\\) \\(\\textcolor{blue}{f[2-1]}\\textcolor{red}{+2}\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[3]\\) \\(0\\) \\(2\\) \\(\\textcolor{blue}{4}\\) \\(\\textcolor{blue}{f[3-1]}\\textcolor{red}{+2}\\) \\(0\\) \u66f4\u65b0 \\(f[4]\\) \\(0\\) \\(2\\) \\(4\\) \\(\\textcolor{blue}{6}\\) \\(\\textcolor{blue}{f[4-1]}\\textcolor{red}{+2}\\) \\(f\\) \\(0\\) \\(2\\) \\(4\\) \\(6\\) \\(8\\) Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = w [ i ]; v <= m ; v ++ ) f [ v ] = max ( f [ v ], f [ v - w [ i ]] + c [ i ]); \u591a\u91cd\u80cc\u5305 $ Question \u82e5 \\(n\\) \u79cd\u7269\u54c1\u5206\u522b\u6709 \\(s_1,s_2,\\cdots,s_n\\) \u4e2a\uff1f \u7b2c \\(i\\) \u4e2a\u7269\u54c1\u6709 \\(s_i+1\\) \u79cd\u7b56\u7565\uff08\u53d6 \\(0\\sim s_i\\) \u4ef6\uff09\u3002\u5728 01 \u80cc\u5305 \u7684\u57fa\u7840\u4e0a\uff0c\u518d\u679a\u4e3e\u7269\u54c1\u4e2a\u6570 \\(k\\) \uff0c\u6bcf\u6b21\u7ed1\u5b9a \\(k\\) \u4e2a\u7269\u54c1\u5f53\u6210\u4e00\u4e2a\u7269\u54c1\u3002 \\[ f[v] = \\max\\left\\{\\begin{aligned} &f[v]\\\\ &f[v-k\u00b7w_i]+k\u00b7c_i,v\u2265k\u00b7w_i \\end{aligned}\\right. \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\sum s_i)\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) for ( int k = 0 ; k <= s [ i ] && v >= k * w [ i ]; k ++ ) f [ v ] = max ( f [ v ], f [ v - k * w [ i ]] + k * c [ i ]); \u8f6c\u6362\u4e3a 01 \u80cc\u5305 $ \u5728 \\(1,2,4,\\cdots,2^n\\) \u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u76f8\u52a0\uff0c\u53ef\u4ee5\u5f97\u5230 \\(0\\sim 2^{n+1}-1\\) \u4e2d\u7684\u4efb\u610f\u6574\u6570\u3002 \u540c\u7406\uff0c \\(1,2,4,\\cdots,2^k,n-(2^{k+1}-1)\\) \u53ef\u4ee5\u7ec4\u5408\u51fa \\(0\\sim n\\) \u4e2d\u7684\u4efb\u610f\u6574\u6570\uff0c\u5176\u4e2d \\(k\\) \u662f\u6ee1\u8db3 \\(n-(2^{k+1}-1)>0\\) \u7684\u6700\u5927\u6574\u6570\u3002 \u5c06\u7b2c \\(i\\) \u79cd\u7269\u54c1\u62c6\u5206\u6210 \\(\\log{s_i}\\) \u4e2a\u7269\u54c1\uff0c\u5b83\u4eec\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u5982\u4e0b\uff1a \u4f53\u79ef \\(w\\) \\(w_i\\) \\(2w_i\\) \\(4w_i\\) \\(\\cdots\\) \\(2^kw_i\\) \\([s_i-(2^{k+1}-1)]w_i\\) \u4ef7\u503c \\(v\\) \\(c_i\\) \\(2c_i\\) \\(4c_i\\) \\(\\cdots\\) \\(2^kc_i\\) \\([s_i-(2^{k+1}-1)]c_i\\) \u8fd9\u4e9b\u7269\u54c1\u53ef\u4ee5\u7ec4\u5408\u51fa\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u6240\u6709\u9009\u62e9\u65b9\u6848\uff08\u53d6 \\(0\\sim s_i\\) \u4ef6\uff09\u3002\u7528 01 \u80cc\u5305 \u7684\u7b56\u7565\u5904\u7406\u51fa\u6700\u4f73\u9009\u62e9\u65b9\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\sum\\log{s_i})\\) Info \u5b8c\u5168\u80cc\u5305 \u4e5f\u53ef\u4ee5\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u8fdb\u884c\u4f18\u5316\u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { int wi , ci , si , k = 1 ; cin >> wi >> ci >> si ; while ( k <= si ) { w [ ++ tot ] = wi * k , c [ tot ] = ci * k ; si -= k , k *= 2 ; } w [ ++ tot ] = wi * si , c [ tot ] = ci * si ; } for ( int i = 1 ; i <= tot ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) f [ v ] = max ( f [ v ], f [ v - w [ i ]] + c [ i ]); \u5206\u7ec4\u80cc\u5305 $ Question \u7ed9\u5b9a \\(t\\) \u7ec4\u7269\u54c1\uff0c\u7b2c \\(k\\) \u7ec4\u6709 \\(s_k\\) \u4e2a\u7269\u54c1\uff0c\u7b2c \\(k\\) \u7ec4\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u4f53\u79ef\u4e3a \\(w_{k \\ i}\\) \uff0c\u4ef7\u503c\u4e3a \\(c_{k \\ i}\\) \u3002\u6bcf\u7ec4\u4e2d\u7684\u7269\u54c1\u4e92\u76f8\u51b2\u7a81\uff0c\u6700\u591a\u9009\u4e00\u4ef6\u3002\u5c06\u54ea\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff1f \\(f[k,v]\\) \u8868\u793a\u5c06\u524d \\(k\\) \u7ec4\u7684\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u7b2c \\(k\\) \u7ec4\u7684\u9009\u62e9\u7b56\u7565\u5982\u4e0b\uff1a \\[ f[k,v] = \\max\\left\\{\\begin{aligned} &f[k-1,v]\\\\ &\\max_{1\u2264i\u2264s_k} \\ f[k-1,v-w_{k \\ i}]+c_{k \\ i},v\u2265w_{k \\ i} \\end{aligned}\\right. \\] \u548c 01 \u80cc\u5305\u7c7b\u4f3c\uff0c\u540c\u6837\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Warning \u679a\u4e3e\u7b2c \\(k\\) \u7ec4\u7269\u54c1\u7684\u5faa\u73af\u5e94\u653e\u5728\u6700\u5185\u5c42\u3002\u82e5\u653e\u5728\u5916\u5c42\uff0c\u5219\u7b49\u4ef7\u4e8e 01 \u80cc\u5305\uff0c\u5931\u53bb\u4e86\u5206\u7ec4\u7684\u610f\u4e49\u3002 Code for ( int k = 1 ; k <= t ; k ++ ) for ( int v = m ; v >= 0 ; v -- ) for ( int i = 1 ; i <= s [ k ]; i ++ ) if ( v >= w [ k ][ i ]) f [ v ] = max ( f [ v ], f [ v - w [ k ][ i ]] + c [ k ][ i ]); \u4e8c\u7ef4\u80cc\u5305 $ Question \u80cc\u5305\u7684\u4f53\u79ef\u4e3a \\(m_1\\) \uff0c\u627f\u91cd\u4e3a \\(m_2\\) \uff1b\u7269\u54c1\u4e2a\u6570\u4e3a \\(n\\) \uff0c\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u4e3a \\({w_1}_i\\) \uff0c\u8d28\u91cf\u4e3a \\({w_2}_i\\) \uff0c\u4ef7\u503c\u4e3a \\(c_i\\) \u3002\u5728\u80cc\u5305\u4e0d\u8fc7\u8f7d\u7684\u540c\u65f6\uff0c\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff1f \u540c\u65f6\u679a\u4e3e\u4f53\u79ef\u548c\u8d28\u91cf\u5373\u53ef\u3002 \\[ f[v_1,v_2] = \\max\\left\\{\\begin{aligned} &f[v_1,v_2]\\\\ &f[v_1-{w_1}_i,v_2-{w_2}_i]+c_i,v_1\u2265{w_1}_i,v_2\u2265{w_2}_i \\end{aligned}\\right. \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm_1m_2)\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v1 = m1 ; v1 >= w1 [ i ]; v1 -- ) for ( int v2 = m2 ; v2 >= w2 [ i ]; v2 -- ) f [ v1 ][ v2 ] = max ( f [ v1 ][ v2 ], f [ v1 - w1 [ i ]][ v2 - w2 [ i ]] + c [ i ]); \u62d3\u5c55 $ \u65b9\u6848\u603b\u6570 $ Question \u5728 01 \u80cc\u5305 \u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u7269\u54c1\u653e\u5165\u80cc\u5305\u7684\u65b9\u6848\u6709\u51e0\u79cd\uff1f \\(g[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\u7684\u65b9\u6848\u603b\u6570\u3002 \u82e5\u4e0d\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219\u65b9\u6848\u603b\u6570\u4e3a \\(g[i-1,v]\\) \uff1b \u82e5\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219\u65b9\u6848\u603b\u6570\u4e3a \\(g[i,v-w_i]\\) \u3002 \\[ g[i,v]=g[i-1,v]+g[i-1,v-w_i],v\u2265w_i \\] \u540c\u6837\u53ef\u4ee5\u7701\u53bb\u7b2c\u4e00\u7ef4\uff1a \\[ g[v]=g[v]+g[v-w_i],v\u2265w_i \\] \u521d\u59cb\u6761\u4ef6\uff1a \\(g[0]=1\\) \u3002\u56e0\u4e3a\u5f53\u80cc\u5305\u4f53\u79ef\u4e3a \\(0\\) \u65f6\u53ea\u6709\u4e00\u4e2a\u65b9\u6848\uff1a\u4e0d\u88c5\u4efb\u4f55\u7269\u54c1\u3002 Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) g [ v ] += g [ v - w [ i ]; \u6700\u4f18\u65b9\u6848\u603b\u6570 $ Question \u4f7f\u603b\u4ef7\u503c\u6700\u5927\u7684\u65b9\u6848\u6709\u51e0\u79cd\uff1f \u5df2\u77e5 01 \u80cc\u5305 \u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[ f[i,v] = \\max\\left\\{\\begin{aligned} &f[i-1,v]\\\\ &f[i-1,v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \\(g[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\u7684\u65b9\u6848\u603b\u6570\u3002 \u82e5 \\(f[i-1,v]>f[i-1,v-w_i]+c_i\\) \uff0c\u5219\u4e0d\u653e\u7269\u54c1 \\(i\\) \u603b\u4ef7\u503c\u6700\u5927\uff0c \\(g[i,v]=g[i-1,v]\\) \uff1b \u82e5 \\(f[i-1,v]<f[i-1,v-w_i]+c_i\\) \uff0c\u5219\u653e\u7269\u54c1 \\(i\\) \u603b\u4ef7\u503c\u6700\u5927\uff0c \\(g[i,v]=g[i-1,v-w_i]\\) \uff1b \u82e5\u76f8\u7b49\uff0c\u5219\u653e\u6216\u4e0d\u653e\u90fd\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff0c \\(g[i,v]=g[i-1,v]+g[i-1,v-w_i]\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { for ( int v = 0 ; v < w [ i ]; v ++ ) f [ i ][ v ] = f [ i - 1 ][ v ], g [ i ][ v ] = g [ i - 1 ][ v ]; for ( int v = m ; v >= w [ i ]; v -- ) { f [ i ][ v ] = max ( f [ i - 1 ][ v ], f [ i - 1 ][ v - w [ i ]] + c [ i ]); if ( f [ i ][ v ] == f [ i - 1 ][ v ]) g [ i ][ v ] += g [ i - 1 ][ v ]; if ( f [ i ][ v ] == f [ i - 1 ][ v - w [ i ]] + c [ i ]) g [ i ][ v ] += g [ v - w [ i ]]; } } \u4e00\u7ef4\u4f18\u5316\u7248\uff1a Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) { int max_f = max ( f [ v ], f [ v - w [ i ]] + c [ i ]), max_g = 0 ; if ( max_f == f [ v ]) max_g += g [ v ]; if ( max_f == f [ v - w [ i ]] + c [ i ]) max_g += g [ v - w [ i ]]; f [ v ] = max_f , g [ v ] = max_g ; } th, td { font-size: 14px; } .md-typeset table:not([class]) th { min-width: 3rem; }","title":"\u80cc\u5305 DP"},{"location":"posts/basis/dp/knapsack/#01","text":"Question \u9898\u76ee\u63cf\u8ff0 \u7528\u4f53\u79ef\u4e3a \\(m\\) \u7684\u80cc\u5305\u88c5 \\(n\\) \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u53ea\u6709 \\(1\\) \u4e2a\u3002\u7b2c \\(i\\) \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u4e3a \\(w_i\\) \uff0c\u4ef7\u503c\u4e3a \\(c_i\\) \uff0c\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff1f \\(f[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u7269\u54c1\uff08\u90e8\u5206\u6216\u5168\u90e8\uff09\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u82e5\u53ea\u8003\u8651\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u7b56\u7565\uff08\u653e\u6216\u4e0d\u653e\uff09\uff0c\u5219\u95ee\u9898\u8f6c\u800c\u53ea\u6d89\u53ca\u5230\u524d \\(i-1\\) \u4e2a\u7269\u54c1\uff1a \u82e5\u4e0d\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219 \\(f[i,v]=f[i-1,v]\\) \uff1b \u82e5\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219\u524d \\(i-1\\) \u4e2a\u7269\u54c1\u53ea\u80fd\u653e\u5728\u4f53\u79ef\u4e3a \\(v-w_i\\) \u7684\u7a7a\u95f4\u91cc\uff0c\u6545 \\(f[i,v]=f[i-1,v-w_i]+c_i\\) \u3002 \\[ f[i,v] = \\max\\left\\{\\begin{aligned} &f[i-1,v]\\\\ &f[i-1,v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u7531\u4e8e \\(f[i,v]\\) \u7684\u503c\u53ea\u7531 \\(f[i-1,v]\\) \u548c \\(f[i-1,v-w_i]\\) \u51b3\u5b9a\uff0c\u6240\u4ee5\u5148\u6c42 \\(f[1,0\\cdots m]\\) \uff0c\u518d\u6c42 \\(f[2,0\\cdots m]\\) \uff0c \\(\\cdots\\) \uff0c\u76f4\u5230\u6c42\u51fa \\(f[n,m]\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Warning \u5f53 \\(v < w_i\\) \u65f6\uff0c\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u653e\u4e0d\u8fdb\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\uff0c\u6b64\u65f6 \\(f[i,v]\\) \u53ea\u80fd\u7b49\u4e8e \\(f[i-1,v]\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { for ( int v = 0 ; v < w [ i ]; v ++ ) f [ i ][ v ] = f [ i - 1 ][ v ]; for ( int v = w [ i ]; v <= m ; v ++ ) f [ i ][ v ] = max ( f [ i - 1 ][ v ], f [ i - 1 ][ v - w [ i ]] + c [ i ]); }","title":"01 \u80cc\u5305"},{"location":"posts/basis/dp/knapsack/#_1","text":"\u5047\u8bbe\u80cc\u5305\u4f53\u79ef\u4e3a \\(4\\) \uff0c\u7269\u54c1\u4e2a\u6570\u4e3a \\(3\\) \uff0c\u4f53\u79ef\u548c\u4ef7\u503c\u5982\u4e0b\uff1a \u5e8f\u53f7 \u4f53\u79ef \\(w\\) \u4ef7\u503c \\(c\\) \\(1\\) \\(1\\) \\(2\\) \\(2\\) \\(2\\) \\(3\\) \\(3\\) \\(1\\) \\(3\\) \u7b2c \\(i\\) \u884c\u7b2c \\(v\\) \u5217\u7684\u683c\u5b50 \\((i,v)\\) \u5b58\u653e \\(f[i,v]\\) \u7684\u503c\u3002\u8fd0\u884c 01 \u80cc\u5305\u7a0b\u5e8f\u53ef\u4ee5\u5f97\u5230\u4e0b\u8868\uff1a \\(i\\setminus v\\) \\(0\\) \\(1\\) \\(2\\) \\(3\\) \\(4\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) \\(0\\) \\(2\\) \\(3\\) \\(5\\) \\(5\\) \\(3\\) \\(0\\) \\(3\\) \\(5\\) \\(6\\) \\(8\\) \u7531\u4e8e\u6bcf\u4e00\u884c\u7684\u6570\u636e\u53ea\u4e0e\u4e0a\u4e00\u884c\u6709\u5173\uff0c\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u53bb\u6389 \\(1\\) \u7ef4\uff1a \\[ f[\\textcolor{lightgray}{i,}v] = \\max\\left\\{\\begin{aligned} &f[\\textcolor{lightgray}{i-1,}v]\\\\ &f[\\textcolor{lightgray}{i-1,}v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u9700\u8981\u4fdd\u8bc1\u66f4\u65b0 \\(f[v]\\) \u65f6\uff0c \\(f[v-w_i]\\) \u5728\u7b2c \\(i\\) \u884c\u8fd8\u6ca1\u88ab\u66f4\u65b0\uff0c\u56e0\u6b64\u964d\u5e8f\u679a\u4e3e \\(v\\) \u3002 \u7528 \\(1\\) \u53f7\u7269\u54c1\uff08 \\(w_1=1,c_1=2\\) \uff09\u66f4\u65b0 \\(f[4\\cdots 0]\\) \uff1a \\(f\\setminus v\\) \\(0\\) \\(1\\) \\(2\\) \\(3\\) \\(4\\) \\(f\\) \uff08\u4e0a\u4e00\u884c\uff09 \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[4]\\) \\(0\\) \\(0\\) \\(0\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[4-1]}\\textcolor{red}{+2}\\) \u66f4\u65b0 \\(f[3]\\) \\(0\\) \\(0\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[3-1]}\\textcolor{red}{+2}\\) \\(2\\) \u66f4\u65b0 \\(f[2]\\) \\(0\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[2-1]}\\textcolor{red}{+2}\\) \\(2\\) \\(2\\) \u66f4\u65b0 \\(f[1]\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[1-1]}\\textcolor{red}{+2}\\) \\(2\\) \\(2\\) \\(2\\) \u66f4\u65b0 \\(f[0]\\) \\(\\textcolor{blue}{f[0]=0}\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) \\(f\\) \\(0\\) \\(2\\) \\(2\\) \\(2\\) \\(2\\) Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) f [ v ] = max ( f [ v ], f [ v - w [ i ]] + c [ i ]);","title":"\u7a7a\u95f4\u4f18\u5316"},{"location":"posts/basis/dp/knapsack/#_2","text":"Question \u82e5\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4e2a\uff1f \\(f[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u79cd\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u82e5\u4e0d\u653e\u7b2c \\(i\\) \u79cd\u7269\u54c1\uff0c\u5219 \\(f[i,v]=f[i-1,v]\\) \uff1b \u82e5\u591a\u653e\u5165 \\(1\\) \u4e2a\u7b2c \\(i\\) \u79cd\u7269\u54c1\uff0c\u5219\u5269\u4f59\u7684\u524d \\(i\\) \u79cd\u7269\u54c1\u53ea\u80fd\u653e\u5728\u4f53\u79ef\u4e3a \\(v-w_i\\) \u7684\u7a7a\u95f4\u91cc\uff0c\u6545 \\(f[i,v]=f[i,v-w_i]+c_i\\) \u3002 \\[ f[i,v] = \\max\\left\\{\\begin{aligned} &f[i-1,v]\\\\ &f[i,v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { for ( int v = 0 ; v < w [ i ]; v ++ ) f [ i ][ v ] = f [ i - 1 ][ v ]; for ( int v = w [ i ]; v <= m ; v ++ ) f [ i ][ v ] = max ( f [ i - 1 ][ v ], f [ i ][ v - w [ i ]] + c [ i ]); }","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"posts/basis/dp/knapsack/#_3","text":"\u5b8c\u5168\u80cc\u5305\u540c\u6837\u4e5f\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\uff1a \\[ f[\\textcolor{lightgray}{i,}v] = \\max\\left\\{\\begin{aligned} &f[\\textcolor{lightgray}{i-1,}v]\\\\ &f[\\textcolor{lightgray}{i,}v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \u9700\u8981\u4fdd\u8bc1\u66f4\u65b0 \\(f[v]\\) \u65f6\uff0c \\(f[v-w_i]\\) \u5728\u7b2c \\(i\\) \u884c\u5df2\u7ecf\u88ab\u66f4\u65b0\u4e86\uff0c\u56e0\u6b64\u5347\u5e8f\u679a\u4e3e \\(v\\) \u3002 \u6cbf\u7528 01 \u80cc\u5305\u7684\u4f8b\u5b50 \uff0c\u6539\u53d8 \\(v\\) \u7684\u679a\u4e3e\u987a\u5e8f\u4e3a\u5347\u5e8f\uff1a \u7528 \\(1\\) \u53f7\u7269\u54c1\uff08 \\(w_1=1,c_1=2\\) \uff09\u66f4\u65b0 \\(f[0\\cdots 4]\\) \uff1a \\(f\\setminus v\\) \\(0\\) \\(1\\) \\(2\\) \\(3\\) \\(4\\) \\(f\\) \uff08\u4e0a\u4e00\u884c\uff09 \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[0]\\) \\(\\textcolor{blue}{f[0]=0}\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[1]\\) \\(\\textcolor{blue}{0}\\) \\(\\textcolor{blue}{f[1-1]}\\textcolor{red}{+2}\\) \\(0\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[2]\\) \\(0\\) \\(\\textcolor{blue}{2}\\) \\(\\textcolor{blue}{f[2-1]}\\textcolor{red}{+2}\\) \\(0\\) \\(0\\) \u66f4\u65b0 \\(f[3]\\) \\(0\\) \\(2\\) \\(\\textcolor{blue}{4}\\) \\(\\textcolor{blue}{f[3-1]}\\textcolor{red}{+2}\\) \\(0\\) \u66f4\u65b0 \\(f[4]\\) \\(0\\) \\(2\\) \\(4\\) \\(\\textcolor{blue}{6}\\) \\(\\textcolor{blue}{f[4-1]}\\textcolor{red}{+2}\\) \\(f\\) \\(0\\) \\(2\\) \\(4\\) \\(6\\) \\(8\\) Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = w [ i ]; v <= m ; v ++ ) f [ v ] = max ( f [ v ], f [ v - w [ i ]] + c [ i ]);","title":"\u7a7a\u95f4\u4f18\u5316"},{"location":"posts/basis/dp/knapsack/#_4","text":"Question \u82e5 \\(n\\) \u79cd\u7269\u54c1\u5206\u522b\u6709 \\(s_1,s_2,\\cdots,s_n\\) \u4e2a\uff1f \u7b2c \\(i\\) \u4e2a\u7269\u54c1\u6709 \\(s_i+1\\) \u79cd\u7b56\u7565\uff08\u53d6 \\(0\\sim s_i\\) \u4ef6\uff09\u3002\u5728 01 \u80cc\u5305 \u7684\u57fa\u7840\u4e0a\uff0c\u518d\u679a\u4e3e\u7269\u54c1\u4e2a\u6570 \\(k\\) \uff0c\u6bcf\u6b21\u7ed1\u5b9a \\(k\\) \u4e2a\u7269\u54c1\u5f53\u6210\u4e00\u4e2a\u7269\u54c1\u3002 \\[ f[v] = \\max\\left\\{\\begin{aligned} &f[v]\\\\ &f[v-k\u00b7w_i]+k\u00b7c_i,v\u2265k\u00b7w_i \\end{aligned}\\right. \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\sum s_i)\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) for ( int k = 0 ; k <= s [ i ] && v >= k * w [ i ]; k ++ ) f [ v ] = max ( f [ v ], f [ v - k * w [ i ]] + k * c [ i ]);","title":"\u591a\u91cd\u80cc\u5305"},{"location":"posts/basis/dp/knapsack/#01_1","text":"\u5728 \\(1,2,4,\\cdots,2^n\\) \u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u76f8\u52a0\uff0c\u53ef\u4ee5\u5f97\u5230 \\(0\\sim 2^{n+1}-1\\) \u4e2d\u7684\u4efb\u610f\u6574\u6570\u3002 \u540c\u7406\uff0c \\(1,2,4,\\cdots,2^k,n-(2^{k+1}-1)\\) \u53ef\u4ee5\u7ec4\u5408\u51fa \\(0\\sim n\\) \u4e2d\u7684\u4efb\u610f\u6574\u6570\uff0c\u5176\u4e2d \\(k\\) \u662f\u6ee1\u8db3 \\(n-(2^{k+1}-1)>0\\) \u7684\u6700\u5927\u6574\u6570\u3002 \u5c06\u7b2c \\(i\\) \u79cd\u7269\u54c1\u62c6\u5206\u6210 \\(\\log{s_i}\\) \u4e2a\u7269\u54c1\uff0c\u5b83\u4eec\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u5982\u4e0b\uff1a \u4f53\u79ef \\(w\\) \\(w_i\\) \\(2w_i\\) \\(4w_i\\) \\(\\cdots\\) \\(2^kw_i\\) \\([s_i-(2^{k+1}-1)]w_i\\) \u4ef7\u503c \\(v\\) \\(c_i\\) \\(2c_i\\) \\(4c_i\\) \\(\\cdots\\) \\(2^kc_i\\) \\([s_i-(2^{k+1}-1)]c_i\\) \u8fd9\u4e9b\u7269\u54c1\u53ef\u4ee5\u7ec4\u5408\u51fa\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u6240\u6709\u9009\u62e9\u65b9\u6848\uff08\u53d6 \\(0\\sim s_i\\) \u4ef6\uff09\u3002\u7528 01 \u80cc\u5305 \u7684\u7b56\u7565\u5904\u7406\u51fa\u6700\u4f73\u9009\u62e9\u65b9\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\sum\\log{s_i})\\) Info \u5b8c\u5168\u80cc\u5305 \u4e5f\u53ef\u4ee5\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u8fdb\u884c\u4f18\u5316\u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { int wi , ci , si , k = 1 ; cin >> wi >> ci >> si ; while ( k <= si ) { w [ ++ tot ] = wi * k , c [ tot ] = ci * k ; si -= k , k *= 2 ; } w [ ++ tot ] = wi * si , c [ tot ] = ci * si ; } for ( int i = 1 ; i <= tot ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) f [ v ] = max ( f [ v ], f [ v - w [ i ]] + c [ i ]);","title":"\u8f6c\u6362\u4e3a 01 \u80cc\u5305"},{"location":"posts/basis/dp/knapsack/#_5","text":"Question \u7ed9\u5b9a \\(t\\) \u7ec4\u7269\u54c1\uff0c\u7b2c \\(k\\) \u7ec4\u6709 \\(s_k\\) \u4e2a\u7269\u54c1\uff0c\u7b2c \\(k\\) \u7ec4\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u4f53\u79ef\u4e3a \\(w_{k \\ i}\\) \uff0c\u4ef7\u503c\u4e3a \\(c_{k \\ i}\\) \u3002\u6bcf\u7ec4\u4e2d\u7684\u7269\u54c1\u4e92\u76f8\u51b2\u7a81\uff0c\u6700\u591a\u9009\u4e00\u4ef6\u3002\u5c06\u54ea\u4e9b\u7269\u54c1\u653e\u5165\u80cc\u5305\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff1f \\(f[k,v]\\) \u8868\u793a\u5c06\u524d \\(k\\) \u7ec4\u7684\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u7b2c \\(k\\) \u7ec4\u7684\u9009\u62e9\u7b56\u7565\u5982\u4e0b\uff1a \\[ f[k,v] = \\max\\left\\{\\begin{aligned} &f[k-1,v]\\\\ &\\max_{1\u2264i\u2264s_k} \\ f[k-1,v-w_{k \\ i}]+c_{k \\ i},v\u2265w_{k \\ i} \\end{aligned}\\right. \\] \u548c 01 \u80cc\u5305\u7c7b\u4f3c\uff0c\u540c\u6837\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Warning \u679a\u4e3e\u7b2c \\(k\\) \u7ec4\u7269\u54c1\u7684\u5faa\u73af\u5e94\u653e\u5728\u6700\u5185\u5c42\u3002\u82e5\u653e\u5728\u5916\u5c42\uff0c\u5219\u7b49\u4ef7\u4e8e 01 \u80cc\u5305\uff0c\u5931\u53bb\u4e86\u5206\u7ec4\u7684\u610f\u4e49\u3002 Code for ( int k = 1 ; k <= t ; k ++ ) for ( int v = m ; v >= 0 ; v -- ) for ( int i = 1 ; i <= s [ k ]; i ++ ) if ( v >= w [ k ][ i ]) f [ v ] = max ( f [ v ], f [ v - w [ k ][ i ]] + c [ k ][ i ]);","title":"\u5206\u7ec4\u80cc\u5305"},{"location":"posts/basis/dp/knapsack/#_6","text":"Question \u80cc\u5305\u7684\u4f53\u79ef\u4e3a \\(m_1\\) \uff0c\u627f\u91cd\u4e3a \\(m_2\\) \uff1b\u7269\u54c1\u4e2a\u6570\u4e3a \\(n\\) \uff0c\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u4e3a \\({w_1}_i\\) \uff0c\u8d28\u91cf\u4e3a \\({w_2}_i\\) \uff0c\u4ef7\u503c\u4e3a \\(c_i\\) \u3002\u5728\u80cc\u5305\u4e0d\u8fc7\u8f7d\u7684\u540c\u65f6\uff0c\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff1f \u540c\u65f6\u679a\u4e3e\u4f53\u79ef\u548c\u8d28\u91cf\u5373\u53ef\u3002 \\[ f[v_1,v_2] = \\max\\left\\{\\begin{aligned} &f[v_1,v_2]\\\\ &f[v_1-{w_1}_i,v_2-{w_2}_i]+c_i,v_1\u2265{w_1}_i,v_2\u2265{w_2}_i \\end{aligned}\\right. \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm_1m_2)\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v1 = m1 ; v1 >= w1 [ i ]; v1 -- ) for ( int v2 = m2 ; v2 >= w2 [ i ]; v2 -- ) f [ v1 ][ v2 ] = max ( f [ v1 ][ v2 ], f [ v1 - w1 [ i ]][ v2 - w2 [ i ]] + c [ i ]);","title":"\u4e8c\u7ef4\u80cc\u5305"},{"location":"posts/basis/dp/knapsack/#_7","text":"","title":"\u62d3\u5c55"},{"location":"posts/basis/dp/knapsack/#_8","text":"Question \u5728 01 \u80cc\u5305 \u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u7269\u54c1\u653e\u5165\u80cc\u5305\u7684\u65b9\u6848\u6709\u51e0\u79cd\uff1f \\(g[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\u7684\u65b9\u6848\u603b\u6570\u3002 \u82e5\u4e0d\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219\u65b9\u6848\u603b\u6570\u4e3a \\(g[i-1,v]\\) \uff1b \u82e5\u653e\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\u5219\u65b9\u6848\u603b\u6570\u4e3a \\(g[i,v-w_i]\\) \u3002 \\[ g[i,v]=g[i-1,v]+g[i-1,v-w_i],v\u2265w_i \\] \u540c\u6837\u53ef\u4ee5\u7701\u53bb\u7b2c\u4e00\u7ef4\uff1a \\[ g[v]=g[v]+g[v-w_i],v\u2265w_i \\] \u521d\u59cb\u6761\u4ef6\uff1a \\(g[0]=1\\) \u3002\u56e0\u4e3a\u5f53\u80cc\u5305\u4f53\u79ef\u4e3a \\(0\\) \u65f6\u53ea\u6709\u4e00\u4e2a\u65b9\u6848\uff1a\u4e0d\u88c5\u4efb\u4f55\u7269\u54c1\u3002 Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) g [ v ] += g [ v - w [ i ];","title":"\u65b9\u6848\u603b\u6570"},{"location":"posts/basis/dp/knapsack/#_9","text":"Question \u4f7f\u603b\u4ef7\u503c\u6700\u5927\u7684\u65b9\u6848\u6709\u51e0\u79cd\uff1f \u5df2\u77e5 01 \u80cc\u5305 \u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[ f[i,v] = \\max\\left\\{\\begin{aligned} &f[i-1,v]\\\\ &f[i-1,v-w_i]+c_i,v\u2265w_i \\end{aligned}\\right. \\] \\(g[i,v]\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3a \\(v\\) \u7684\u80cc\u5305\u7684\u65b9\u6848\u603b\u6570\u3002 \u82e5 \\(f[i-1,v]>f[i-1,v-w_i]+c_i\\) \uff0c\u5219\u4e0d\u653e\u7269\u54c1 \\(i\\) \u603b\u4ef7\u503c\u6700\u5927\uff0c \\(g[i,v]=g[i-1,v]\\) \uff1b \u82e5 \\(f[i-1,v]<f[i-1,v-w_i]+c_i\\) \uff0c\u5219\u653e\u7269\u54c1 \\(i\\) \u603b\u4ef7\u503c\u6700\u5927\uff0c \\(g[i,v]=g[i-1,v-w_i]\\) \uff1b \u82e5\u76f8\u7b49\uff0c\u5219\u653e\u6216\u4e0d\u653e\u90fd\u53ef\u4f7f\u603b\u4ef7\u503c\u6700\u5927\uff0c \\(g[i,v]=g[i-1,v]+g[i-1,v-w_i]\\) \u3002 Code for ( int i = 1 ; i <= n ; i ++ ) { for ( int v = 0 ; v < w [ i ]; v ++ ) f [ i ][ v ] = f [ i - 1 ][ v ], g [ i ][ v ] = g [ i - 1 ][ v ]; for ( int v = m ; v >= w [ i ]; v -- ) { f [ i ][ v ] = max ( f [ i - 1 ][ v ], f [ i - 1 ][ v - w [ i ]] + c [ i ]); if ( f [ i ][ v ] == f [ i - 1 ][ v ]) g [ i ][ v ] += g [ i - 1 ][ v ]; if ( f [ i ][ v ] == f [ i - 1 ][ v - w [ i ]] + c [ i ]) g [ i ][ v ] += g [ v - w [ i ]]; } } \u4e00\u7ef4\u4f18\u5316\u7248\uff1a Code for ( int i = 1 ; i <= n ; i ++ ) for ( int v = m ; v >= w [ i ]; v -- ) { int max_f = max ( f [ v ], f [ v - w [ i ]] + c [ i ]), max_g = 0 ; if ( max_f == f [ v ]) max_g += g [ v ]; if ( max_f == f [ v - w [ i ]] + c [ i ]) max_g += g [ v - w [ i ]]; f [ v ] = max_f , g [ v ] = max_g ; } th, td { font-size: 14px; } .md-typeset table:not([class]) th { min-width: 3rem; }","title":"\u6700\u4f18\u65b9\u6848\u603b\u6570"},{"location":"posts/basis/dp/memo-search/","text":"\u666e\u901a\u641c\u7d22 $ \u6c42 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u7b2c \\(i\\) \u9879\uff08 \\(f[i]\\) \uff09\u7684 DFS \u7a0b\u5e8f\u5982\u4e0b\uff1a Code int f ( int x ) { if ( x <= 2 ) return 1 ; return f ( x - 1 ) + f ( x - 2 ); } \u6267\u884c \\(f(7)\\) \u7684\u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a \u968f\u7740 \\(n\\) \u7684\u589e\u5927\uff0c\u6267\u884c \\(f(n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5448\u6307\u6570\u7ea7\u589e\u957f\u3002\u82e5\u6d4b\u8bc4\u6570\u636e\u7a0d\u6709\u70b9\u53d8\u6001\uff0c\u4f60\u7684\u7a0b\u5e8f\u5c31\u4f1a\uff1a \u8bb0\u5fc6\u5316\u641c\u7d22 $ \u8003\u8651\u5f00\u6570\u7ec4 \\(F[ \\ ]\\) \u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u82e5 \\(f(x)\\) \u672a\u88ab\u8c03\u7528\uff0c\u7b97\u51fa \\(f(x)\\) \u7684\u7ed3\u679c\uff0c\u5e76\u5b58\u5165 \\(F(x)\\) \uff1b \u82e5 \\(f(x)\\) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de \\(F(x)\\) \u7684\u503c\u3002 Code int F [] = { 0 , 1 , 1 }; int f ( int x ) { if ( F [ x ] != 0 ) return f [ x ]; // \u5982\u679c F[x] \u4e0d\u4e3a 0\uff0c\u5219 f(x) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7 return F [ x ] = f ( x - 1 ) + f ( x - 2 ); // \u8fd4\u56de\u65f6\u4fdd\u5b58 } \u6267\u884c \\(f(7)\\) \u7684\u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a \u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u6548\u7387\u548c\u52a8\u6001\u89c4\u5212\u76f8\u5f53\uff0c\u8bbe\u8ba1\u96be\u5ea6\u4f4e\u4e8e\u52a8\u6001\u89c4\u5212\u3002\u82e5 \u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u540e\u96be\u4ee5\u5224\u65ad \u8ba1\u7b97\u987a\u5e8f \uff0c\u5219\u53ef\u4ee5\u91c7\u7528\u8be5\u7b97\u6cd5\u3002","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"posts/basis/dp/memo-search/#_1","text":"\u6c42 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u7b2c \\(i\\) \u9879\uff08 \\(f[i]\\) \uff09\u7684 DFS \u7a0b\u5e8f\u5982\u4e0b\uff1a Code int f ( int x ) { if ( x <= 2 ) return 1 ; return f ( x - 1 ) + f ( x - 2 ); } \u6267\u884c \\(f(7)\\) \u7684\u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a \u968f\u7740 \\(n\\) \u7684\u589e\u5927\uff0c\u6267\u884c \\(f(n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5448\u6307\u6570\u7ea7\u589e\u957f\u3002\u82e5\u6d4b\u8bc4\u6570\u636e\u7a0d\u6709\u70b9\u53d8\u6001\uff0c\u4f60\u7684\u7a0b\u5e8f\u5c31\u4f1a\uff1a","title":"\u666e\u901a\u641c\u7d22"},{"location":"posts/basis/dp/memo-search/#_2","text":"\u8003\u8651\u5f00\u6570\u7ec4 \\(F[ \\ ]\\) \u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u82e5 \\(f(x)\\) \u672a\u88ab\u8c03\u7528\uff0c\u7b97\u51fa \\(f(x)\\) \u7684\u7ed3\u679c\uff0c\u5e76\u5b58\u5165 \\(F(x)\\) \uff1b \u82e5 \\(f(x)\\) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de \\(F(x)\\) \u7684\u503c\u3002 Code int F [] = { 0 , 1 , 1 }; int f ( int x ) { if ( F [ x ] != 0 ) return f [ x ]; // \u5982\u679c F[x] \u4e0d\u4e3a 0\uff0c\u5219 f(x) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7 return F [ x ] = f ( x - 1 ) + f ( x - 2 ); // \u8fd4\u56de\u65f6\u4fdd\u5b58 } \u6267\u884c \\(f(7)\\) \u7684\u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a \u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u6548\u7387\u548c\u52a8\u6001\u89c4\u5212\u76f8\u5f53\uff0c\u8bbe\u8ba1\u96be\u5ea6\u4f4e\u4e8e\u52a8\u6001\u89c4\u5212\u3002\u82e5 \u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u540e\u96be\u4ee5\u5224\u65ad \u8ba1\u7b97\u987a\u5e8f \uff0c\u5219\u53ef\u4ee5\u91c7\u7528\u8be5\u7b97\u6cd5\u3002","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"posts/basis/dp/tree/","text":"\u7b80\u4ecb $ \u6811\u5f62 DP \u5373\u5728\u6811\u4e0a\u8fdb\u884c\u7684 DP\uff0c\u4ee5\u300c\u8282\u70b9\u7684\u6df1\u5ea6\u300d\u4f5c\u4e3a DP \u7684\u300c\u9636\u6bb5\u300d\uff0c\u901a\u8fc7\u5b50\u8282\u70b9\u63a8\u51fa\u7236\u8282\u70b9\u7684\u6700\u4f18\u503c\u3002DP \u7684\u8fc7\u7a0b\u591a\u4f7f\u7528\u9012\u5f52\uff0c\u7c7b\u4f3c\u4e8e \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002 \u57fa\u672c\u539f\u7406 $ Quote Freeze \u61d2\u5f97\u5199\u57fa\u672c\u539f\u7406\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e9b\u4f8b\u9898\u5df2\u7ecf\u4ee3\u8868\u4e86\u6811\u5f62 DP \u7684\u7cbe\u9ad3\u3002 \u4f8b\u9898 $ \u5b50\u6811\u5927\u5c0f $ Question \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u70b9\uff0c \\(m\\) \u6761\u8fb9\uff0c\u9876\u70b9\u7f16\u53f7\u4e3a \\(1\\sim n\\) \u7684\u65e0\u6743\u6811\uff0c \\(1\\) \u53f7\u8282\u70b9\u4e3a\u6839\u3002 \u8fdb\u884c \\(m\\) \u6b21\u8be2\u95ee\uff0c\u67e5\u8be2\u4ee5 \\(i\\) \u53f7\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6240\u5305\u542b\u7684\u8282\u70b9\u4e2a\u6570\uff08\u5b50\u6811\u5927\u5c0f\uff09\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u4ee3\u8868\u9876\u70b9\u6570\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e00\u5bf9\u6574\u6570 \\(l,k\\) \uff0c\u8868\u793a \\(l\\) \u662f \\(k\\) \u7684\u7236\u8282\u70b9\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(m\\) \uff0c\u4ee3\u8868\u8be2\u95ee\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be2\u95ee\u7684\u6839\u8282\u70b9\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u5e94\u6839\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3002 \u8f93\u5165\u6837\u4f8b 5 1 2 1 3 3 4 3 5 3 1 3 5 \u8f93\u51fa\u6837\u4f8b 5 2 0 \u6570\u636e\u8303\u56f4 \\(1\u2264n,m\u2264 10^5\\) \uff0c\u6240\u6709\u6570\u636e\u7686\u5728 \\(int\\) \u8303\u56f4\u5185\u3002 \\(f[i]\\) \u8868\u793a\u4ee5\u8282\u70b9 \\(i\\) \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff0c \\(Son(i)\\) \u8868\u793a \\(i\\) \u7684\u5b50\u8282\u70b9\u96c6\u5408\u3002\u6613\u77e5\uff1a \\[ f[i]=1+\\sum_{v\\in Son(i)}f[v] \\] \u7531\u4e8e \\(f[i]\\) \u7684\u503c\u7531 \\(i\\) \u7684\u5b50\u8282\u70b9 \\(v\\) \u63a8\u51fa\uff0c\u8ba1\u7b97\u987a\u5e8f\u5e94\u4e3a \\(f[\\) \u5b50\u8282\u70b9 \\(]\u2192f[\\) \u7236\u8282\u70b9]\u3002\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\uff0c\u4fbf\u4e8e\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u3002 Code void dfs ( int u ) { // \u6c42\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f f [ u ] = 1 ; for ( v = u \u7684\u6240\u6709\u5b50\u8282\u70b9 ) { dfs ( v ); f [ u ] += f [ v ]; } } \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a $ Question \u9898\u76ee\u63cf\u8ff0 \u516c\u53f8\u6709 \\(n\\) \u4e2a\u4eba\uff08\u7f16\u53f7 \\(1\\cdots n\\) \uff09\uff0c\u73b0\u8981\u4e3e\u2f8f\u2f00\u573a\u665a\u4f1a\uff0c\u5e76\u89c4\u5b9a\u5982\u679c\u9080\u8bf7\u4e86\u67d0\u4e2a\u2f08\uff0c\u90a3\u4e48\u2f00\u5b9a\u4e0d\u4f1a\u9080\u8bf7\u4ed6\u7684\u4e0a\u53f8\uff08\u4ed6\u4e0a\u53f8\u7684\u4e0a\u53f8\uff0c\u4e0a\u53f8\u7684\u4e0a\u53f8\u7684\u4e0a\u53f8 \\(\\cdots\\) \u90fd\u53ef\u4ee5\u9080\u8bf7\uff09\u3002 \u6bcf\u4e2a\u2f08\u90fd\u6709\u2f00\u4e2a\u6b22\u4e50\u503c\uff0c\u7ed9\u51fa\u516c\u53f8\u6240\u6709\u4eba\u7684\u4e0a\u4e0b\u7ea7\u5173\u7cfb\uff0c\u6c42\u2f00\u4e2a\u9080\u8bf7\u2f45\u6848\uff0c\u4f7f\u6b22\u4e50\u503c\u7684\u548c\u6700\u2f24\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \u3002 \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6574\u6570\u8868\u793a \\(i\\) \u53f7\u5458\u5de5\u7684\u6b22\u4e50\u503c \\(H_i\\) \u3002 \u63a5\u4e0b\u6765 \\(n-1\\) \u884c\uff0c\u6bcf\u884c\u4e00\u5bf9\u6574\u6570 \\(l,k\\) \uff0c\u8868\u793a \\(l\\) \u53f7\u5458\u5de5\u662f \\(k\\) \u53f7\u5458\u5de5\u7684\u76f4\u63a5\u4e0a\u53f8\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6700\u5927\u6b22\u4e50\u503c\u4e4b\u548c\u3002 \u8f93\u5165\u6837\u4f8b 7 1 1 1 1 1 1 1 1 3 2 3 6 4 7 4 4 5 3 5 \u8f93\u51fa\u6837\u4f8b 5 \u6570\u636e\u8303\u56f4 \\(1\u2264n\u22646\u00d710^3,H_i\\in[-128,127),1\u2264l,k\u2264n\\) \u3002 \\(f[i,j]\\) \u8868\u793a\u4ece\u4ee5 \\(i\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u9080\u8bf7\u90e8\u5206\u804c\u5458\u53c2\u4f1a\u7684\u6700\u6b22\u4e50\u503c\u4e4b\u548c\uff0c\u5f53 \\(j=0\\) \u65f6 \\(i\\) \u53f7\u5458\u5de5\u4e0d\u53c2\u4f1a\uff0c \\(j=1\\) \u65f6\u53c2\u4f1a\u3002 \u82e5 \\(i\\) \u53f7\u5458\u5de5\u7684\u4e0b\u5c5e \\(v\\) \u4e0d\u53c2\u4f1a\uff0c\u5219\u603b\u6b22\u4e50\u503c\u4e3a \\(f[v,0]\\) \uff1b \u82e5 \\(i\\) \u53f7\u5458\u5de5\u7684\u4e0b\u5c5e \\(v\\) \u53c2\u4f1a\uff0c\u5219\u603b\u6b22\u4e50\u503c\u4e3a \\(f[v,1]\\) \u3002 \u663e\u7136\uff0c\u82e5 \\(i\\) \u53f7\u5458\u5de5\u53c2\u4f1a\uff0c\u4ed6\u7684\u76f4\u63a5\u4e0b\u5c5e\u5fc5\u4e0d\u6765\uff1a \\[f[i,1]=H_i+\\sum_{v\\in Son(i)}f[v,0]\\] \u82e5 \\(i\\) \u53f7\u5458\u5de5\u53c2\u4f1a\uff0c\u4ed6\u7684\u76f4\u63a5\u4e0b\u5c5e\u7231\u6765\u4e0d\u6765\uff1a \\[f[i,0]=\\sum_{v\\in Son(i)}\\max\\{f[v,0],f[v,1]\\}\\] Code void dfs ( int u ) { // \u6c42 u \u53f7\u5458\u5de5\u5bf9\u5e94\u7684 f[u][0] \u548c f[u][1] f [ u ][ 1 ] = h [ u ]; for ( v = u \u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 ) { dfs ( v ); f [ u ][ 1 ] += f [ v ][ 0 ]; f [ u ][ 0 ] += max ( f [ v ][ 0 ], f [ v ][ 1 ]); } } \u62d3\u5c55 $ \u6811\u4e0a\u80cc\u5305 DP $ \u5904\u7406\u67d0\u4e9b\u95ee\u9898\u65f6\uff0c\u9700\u8981\u7ed3\u5408\u6811\u5f62 DP \u548c \u80cc\u5305 DP \u7684\u601d\u60f3\u3002 Question \u9898\u76ee\u63cf\u8ff0 \u73b0\u6709 \\(n\\) \u95e8\u8bfe\u7a0b\uff0c\u7b2c \\(i\\) \u95e8\u8bfe\u7a0b\u7684\u5b66\u5206\u4e3a \\(s_i\\) \uff0c\u6bcf\u95e8\u8bfe\u7a0b\u6709 \\(0\\) \u6216 \\(1\\) \u95e8\u5148\u4fee\u8bfe\u3002\u6709\u5148\u4fee\u8bfe\u7684\u8bfe\u7a0b\u9700\u8981\u5148\u5b66\u5b8c\u5148\u4fee\u8bfe\uff0c\u624d\u80fd\u5b66\u4e60\u8be5\u8bfe\u7a0b\u3002\u6c42\u5b66\u4e60 \\(m\\) \u95e8\u8bfe\u7a0b\u80fd\u83b7\u5f97\u7684\u6700\u591a\u5b66\u5206\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n,m\\) \uff1b \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(k_i\\) \uff08\u8868\u793a\u7b2c \\(i\\) \u95e8\u8bfe\u7684\u5148\u4fee\u8bfe\uff0c \\(k_i=0\\) \u4ee3\u8868\u6ca1\u6709\u5148\u4fee\u8bfe\uff09\u548c \\(s_i\\) \uff08\u7b2c \\(i\\) \u95e8\u8bfe\u7684\u5b66\u5206\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5b66 \\(m\\) \u95e8\u8bfe\u7684\u6700\u5927\u5b66\u5206\u3002 \u8f93\u5165\u6837\u4f8b 7 4 2 2 0 1 0 4 2 1 7 1 7 6 2 2 \u8f93\u51fa\u6837\u4f8b 13 \u6570\u636e\u8303\u56f4 \\(1\u2264n,m\u2264300,1\u2264k_i\u2264n,1\u2264s_i\u226420\\) \u3002 \u5c06\u6bcf\u95e8\u8bfe\u7a0b\u770b\u4f5c\u6811\u4e2d\u7684\u8282\u70b9\uff0c\u5148\u4fee\u548c\u540e\u4fee\u7684\u5173\u7cfb\u7528\u6709\u5411\u8fb9\u63cf\u8ff0\uff0c\u5219\u672c\u9898\u7684\u8f93\u5165\u6837\u4f8b\u53ef\u4ee5\u7528\u6811\u5f62\u56fe\u8868\u793a\uff08 \\(a\u2192b\\) \u4ee3\u8868 \\(a\\) \u6bd4 \\(b\\) \u5148\u4fee\uff09\uff1a \u4e3a\u4e86\u65b9\u4fbf\u89e3\u51b3\u95ee\u9898\uff0c\u65b0\u589e \\(0\\) \u53f7\u8282\u70b9\uff0c\u4f7f\u5176\u6307\u5411\u6240\u6709\u65e0\u5148\u4fee\u8bfe\u7684\u8bfe\u7a0b\uff1a \\(f[u,j]\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\uff0c\u9009 \\(j\\) \u4e2a\u8282\u70b9\uff0c\u83b7\u5f97\u7684\u6700\u5927\u5b66\u5206\u3002 \\(dfs(u)\\) \u7684\u529f\u80fd\u662f\u7b97\u51fa\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u5206\u522b\u9009 \\(0\\sim m\\) \u4e2a\u8282\u70b9\u65f6\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5b66\u5206\u3002 \u6267\u884c \\(dfs(u)\\) \u65f6\uff0c\u679a\u4e3e \\(u\\) \u7684\u5b50\u8282\u70b9 \\(v\\) \uff0c\u5728\u5185\u5c42\u5faa\u73af\u679a\u4e3e\u9009\u53d6\u7684\u8282\u70b9\u6570 \\(j=m\u21921\\) \uff1a \u5c06 \\(j\\) \u4e2a\u8282\u70b9\u5206\u6210\u4e24\u7ec4\uff0c\u4e00\u7ec4 \\(k\\) \u4e2a\uff0c\u53e6\u4e00\u7ec4 \\(j-k\\) \u4e2a\uff1b \u5c06\u7b2c\u4e00\u7ec4 \\(k\\) \u4e2a\u8282\u70b9\u653e\u5728\u4ee5 \\(v\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u5b66\u5206\u4e3a \\(f[v][k]\\) \uff1b \u5c06\u7b2c\u4e8c\u7ec4 \\(j-k\\) \u4e2a\u8282\u70b9\u653e\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u4f46\u4e0d\u653e\u5728\u4ee5 \\(v\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u5b66\u5206\u4e3a \\(f[u][j-k]\\) \u3002 \\[ f[u,j]=\\max_{v\\in Son(u)}\\{f[u,j],f[u,j-k]+f[v,k]\\} \\] \u521d\u59cb\u6761\u4ef6 \\(f[i,1]=s[i]\\) \u6700\u7ec8\u7b54\u6848 \\(f[0,m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^3)\\) \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u6267\u884c \\(dfs(0)\\) \u540e\u8f93\u51fa \\(f[0,m]\\) \u5373\u53ef\u3002 Code void dfs ( int u ) { f [ u ][ 1 ] = s [ u ]; for ( int i = 0 ; i < g [ u ]. size (); i ++ ) { int v = g [ u ][ i ]; dfs ( v ); for ( int j = m ; j >= 1 ; j -- ) for ( int k = j - 1 ; k > 0 ; k -- ) f [ u ][ j ] = max ( f [ u ][ j ], f [ v ][ k ] + f [ u ][ j - k ]); } }","title":"\u6811\u5f62 DP"},{"location":"posts/basis/dp/tree/#_1","text":"\u6811\u5f62 DP \u5373\u5728\u6811\u4e0a\u8fdb\u884c\u7684 DP\uff0c\u4ee5\u300c\u8282\u70b9\u7684\u6df1\u5ea6\u300d\u4f5c\u4e3a DP \u7684\u300c\u9636\u6bb5\u300d\uff0c\u901a\u8fc7\u5b50\u8282\u70b9\u63a8\u51fa\u7236\u8282\u70b9\u7684\u6700\u4f18\u503c\u3002DP \u7684\u8fc7\u7a0b\u591a\u4f7f\u7528\u9012\u5f52\uff0c\u7c7b\u4f3c\u4e8e \u8bb0\u5fc6\u5316\u641c\u7d22 \u3002","title":"\u7b80\u4ecb"},{"location":"posts/basis/dp/tree/#_2","text":"Quote Freeze \u61d2\u5f97\u5199\u57fa\u672c\u539f\u7406\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e9b\u4f8b\u9898\u5df2\u7ecf\u4ee3\u8868\u4e86\u6811\u5f62 DP \u7684\u7cbe\u9ad3\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/basis/dp/tree/#_3","text":"","title":"\u4f8b\u9898"},{"location":"posts/basis/dp/tree/#_4","text":"Question \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u70b9\uff0c \\(m\\) \u6761\u8fb9\uff0c\u9876\u70b9\u7f16\u53f7\u4e3a \\(1\\sim n\\) \u7684\u65e0\u6743\u6811\uff0c \\(1\\) \u53f7\u8282\u70b9\u4e3a\u6839\u3002 \u8fdb\u884c \\(m\\) \u6b21\u8be2\u95ee\uff0c\u67e5\u8be2\u4ee5 \\(i\\) \u53f7\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6240\u5305\u542b\u7684\u8282\u70b9\u4e2a\u6570\uff08\u5b50\u6811\u5927\u5c0f\uff09\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u4ee3\u8868\u9876\u70b9\u6570\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e00\u5bf9\u6574\u6570 \\(l,k\\) \uff0c\u8868\u793a \\(l\\) \u662f \\(k\\) \u7684\u7236\u8282\u70b9\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(m\\) \uff0c\u4ee3\u8868\u8be2\u95ee\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be2\u95ee\u7684\u6839\u8282\u70b9\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u5e94\u6839\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3002 \u8f93\u5165\u6837\u4f8b 5 1 2 1 3 3 4 3 5 3 1 3 5 \u8f93\u51fa\u6837\u4f8b 5 2 0 \u6570\u636e\u8303\u56f4 \\(1\u2264n,m\u2264 10^5\\) \uff0c\u6240\u6709\u6570\u636e\u7686\u5728 \\(int\\) \u8303\u56f4\u5185\u3002 \\(f[i]\\) \u8868\u793a\u4ee5\u8282\u70b9 \\(i\\) \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff0c \\(Son(i)\\) \u8868\u793a \\(i\\) \u7684\u5b50\u8282\u70b9\u96c6\u5408\u3002\u6613\u77e5\uff1a \\[ f[i]=1+\\sum_{v\\in Son(i)}f[v] \\] \u7531\u4e8e \\(f[i]\\) \u7684\u503c\u7531 \\(i\\) \u7684\u5b50\u8282\u70b9 \\(v\\) \u63a8\u51fa\uff0c\u8ba1\u7b97\u987a\u5e8f\u5e94\u4e3a \\(f[\\) \u5b50\u8282\u70b9 \\(]\u2192f[\\) \u7236\u8282\u70b9]\u3002\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\uff0c\u4fbf\u4e8e\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u3002 Code void dfs ( int u ) { // \u6c42\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f f [ u ] = 1 ; for ( v = u \u7684\u6240\u6709\u5b50\u8282\u70b9 ) { dfs ( v ); f [ u ] += f [ v ]; } }","title":"\u5b50\u6811\u5927\u5c0f"},{"location":"posts/basis/dp/tree/#_5","text":"Question \u9898\u76ee\u63cf\u8ff0 \u516c\u53f8\u6709 \\(n\\) \u4e2a\u4eba\uff08\u7f16\u53f7 \\(1\\cdots n\\) \uff09\uff0c\u73b0\u8981\u4e3e\u2f8f\u2f00\u573a\u665a\u4f1a\uff0c\u5e76\u89c4\u5b9a\u5982\u679c\u9080\u8bf7\u4e86\u67d0\u4e2a\u2f08\uff0c\u90a3\u4e48\u2f00\u5b9a\u4e0d\u4f1a\u9080\u8bf7\u4ed6\u7684\u4e0a\u53f8\uff08\u4ed6\u4e0a\u53f8\u7684\u4e0a\u53f8\uff0c\u4e0a\u53f8\u7684\u4e0a\u53f8\u7684\u4e0a\u53f8 \\(\\cdots\\) \u90fd\u53ef\u4ee5\u9080\u8bf7\uff09\u3002 \u6bcf\u4e2a\u2f08\u90fd\u6709\u2f00\u4e2a\u6b22\u4e50\u503c\uff0c\u7ed9\u51fa\u516c\u53f8\u6240\u6709\u4eba\u7684\u4e0a\u4e0b\u7ea7\u5173\u7cfb\uff0c\u6c42\u2f00\u4e2a\u9080\u8bf7\u2f45\u6848\uff0c\u4f7f\u6b22\u4e50\u503c\u7684\u548c\u6700\u2f24\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \u3002 \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6574\u6570\u8868\u793a \\(i\\) \u53f7\u5458\u5de5\u7684\u6b22\u4e50\u503c \\(H_i\\) \u3002 \u63a5\u4e0b\u6765 \\(n-1\\) \u884c\uff0c\u6bcf\u884c\u4e00\u5bf9\u6574\u6570 \\(l,k\\) \uff0c\u8868\u793a \\(l\\) \u53f7\u5458\u5de5\u662f \\(k\\) \u53f7\u5458\u5de5\u7684\u76f4\u63a5\u4e0a\u53f8\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6700\u5927\u6b22\u4e50\u503c\u4e4b\u548c\u3002 \u8f93\u5165\u6837\u4f8b 7 1 1 1 1 1 1 1 1 3 2 3 6 4 7 4 4 5 3 5 \u8f93\u51fa\u6837\u4f8b 5 \u6570\u636e\u8303\u56f4 \\(1\u2264n\u22646\u00d710^3,H_i\\in[-128,127),1\u2264l,k\u2264n\\) \u3002 \\(f[i,j]\\) \u8868\u793a\u4ece\u4ee5 \\(i\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u9080\u8bf7\u90e8\u5206\u804c\u5458\u53c2\u4f1a\u7684\u6700\u6b22\u4e50\u503c\u4e4b\u548c\uff0c\u5f53 \\(j=0\\) \u65f6 \\(i\\) \u53f7\u5458\u5de5\u4e0d\u53c2\u4f1a\uff0c \\(j=1\\) \u65f6\u53c2\u4f1a\u3002 \u82e5 \\(i\\) \u53f7\u5458\u5de5\u7684\u4e0b\u5c5e \\(v\\) \u4e0d\u53c2\u4f1a\uff0c\u5219\u603b\u6b22\u4e50\u503c\u4e3a \\(f[v,0]\\) \uff1b \u82e5 \\(i\\) \u53f7\u5458\u5de5\u7684\u4e0b\u5c5e \\(v\\) \u53c2\u4f1a\uff0c\u5219\u603b\u6b22\u4e50\u503c\u4e3a \\(f[v,1]\\) \u3002 \u663e\u7136\uff0c\u82e5 \\(i\\) \u53f7\u5458\u5de5\u53c2\u4f1a\uff0c\u4ed6\u7684\u76f4\u63a5\u4e0b\u5c5e\u5fc5\u4e0d\u6765\uff1a \\[f[i,1]=H_i+\\sum_{v\\in Son(i)}f[v,0]\\] \u82e5 \\(i\\) \u53f7\u5458\u5de5\u53c2\u4f1a\uff0c\u4ed6\u7684\u76f4\u63a5\u4e0b\u5c5e\u7231\u6765\u4e0d\u6765\uff1a \\[f[i,0]=\\sum_{v\\in Son(i)}\\max\\{f[v,0],f[v,1]\\}\\] Code void dfs ( int u ) { // \u6c42 u \u53f7\u5458\u5de5\u5bf9\u5e94\u7684 f[u][0] \u548c f[u][1] f [ u ][ 1 ] = h [ u ]; for ( v = u \u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 ) { dfs ( v ); f [ u ][ 1 ] += f [ v ][ 0 ]; f [ u ][ 0 ] += max ( f [ v ][ 0 ], f [ v ][ 1 ]); } }","title":"\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a"},{"location":"posts/basis/dp/tree/#_6","text":"","title":"\u62d3\u5c55"},{"location":"posts/basis/dp/tree/#dp","text":"\u5904\u7406\u67d0\u4e9b\u95ee\u9898\u65f6\uff0c\u9700\u8981\u7ed3\u5408\u6811\u5f62 DP \u548c \u80cc\u5305 DP \u7684\u601d\u60f3\u3002 Question \u9898\u76ee\u63cf\u8ff0 \u73b0\u6709 \\(n\\) \u95e8\u8bfe\u7a0b\uff0c\u7b2c \\(i\\) \u95e8\u8bfe\u7a0b\u7684\u5b66\u5206\u4e3a \\(s_i\\) \uff0c\u6bcf\u95e8\u8bfe\u7a0b\u6709 \\(0\\) \u6216 \\(1\\) \u95e8\u5148\u4fee\u8bfe\u3002\u6709\u5148\u4fee\u8bfe\u7684\u8bfe\u7a0b\u9700\u8981\u5148\u5b66\u5b8c\u5148\u4fee\u8bfe\uff0c\u624d\u80fd\u5b66\u4e60\u8be5\u8bfe\u7a0b\u3002\u6c42\u5b66\u4e60 \\(m\\) \u95e8\u8bfe\u7a0b\u80fd\u83b7\u5f97\u7684\u6700\u591a\u5b66\u5206\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n,m\\) \uff1b \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(k_i\\) \uff08\u8868\u793a\u7b2c \\(i\\) \u95e8\u8bfe\u7684\u5148\u4fee\u8bfe\uff0c \\(k_i=0\\) \u4ee3\u8868\u6ca1\u6709\u5148\u4fee\u8bfe\uff09\u548c \\(s_i\\) \uff08\u7b2c \\(i\\) \u95e8\u8bfe\u7684\u5b66\u5206\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5b66 \\(m\\) \u95e8\u8bfe\u7684\u6700\u5927\u5b66\u5206\u3002 \u8f93\u5165\u6837\u4f8b 7 4 2 2 0 1 0 4 2 1 7 1 7 6 2 2 \u8f93\u51fa\u6837\u4f8b 13 \u6570\u636e\u8303\u56f4 \\(1\u2264n,m\u2264300,1\u2264k_i\u2264n,1\u2264s_i\u226420\\) \u3002 \u5c06\u6bcf\u95e8\u8bfe\u7a0b\u770b\u4f5c\u6811\u4e2d\u7684\u8282\u70b9\uff0c\u5148\u4fee\u548c\u540e\u4fee\u7684\u5173\u7cfb\u7528\u6709\u5411\u8fb9\u63cf\u8ff0\uff0c\u5219\u672c\u9898\u7684\u8f93\u5165\u6837\u4f8b\u53ef\u4ee5\u7528\u6811\u5f62\u56fe\u8868\u793a\uff08 \\(a\u2192b\\) \u4ee3\u8868 \\(a\\) \u6bd4 \\(b\\) \u5148\u4fee\uff09\uff1a \u4e3a\u4e86\u65b9\u4fbf\u89e3\u51b3\u95ee\u9898\uff0c\u65b0\u589e \\(0\\) \u53f7\u8282\u70b9\uff0c\u4f7f\u5176\u6307\u5411\u6240\u6709\u65e0\u5148\u4fee\u8bfe\u7684\u8bfe\u7a0b\uff1a \\(f[u,j]\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\uff0c\u9009 \\(j\\) \u4e2a\u8282\u70b9\uff0c\u83b7\u5f97\u7684\u6700\u5927\u5b66\u5206\u3002 \\(dfs(u)\\) \u7684\u529f\u80fd\u662f\u7b97\u51fa\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u5206\u522b\u9009 \\(0\\sim m\\) \u4e2a\u8282\u70b9\u65f6\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5b66\u5206\u3002 \u6267\u884c \\(dfs(u)\\) \u65f6\uff0c\u679a\u4e3e \\(u\\) \u7684\u5b50\u8282\u70b9 \\(v\\) \uff0c\u5728\u5185\u5c42\u5faa\u73af\u679a\u4e3e\u9009\u53d6\u7684\u8282\u70b9\u6570 \\(j=m\u21921\\) \uff1a \u5c06 \\(j\\) \u4e2a\u8282\u70b9\u5206\u6210\u4e24\u7ec4\uff0c\u4e00\u7ec4 \\(k\\) \u4e2a\uff0c\u53e6\u4e00\u7ec4 \\(j-k\\) \u4e2a\uff1b \u5c06\u7b2c\u4e00\u7ec4 \\(k\\) \u4e2a\u8282\u70b9\u653e\u5728\u4ee5 \\(v\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u5b66\u5206\u4e3a \\(f[v][k]\\) \uff1b \u5c06\u7b2c\u4e8c\u7ec4 \\(j-k\\) \u4e2a\u8282\u70b9\u653e\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u4f46\u4e0d\u653e\u5728\u4ee5 \\(v\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u5b66\u5206\u4e3a \\(f[u][j-k]\\) \u3002 \\[ f[u,j]=\\max_{v\\in Son(u)}\\{f[u,j],f[u,j-k]+f[v,k]\\} \\] \u521d\u59cb\u6761\u4ef6 \\(f[i,1]=s[i]\\) \u6700\u7ec8\u7b54\u6848 \\(f[0,m]\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^3)\\) \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u6267\u884c \\(dfs(0)\\) \u540e\u8f93\u51fa \\(f[0,m]\\) \u5373\u53ef\u3002 Code void dfs ( int u ) { f [ u ][ 1 ] = s [ u ]; for ( int i = 0 ; i < g [ u ]. size (); i ++ ) { int v = g [ u ][ i ]; dfs ( v ); for ( int j = m ; j >= 1 ; j -- ) for ( int k = j - 1 ; k > 0 ; k -- ) f [ u ][ j ] = max ( f [ u ][ j ], f [ v ][ k ] + f [ u ][ j - k ]); } }","title":"\u6811\u4e0a\u80cc\u5305 DP"},{"location":"posts/calculus/continuty/","text":"\u7b80\u4ecb $ \u76f4\u89c9\u4e0a\uff0c\u53ef\u4ee5\u4e00\u7b14\u753b\u51fa\u7684\u51fd\u6570\uff0c\u5982 \\(f(x)=x^2\\) \uff0c\u662f\u300c \u8fde\u7eed \u300d\u7684\u51fd\u6570\u3002\u4f46\u5bf9\u4e8e \\(\\displaystyle f(x)=\\frac{1}{x}\\) \uff0c\u5b83\u88ab \\(x=0\\) \u5904\u7684\u5782\u76f4\u6e10\u8fd1\u7ebf\u5206\u6210\u4e86\u4e24\u534a\uff0c\u9700\u8981\u4e24\u7b14\u753b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86\u5728 \\(x=0\\) \u5916\uff0c \\(\\displaystyle f(x)=\\frac{1}{x}\\) \u5904\u5904\u8fde\u7eed\u3002 \u5728\u4e00\u70b9\u5904\u8fde\u7eed $ \u82e5 \\(f(x)\\) \u5728 \\(x=a\\) \u5904\u8fde\u7eed\uff0c\u5219 \\(\\displaystyle\\lim_{x\u2192a}f(x)=f(a)\u2260\u00b1\u221e\\) \u3002\u4ee5\u4e0b\u4e09\u5219\u53cd\u4f8b\u5728 \\(x=a\\) \u5904\u7686\u4e0d\u8fde\u7eed\uff1a \u5728\u533a\u95f4\u5904\u8fde\u7eed $ \u82e5 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u8fde\u7eed\uff0c\u5219\uff1a \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u7684\u6bcf\u4e00\u70b9\u90fd\u8fde\u7eed\uff1b \\(f(x)\\) \u5728 \\(x=a\\) \u5904 \u53f3\u8fde\u7eed \uff0c\u5373 \\(\\displaystyle\\lim_{x\u2192a\\textcolor{red}{+}}f(x)=f(a)\u2260\u00b1\u221e\\) \uff1b \\(f(x)\\) \u5728 \\(x=b\\) \u5904 \u5de6\u8fde\u7eed \uff0c\u5373 \\(\\displaystyle\\lim_{x\u2192b\\textcolor{red}{-}}f(x)=f(b)\u2260\u00b1\u221e\\) \u3002 \u4ecb\u503c\u5b9a\u7406 $ \u82e5 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u8fde\u7eed\uff0c\u4e14 \\(f(a)>L,f(b)<L\\) \uff0c\u5219\u5b58\u5728 \\(c\\in(a,b)\\) \uff0c\u4f7f \\(f(c)=L\\) \u3002 \u5176\u6b63\u786e\u6027\u663e\u7136\u3002\u70b9 \\((a,f(a))\\) \u4e0e\u70b9 \\((b,f(b))\\) \u7684\u4efb\u610f\u8fde\u7ebf\uff08\u53ef\u4ee5\u662f\u968f\u673a\u66f2\u7ebf\uff09\u5fc5\u4e0e\u76f4\u7ebf \\(y=L\\) \u76f8\u4ea4\u3002 \u8fde\u7eed\u51fd\u6570\u6781\u503c $ \u82e5 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u8fde\u7eed\uff0c\u5219 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u6700\u5927\u503c\u548c\u4e00\u4e2a\u6700\u5c0f\u503c\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u5f53\u8303\u56f4\u662f\u5f00\u533a\u95f4 \\((a,b)\\) \u6216 \\(f(x)\\) \u4e0d\u8fde\u7eed\u65f6\u4f1a\u51fa\u5927\u95ee\u9898\uff1a \u5de6\u56fe\u5728 \\(x=a\\) \u548c \\(x=b\\) \u5904\u5f62\u6210\u4e86\u4e0d\u8fde\u7eed\u70b9\uff0c\u8be5\u51fd\u6570\u6ca1\u6709\u6700\u5927\u503c\u3002\u53f3\u56fe\u5728 \\(x=c\\) \u5904\u6ca1\u6709\u5b9a\u4e49\uff0c \\(f(c)\\) \u65e0\u610f\u4e49\uff0c\u540c\u6837\u4e0d\u5b58\u5728\u6700\u5927\u503c\u3002 \u5f53\u7136\uff0c\u5373\u4f7f\u662f\u95ed\u533a\u95f4\uff0c\u4e5f\u53ef\u80fd\u6709\u6781\u503c\u3002\u4f8b\u5982 \\(f(c)\\) \u548c \\(f(d)\\) \u5206\u522b\u662f \\(f(x)\\) \u5728 \\((a,b)\\) \u4e0a\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\uff1a","title":"\u8fde\u7eed"},{"location":"posts/calculus/continuty/#_1","text":"\u76f4\u89c9\u4e0a\uff0c\u53ef\u4ee5\u4e00\u7b14\u753b\u51fa\u7684\u51fd\u6570\uff0c\u5982 \\(f(x)=x^2\\) \uff0c\u662f\u300c \u8fde\u7eed \u300d\u7684\u51fd\u6570\u3002\u4f46\u5bf9\u4e8e \\(\\displaystyle f(x)=\\frac{1}{x}\\) \uff0c\u5b83\u88ab \\(x=0\\) \u5904\u7684\u5782\u76f4\u6e10\u8fd1\u7ebf\u5206\u6210\u4e86\u4e24\u534a\uff0c\u9700\u8981\u4e24\u7b14\u753b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86\u5728 \\(x=0\\) \u5916\uff0c \\(\\displaystyle f(x)=\\frac{1}{x}\\) \u5904\u5904\u8fde\u7eed\u3002","title":"\u7b80\u4ecb"},{"location":"posts/calculus/continuty/#_2","text":"\u82e5 \\(f(x)\\) \u5728 \\(x=a\\) \u5904\u8fde\u7eed\uff0c\u5219 \\(\\displaystyle\\lim_{x\u2192a}f(x)=f(a)\u2260\u00b1\u221e\\) \u3002\u4ee5\u4e0b\u4e09\u5219\u53cd\u4f8b\u5728 \\(x=a\\) \u5904\u7686\u4e0d\u8fde\u7eed\uff1a","title":"\u5728\u4e00\u70b9\u5904\u8fde\u7eed"},{"location":"posts/calculus/continuty/#_3","text":"\u82e5 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u8fde\u7eed\uff0c\u5219\uff1a \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u7684\u6bcf\u4e00\u70b9\u90fd\u8fde\u7eed\uff1b \\(f(x)\\) \u5728 \\(x=a\\) \u5904 \u53f3\u8fde\u7eed \uff0c\u5373 \\(\\displaystyle\\lim_{x\u2192a\\textcolor{red}{+}}f(x)=f(a)\u2260\u00b1\u221e\\) \uff1b \\(f(x)\\) \u5728 \\(x=b\\) \u5904 \u5de6\u8fde\u7eed \uff0c\u5373 \\(\\displaystyle\\lim_{x\u2192b\\textcolor{red}{-}}f(x)=f(b)\u2260\u00b1\u221e\\) \u3002","title":"\u5728\u533a\u95f4\u5904\u8fde\u7eed"},{"location":"posts/calculus/continuty/#_4","text":"\u82e5 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u8fde\u7eed\uff0c\u4e14 \\(f(a)>L,f(b)<L\\) \uff0c\u5219\u5b58\u5728 \\(c\\in(a,b)\\) \uff0c\u4f7f \\(f(c)=L\\) \u3002 \u5176\u6b63\u786e\u6027\u663e\u7136\u3002\u70b9 \\((a,f(a))\\) \u4e0e\u70b9 \\((b,f(b))\\) \u7684\u4efb\u610f\u8fde\u7ebf\uff08\u53ef\u4ee5\u662f\u968f\u673a\u66f2\u7ebf\uff09\u5fc5\u4e0e\u76f4\u7ebf \\(y=L\\) \u76f8\u4ea4\u3002","title":"\u4ecb\u503c\u5b9a\u7406"},{"location":"posts/calculus/continuty/#_5","text":"\u82e5 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u8fde\u7eed\uff0c\u5219 \\(f(x)\\) \u5728 \\([a,b]\\) \u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u6700\u5927\u503c\u548c\u4e00\u4e2a\u6700\u5c0f\u503c\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u5f53\u8303\u56f4\u662f\u5f00\u533a\u95f4 \\((a,b)\\) \u6216 \\(f(x)\\) \u4e0d\u8fde\u7eed\u65f6\u4f1a\u51fa\u5927\u95ee\u9898\uff1a \u5de6\u56fe\u5728 \\(x=a\\) \u548c \\(x=b\\) \u5904\u5f62\u6210\u4e86\u4e0d\u8fde\u7eed\u70b9\uff0c\u8be5\u51fd\u6570\u6ca1\u6709\u6700\u5927\u503c\u3002\u53f3\u56fe\u5728 \\(x=c\\) \u5904\u6ca1\u6709\u5b9a\u4e49\uff0c \\(f(c)\\) \u65e0\u610f\u4e49\uff0c\u540c\u6837\u4e0d\u5b58\u5728\u6700\u5927\u503c\u3002 \u5f53\u7136\uff0c\u5373\u4f7f\u662f\u95ed\u533a\u95f4\uff0c\u4e5f\u53ef\u80fd\u6709\u6781\u503c\u3002\u4f8b\u5982 \\(f(c)\\) \u548c \\(f(d)\\) \u5206\u522b\u662f \\(f(x)\\) \u5728 \\((a,b)\\) \u4e0a\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\uff1a","title":"\u8fde\u7eed\u51fd\u6570\u6781\u503c"},{"location":"posts/calculus/limit/","text":"\u6781\u9650\u7684\u4e25\u683c\u5b9a\u4e49 $ \u770b\u4e0d\u61c2\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u6570\u5217 \\({A_n}\\) \uff0c\u82e5\u5b58\u5728\u5e38\u6570 \\(a\\) \uff0c\u4f7f\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u6b63\u6570 \\(\\varepsilon\\) \uff0c\u603b\u5b58\u5728\u6b63\u6574\u6570 \\(N\\) \uff0c\u4f7f\u5f53 \\(n>N\\) \u65f6\uff0c\u6052\u6709 \\(|A_n-a|<\\varepsilon\\) \uff0c\u6570\u5217 \\({A_n}\\) \u7684\u6781\u9650\u4e3a \\(a\\) \uff0c\u8bb0\u4f5c \\(\\displaystyle\\lim_{n\u2192\u221e}x_n=a\\) \u3002 \u968f\u7740\u4e0b\u6807 \\(n\\) \u7684\u589e\u5927\uff0c \\(A_n\\) \u8d8a\u6765\u8d8a\u63a5\u8fd1\u5e38\u6570 \\(a\\) \uff0c\u5373\u5176\u4e0e \\(a\\) \u7684\u5dee\u503c \\(\\varepsilon\\) \u300c\u8981\u591a\u5c0f\u5c31\u591a\u5c0f\u300d 1 \u3002 \u51fd\u6570\u6781\u9650\u7684\u5b9a\u4e49\u4e0e\u6570\u5217\u76f8\u4f3c\uff0c\u4e0d\u591a\u9610\u8ff0\u3002 \u53cc\u4fa7\u6781\u9650 $ \u5728\u51fd\u6570 \\(f(x)=\\left\\{\\begin{aligned}&x-1,x\u22602\\\\&\\textcolor{red}{a},x=2\\end{aligned}\\right.\\) \u4e2d\uff0c \\(x\\) \u65e0\u9650\u63a5\u8fd1 \\(2\\) \u4f46\u4e0d\u7b49\u4e8e \\(2\\) \u65f6\uff0c \\(f(x)\\) \u65e0\u9650\u63a5\u8fd1\u4e8e \\(1\\) \u3002 \\(x\\) \\(1.9\\) \\(1.99\\) \\(1.999\\) \\(\\cdots\\) \\(\u21922\\) \\(f(x)\\) \\(0.9\\) \\(0.99\\) \\(0.999\\) \\(\\cdots\\) \\(\u21921\\) \u7b26\u53f7 \\(\u2192\\) \u8868\u793a\u300c\u65e0\u9650\u63a5\u8fd1\u300d\uff0c\u8bfb\u4f5c\u300c\u8d8b\u4e8e\u300d\u3002\u9ad8\u903c\u683c\u5199\u6cd5\uff1a \\[ \\lim_{x\u21922}f(x)=1 \\] \u8bfb\u4f5c\u300c \\(f(x)\\) \u5728 \\(x\\) \u8d8b\u4e8e \\(2\\) \u65f6\u7684\u53cc\u4fa7\u6781\u9650\u7b49\u4e8e \\(1\\) \u300d\u3002 Tip \u4e0d\u8bba\u5b9a\u4e49\u4e2d \\(\\textcolor{red}{a}\\) \u7684\u503c\u4e3a\u4f55\uff0c\u672c\u4f8b\u4e2d \\(\\displaystyle\\lim_{x\u21922}f(x)\\) \u59cb\u7ec8\u7b49\u4e8e \\(1\\) \u3002 \u300c\u65e0\u9650\u63a5\u8fd1\u300d\u5e76\u975e\u300c\u76f8\u7b49\u300d\u3002 \\(x\u21921\\) \u65f6 \\(x\u22601\\) \u3002 \u300c\u53cc\u4fa7\u6781\u9650\u300d\u53ef\u7b80\u8bfb\u4f5c\u300c\u6781\u9650\u300d\u3002 \u5de6\u53f3\u6781\u9650 $ \u8003\u8651\u51fd\u6570 \\(f(x)=\\left\\{\\begin{aligned}&-x+4,x<3\\\\&-x+2,x>3\\end{aligned}\\right.\\) \u7684\u56fe\u50cf\uff1a \\(\\displaystyle\\lim_{x\u21923}f(x)\\) \u662f\u7b49\u4e8e \\(1\\) \u8fd8\u662f \\(-1\\) \uff1f \u5f53 \\(x\\) \u4ece \\(-\u221e\\) \u9010\u6e10\u589e\u52a0\u5230 \\(\u21923\\) \u65f6\uff0c \\(f(x)\\) \u9010\u6e10\u63a5\u8fd1 \\(1\\) \uff0c\u5199\u4f5c \\(\\displaystyle\\lim_{x\u21923^-}f(x)=1\\) \uff1b \\(x\\) \\(2.9\\) \\(2.99\\) \\(2.999\\) \\(\\cdots\\) \\(\u21923\\) \\(f(x)\\) \\(1.1\\) \\(1.01\\) \\(1.001\\) \\(\\cdots\\) \\(\u21921\\) \u5f53 \\(x\\) \u4ece \\(+\u221e\\) \u9010\u6e10\u51cf\u5c11\u5230 \\(\u21923\\) \u65f6\uff0c \\(f(x)\\) \u9010\u6e10\u63a5\u8fd1 \\(-1\\) \uff0c\u5199\u4f5c \\(\\displaystyle\\lim_{x\u21923^+}f(x)=-1\\) \uff1b \\(x\\) \\(3.1\\) \\(3.01\\) \\(3.001\\) \\(\\cdots\\) \\(\u21923\\) \\(f(x)\\) \\(-1.1\\) \\(-1.01\\) \\(-1.001\\) \\(\\cdots\\) \\(\u2192-1\\) \u5176\u4e2d \\(\\displaystyle\\lim_{x\u21923^-}f(x)\\) \u548c \\(\\displaystyle\\lim_{x\u21923^+}f(x)\\) \u5206\u522b\u79f0\u4f5c\u300c \u5de6\u6781\u9650 \u300d\u548c\u300c \u53f3\u6781\u9650 \u300d\u3002 \u7531\u4e8e\u5de6\u53f3\u6781\u9650\u4e0d\u76f8\u7b49\uff0c\u53cc\u4fa7\u6781\u9650 \\(\\displaystyle\\lim_{x\u21923}f(x)\\) \u4e0d\u5b58\u5728\uff0c\u5199\u4f5c \\(\\displaystyle\\lim_{x\u21923}f(x) \\ \\rm DNE\\) \u3002 \u6e10\u8fd1\u7ebf $ \\(\\displaystyle f(x)=\\frac{1}{x},x\u22650\\) \u5728 \\(x=0\\) \u5904\u6709\u4e00\u6761\u5782\u76f4\u6e10\u8fd1\u7ebf\uff0c\u5728 \\(y=0\\) \u5904\u6709\u4e00\u6761\u6c34\u5e73\u6e10\u8fd1\u7ebf\u3002 \u968f\u7740 \\(y\\) \u7684\u589e\u5927\uff0c \\(f(x)\\) \u4e0e\u76f4\u7ebf \\(x=0\\) \u7684\u8ddd\u79bb\u8d8b\u8fd1\u4e8e \\(0\\) \uff1b \u968f\u7740 \\(x\\) \u7684\u589e\u5927\uff0c \\(f(x)\\) \u4e0e\u76f4\u7ebf \\(y=0\\) \u7684\u8ddd\u79bb\u8d8b\u8fd1\u4e8e \\(0\\) \u3002 \u6e10\u8fd1\u7ebf\u7684\u5b9a\u4e49\uff1a \\(\\displaystyle\\lim_{x\u2192a^-}f(x)\\) \u548c \\(\\displaystyle\\lim_{x\u2192a^+}f(x)\\) \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a \\(\u00b1\u221e\\Longleftrightarrow f(x)\\) \u5728 \\(x=a\\) \u5904\u6709 \u5782\u76f4\u6e10\u8fd1\u7ebf \uff1b \\(\\displaystyle\\lim_{x\u2192\u221e}f(x)=a\\Longleftrightarrow f(x)\\) \u5728 \\(y=a\\) \u5904\u6709 \u53f3\u4fa7\u6c34\u5e73\u6e10\u8fd1\u7ebf \uff1b \\(\\displaystyle\\lim_{x\u2192-\u221e}f(x)=a\\Longleftrightarrow f(x)\\) \u5728 \\(y=a\\) \u5904\u6709 \u5de6\u4fa7\u6c34\u5e73\u6e10\u8fd1\u7ebf \u3002 \u4e0d\u5b58\u5728\u6781\u9650 $ \u901a\u8fc7 \u5de6\u53f3\u6781\u9650 \u4e2d\u7684\u63a2\u7a76\u53ef\u5f97\u4e4b\uff1a \\[ \\lim_{x\u2192a^-}f(x)\u2260\\lim_{x\u2192a^+}f(x)\\Longrightarrow\\lim_{x\u2192a}f(x) \\ \\rm DNE \\] \u5373\u5f53\u5de6\u53f3\u6781\u9650\u4e0d\u76f8\u7b49\u65f6\uff0c\u4e0d\u5b58\u5728\u53cc\u4fa7\u6781\u9650\u3002\u4f8b\u5982 \\(\\displaystyle f(x)=\\frac{1}{x}\\) \u5728 \\(x\u21920\\) \u65f6\u6ca1\u6709\u6781\u9650\uff1a \\[ \\left.\\begin{aligned} &\\lim_{x\u21920^-}f(x)=-\u221e\\\\ &\\lim_{x\u21920^+}f(x)=+\u221e \\end{aligned}\\right\\} \\Longrightarrow\\lim_{x\u21920}f(x) \\ \\rm DNE \\] \u6b64\u5916\uff0c\u51fd\u6570\u5728 \u65e0\u9650\u9707\u8361 \u5904\u4e0d\u5b58\u5728\u53cc\u4fa7\u6781\u9650\u548c\u5de6\u53f3\u6781\u9650\u3002 \u65e0\u9650\u632f\u8361 $ \u8003\u8651 \\(\\displaystyle f(x)=\\sin(\\frac{1}{x})\\) \u7684\u56fe\u50cf\u3002 \u7531\u4e8e \\(\\sin(x)\\) \u5728 \\(x=\\pi,2\\pi,3\\pi,\\cdots\\) \u4e0a\u7684\u503c\u5168\u4e3a \\(0\\) \uff0c\u56e0\u800c \\(\\displaystyle\\sin(\\frac{1}{x})\\) \u5728 \\(\\displaystyle x=\\frac{1}{\\pi},\\frac{1}{2\\pi},\\frac{1}{3\\pi},\\cdots\\) \u4e0a\u5168\u4e3a \\(0\\) \u3002 \\(x\u21920\\) \u65f6\uff0c \\(f(x)\\) \u7684\u96f6\u70b9\u65e0\u9650\u5bc6\u96c6\u3002 \u56e0\u6b64 \\(\\displaystyle f(x)=\\sin(\\frac{1}{x})\\) \u7684\u56fe\u50cf\u5982\u4e0b\uff1a \u5f53 \\(|x|\\) \u4ece \\(\u221e\\) \u9010\u6e10\u51cf\u5c0f\u5230 \\(\u21920\\) \u65f6\uff0c \\(f(x)\\) \u7684\u503c\u5728 \\([-1,1]\\) \u4e4b\u95f4\u6765\u56de\u53d8\u5316\uff08 \u632f\u8361 \uff09\u7684\u5468\u671f\u9010\u6e10 \\(\u21920\\) \uff0c\u5728 \\(x=0\\) \u5904\u300c \u65e0\u9650\u632f\u8361 \u300d\uff0c\u7edd\u4e0d\u4f1a\u63a5\u8fd1\u4efb\u4f55\u7cbe\u786e\u503c\u3002\u6545 \\(f(x)\\) \u5728 \\(x=0\\) \u5904\u6ca1\u6709\u53cc\u4fa7\u6781\u9650\u53ca\u5de6\u53f3\u6781\u9650\u3002 \u5939\u903c\u5b9a\u7406 $ \u5982\u56fe\uff0c\u51fd\u6570 \\(f(x)\\) \u59cb\u7ec8\u5939\u5728 \\(g(x)\\) \u4e0e \\(h(x)\\) \u4e4b\u95f4\u3002\u5bf9\u4e8e\u5b9a\u4e49\u57df\u4e0a\u7684\u4efb\u610f \\(x\\) \uff0c \\(g(x)\u2264f(x)\u2264h(x)\\) \uff1a \u5f53 \\(x\u2192a\\) \u65f6\uff0c\u4e09\u4e2a\u51fd\u6570\u6781\u9650\u76f8\u540c\uff0c\u5373\uff1a \\[ \\left.\\begin{aligned} &\\lim_{x\u2192a}h(x)=L\\\\ &\\lim_{x\u2192a}g(x)=L \\end{aligned}\\right\\} \\Longrightarrow\\lim_{x\u2192a}f(x)=L \\] \u4f7f\u7528\u5939\u903c\u5b9a\u7406\u6c42 \\(\\displaystyle f(x)=x\\sin(\\frac{1}{x})\\) \u5728 \\(x\u21920\\) \u7684\u6781\u9650\u3002\u5982\u56fe\uff1a \\(\u2235\\displaystyle sin(\\frac{1}{x})\\in[-1,1]\\) \uff0c \\(\u2234\\displaystyle f(x)=x\\sin(\\frac{1}{x})\\in[-x,x]\\) \u3002 \u56e0\u800c \\(f(x)\\) \u59cb\u7ec8\u5939\u5728 \\(h(x)=x\\) \u548c \\(g(x)=-x\\) \u4e4b\u95f4\u3002\u6839\u636e\u5939\u903c\u5b9a\u7406\uff0c\u6709\uff1a \\[ \\left.\\begin{aligned} &\\lim_{x\u21920}h(x)=0\\\\ &\\lim_{x\u21920}g(x)=0 \\end{aligned}\\right\\} \\Longrightarrow\\lim_{x\u21920}f(x)=0 \\] \u6c42\u89e3\u6781\u9650 $ \u6781\u9650\u7684\u8fd0\u7b97\u6cd5\u5219 $ 1. \u52a0\u51cf\u5206\u914d\u5f8b $ \\[ \\displaystyle\\lim [f(x)\\pm g(x)]=\\lim f(x)\\pm \\lim g(x) \\] 2. \u4e58\u9664\u5206\u914d\u5f8b $ \\[ \\displaystyle\\lim [f(x)\u00b7g(x)]=\\lim f(x)\u00b7\\lim g(x) \\] \\[ \\displaystyle\\lim \\frac{f(x)}{g(x)}=\\frac{\\lim f(x)}{\\lim g(x)} \\] 3. \u5e38\u6570\u4e71\u653e\u5b9a\u5f8b $ \\[ \\displaystyle\\lim c\u00b7f(x)=c\\lim f(x) \\] \uff08 \\(c\\) \u4e3a\u5e38\u6570\uff09 4. \u6307\u6570\u4e71\u653e\u5b9a\u5f8b $ \\[ \\displaystyle\\lim f(x)^{n}=[\\lim f(x)]^n \\] \uff08 \\(n\\) \u4e3a\u5b9e\u6570\uff09 \u6709\u7406\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192a\uff09 $ 1. \u4ee3\u5165\u6cd5 $ \u5f53 \\(f(a)\\) \u6709\u610f\u4e49\u65f6\uff0c \\(\\displaystyle\\lim_{x\u2192a}f(x)=f(a)\\) \uff0c\u5373\u76f4\u63a5\u4ee3\u5165 \\(x=a\\) \u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u2192-1} \\frac{x^2-3x+2}{x-2}=\\frac{(-1)^2-3\u00b7(-1)+2}{-1-2}=-2 \\] Tip \u4ee3\u5165\u6cd5\u7684\u524d\u63d0\u662f \\(f(x)\\) \u8fde\u7eed\uff0c\u5728\u4e0b\u4e00\u7ae0\u4e2d\u5c06\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002 2. \u56e0\u5f0f\u5206\u89e3\u6cd5 $ \u6709\u65f6\u91c7\u53d6 \u4ee3\u5165\u6cd5 \u4f1a\u51fa\u5927\u95ee\u9898\uff0c\u4f8b\u5982\uff1a \\[ \\lim_{x\u21922}\\frac{x^2-3x+2}{x-2}=\\lim_{x\u21922}\\frac{2^2-3\u00b72+2}{2-2}=\\frac{0}{0} \\] \u5c06\u5f97\u5230\u5206\u6bcd\u4e3a \\(0\\) \u7684 \u4e0d\u5b9a\u5f0f \u3002\u6b64\u65f6\u53ef\u4ee5\u5c06\u5206\u5b50\u56e0\u5f0f\u5206\u89e3\uff0c\u518d\u628a\u5206\u6bcd\u7ea6\u6389\uff1a \\[ \\lim_{x\u21922}\\frac{x^2-3x+2}{x-2}=\\lim_{x\u21922}\\frac{(x-2)(x-1)}{x-2}=\\lim_{x\u21922}(x-1)=1 \\] Tip \u7531\u4e8e \\(x\u21922\\) \u5374\u4e0d\u7b49\u4e8e \\(2\\) \uff0c\u56e0\u6b64 \\(x-2\u22600\\) \uff0c\u5206\u5b50\u5206\u6bcd\u4e2d\u7684 \\(x-2\\) \u53ef\u4ee5\u540c\u65f6\u7ea6\u53bb\u3002 3. \u9694\u79bb\u6cd5 $ \u66f4\u591a\u65f6\u5019\uff0c\u4f7f\u7528 \u56e0\u5f0f\u5206\u89e3\u6cd5 \u65e0\u6cd5\u89e3\u51b3\u95ee\u9898\u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u21921}\\frac{2x^2-x-6}{x(x-1)^3}=\\lim_{x\u21921}\\frac{(x-2)(2x+3)}{x(x-1)^3} \\] \u5206\u6bcd\u4e2d\u7684 \\((x-1)^3\\) \u7ea6\u4e0d\u6389\uff0c\u5bfc\u81f4\u4ee3\u5165 \\(x=1\\) \u65f6\u5f97\u5230 \\(\\displaystyle\\frac{-5}{0}\\) \u3002\u9488\u5bf9\u8be5\u60c5\u51b5\u4f7f\u7528 \u9694\u79bb\u6cd5 \uff1a \u9996\u5148\u5c06\u5206\u5b50\u5206\u6bcd\u5206\u522b\u66ff\u6362\u4e3a\u51fd\u6570 \\(p(x)\\) \u548c \\(q(x)\\) \uff1a \\[ \\lim_{x\u21921}\\frac{p(x)}{q(x)}, \\ p(x)=2x^2-x-6, \\ q(x)=x(x-1)^3 \\] \u5355\u72ec\u5bf9 \\(p(x)\\) \u5206\u6790\uff1a \\(x\u21921\\) \u65f6\uff0c \\(p(x)\u21922\u00b71^2-1-6=-5\\) \u3002 \u5355\u72ec\u5bf9 \\(q(x)\\) \u5206\u6790\uff1a \u82e5 \\(x\u21921^-\\) \uff08 \\(x\\) \u7565\u5c0f\u4e8e 1\uff0c\u540c\u65f6\u65e0\u9650\u63a5\u8fd1 \\(1\\) \uff09\uff0c\u5219 \\(q(x)\\) \u4e3a \\(\u21920\\) \u7684\u8d1f\u6570\uff1b \u82e5 \\(x\u21921^+\\) \uff08 \\(x\\) \u7565\u5927\u4e8e 1\uff0c\u540c\u65f6\u65e0\u9650\u63a5\u8fd1 \\(1\\) \uff09\uff0c\u5219 \\(q(x)\\) \u4e3a \\(\u21920\\) \u7684\u6b63\u6570\u3002 \u663e\u7136\uff0c\u5206\u6bcd\u7684\u7edd\u5bf9\u503c\u6781\u5c0f\u65f6\uff0c\u5206\u5f0f\u7684\u7edd\u5bf9\u503c\u6781\u5927\u3002\u56e0\u6b64\uff1a \\[\\lim_{x\u21921^-}\\frac{p(x)}{q(x)}=\u221e, \\ \\lim_{x\u21921^+}\\frac{p(x)}{q(x)}=-\u221e\\] \u7531\u4e8e\u5de6\u53f3\u6781\u9650\u4e0d\u76f8\u7b49\uff0c\u6545\u4e0d\u5b58\u5728\u53cc\u4fa7\u6781\u9650\uff1a \\[\\lim_{x\u21921}\\frac{2x^2-x-6}{x(x-1)^3} \\ \\rm DNE\\] Tip \u82e5\u4f7f\u7528 \u4ee3\u5165\u6cd5 \u5f97\u5230\u7684\u4e0d\u5b9a\u5f0f\u5206\u5b50\u4e3a \\(0\\) \uff0c\u624d\u53ef\u4f7f\u7528 \u56e0\u5f0f\u5206\u89e3\u6cd5 \u3002 \u6709\u7406\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192\u221e\uff09 $ 1. \u5355\u9879\u5f0f\u7684\u6781\u9650 $ \u8fd9\u4e2a\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002 \\[ \\lim_{x\u2192\u221e}k\u00b7x^b=k\u00b7\u221e^b=\u221e,k>0,b>0 \\] 2. \u591a\u9879\u5f0f\u7684\u6781\u9650 $ Info \u91cd\u8981\u6027\u8d28\uff1a \\(\\displaystyle\\frac{1}{\u221e}=0\\) \u3002 \u4e00\u4e2a\u4e0d\u4e25\u8c28\u7684\u7406\u89e3\u65b9\u5f0f\uff1a\u957f\u5ea6\u4e3a \\(1\\) \u7684\u7ebf\u6bb5\u4e0a\u6709 \\(\u221e\\) \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u957f\u5ea6\u4e3a \\(0\\) \uff0c\u6545 \\(\\displaystyle\\frac{1}{\u221e}=0\\) \u3002 \u82e5\u5173\u4e8e \\(x\\) \u7684\u51fd\u6570 \\(p(x)\\) \u591a\u4e8e\u4e00\u9879\uff0c\u628a\u5b83\u4ee3\u4ee5\uff1a \\[ \\frac{p(x)}{p_L(x)}\u00b7p_L(x) \\] \u5176\u4e2d \\(p_L(x)\\) \u662f \\(p(x)\\) \u7684\u6700\u9ad8\u6b21\u9879\u3002\u518d\u7ed3\u5408\u91cd\u8981\u6027\u8d28 \\(\\displaystyle\\frac{1}{\u221e}=0\\) \u8fdb\u884c\u6c42\u89e3\u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u2192\u221e}(x^2-7)=\\lim_{x\u2192\u221e}(\\frac{x^2-7}{x^2}\u00b7x^2)=\\lim_{x\u2192\u221e}[(1-\\frac{7}{x^2})\u00b7x^2]=(1-\\frac{7}{\u221e^2})\u00b7\u221e=\u221e \\] 3. \u5206\u5f0f\u7684\u6781\u9650 $ \u7c7b\u4f3c\u4e8e \u591a\u9879\u5f0f\u7684\u6781\u9650 \uff0c\u5bf9\u5206\u5b50\u548c\u5206\u6bcd\u5206\u522b\u9664\u4ee5\u6b21\u9879\uff0c\u518d\u4e58\u56de\u53bb\u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u2192\u221e}\\frac{2x+3}{x^2-7}=\\lim_{x\u2192\u221e}\\frac{\\displaystyle\\frac{2x+3}{2x}\u00b72x}{\\displaystyle\\frac{x^2-7}{x^2}\u00b7x^2}=\\lim_{x\u2192\u221e}(\\displaystyle\\frac{1+\\displaystyle\\frac{3}{2x}}{1-\\displaystyle\\frac{7}{x^2}}\u00b7\\frac{2x}{x^2})=\\frac{1+0}{1-0}\u00b7\\frac{2}{\u221e}=0 \\] \u5e26\u6839\u53f7\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192a\uff09 $ \u8003\u8651\u6781\u9650\uff1a \\[\\lim_{x\u21925}\\frac{\\sqrt{x^2-9}-4}{x-5}\\] \u82e5\u4ee3\u5165 \\(x=5\\) \uff0c\u5c06\u5f97\u5230 \\(\\displaystyle\\frac{0}{0}\\) \u578b\u7684\u4e0d\u5b9a\u5f0f\u3002\u76f4\u63a5\u56e0\u5f0f\u5206\u89e3\u4e5f\u4e0d\u7ba1\u7528\u3002 \u5b9a\u4e49 \\(\\sqrt{a}+b\\) \u7684 \u5171\u8f6d\u8868\u8fbe\u5f0f \u4e3a \\(\\sqrt{a}-b\\) \uff0c\u5b83\u4eec\u7684\u4e58\u79ef \\((\\sqrt{a}+b)(\\sqrt{a}-b)=a-b^2\\) \u4e3a\u6709\u7406\u6570\u3002\u5c1d\u8bd5\u5c06\u5206\u5b50\u5206\u6bcd\u540c\u65f6\u4e58\u4ee5 \\(\\sqrt{x^2-9}-4\\) \u7684\u5171\u8f6d\u8868\u8fbe\u5f0f\uff0c\u5373 \\(\\sqrt{x^2-9}+4\\) \uff1a \\[ \\lim_{x\u21925}\\frac{\\sqrt{x^2-9}-4}{x-5}=\\lim_{x\u21925}\\frac{(\\sqrt{x^2-9}-4)}{(x-5)}\u00b7\\frac{(\\sqrt{x^2-9}+4)}{(\\sqrt{x^2-9}+4)}=\\lim_{x\u21925}\\frac{x^2-25}{(x-5)(\\sqrt{x^2-9}+4)} \\\\ \\] \u5c06 \\(x^2-25\\) \u5206\u89e3\u4e3a \\((x+5)(x-5)\\) \u5e76\u7ea6\u6389\u5206\u5b50\u5206\u6bcd\u7684\u516c\u56e0\u5b50\uff1a \\[ \\lim_{x\u21925}\\frac{(x+5)(x-5)}{(x-5)(\\sqrt{x^2-9}+4)}=\\lim_{x\u21925}\\frac{x+5}{\\sqrt{x^2-9}+4} \\] \u73b0\u5728\u53ef\u4ee5\u4ee3\u5165 \\(x=5\\) \uff1a \\[ \\frac{5+5}{\\sqrt{5^2-9}+4}=\\frac{5}{4} \\] \u6b64\u505a\u6cd5\u6709\u6982\u7387\u80fd\u5c06\u5206\u6bcd\u4e2d\u4ee3\u5165\u540e\u4e3a \\(0\\) \u7684\u90e8\u5206\u6d88\u6389\uff0c\u4f7f\u5f97\u4ee3\u5165\u6cd5\u53ef\u884c\u3002 \u5e26\u6839\u53f7\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192\u221e\uff09 $ \u8003\u8651\u6781\u9650\uff1a \\[ \\lim_{x\u2192\u221e}\\frac{\\sqrt{16x^4+8}+3x}{2x^2+6x+1} \\] \u5206\u6bcd\u662f\u4e00\u4e2a\u6700\u9ad8\u6b21\u9879\u4e3a \\(2x^2\\) \u7684\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5\u4ee3\u4ee5\uff1a \\[ \\frac{2x^2+6x-1}{2x^2}\u00b72x^2=(1+\\frac{3}{x}+\\frac{1}{2x^2})\u00b72x^2 \\] \u5206\u5b50\u600e\u4e48\u529e\u5462\uff1f\u6839\u53f7\u4e2d\u7684\u591a\u9879\u5f0f\u4e3a \\(16x^4+8\\) \uff0c\u5b83\u7684\u6700\u9ad8\u6b21\u9879\u4e3a \\(16x^4\\) \u3002\u5bf9\u5176\u53d6\u5e73\u65b9\u6839\u5f97\u5230 \\(4x^2\\) \uff0c\u518d\u4ee3\u4ee5\uff1a \\[ \\frac{\\sqrt{16x^4+8}+3x}{4x^2}\u00b74x^2=(\\frac{\\sqrt{16x^4+8}}{4x^2}+\\frac{3x}{4x^2})\u00b74x^2=(\\sqrt{\\frac{16x^4+8}{16x^4}}+\\frac{3}{4x})\u00b74x^2 \\] \\[ =(\\sqrt{1+\\frac{8}{16x^4}}+\\frac{3}{4x})\u00b74x^2 \\] \u6700\u540e\u5c06\u6240\u6709\u8868\u8fbe\u5f0f\u4ee3\u5165\u539f\u5f0f\uff1a \\[ \\lim_{x\u2192\u221e}\\frac{\\sqrt{16x^4+8}+3x}{2x^2+6x+1}=\\lim_{x\u2192\u221e}\\frac{(\\sqrt{1+\\displaystyle\\frac{8}{16x^4}}+\\displaystyle\\frac{3}{4x})\u00b74x^2}{(1+\\displaystyle\\frac{3}{x}+\\frac{1}{2x^2})\u00b72x^2}=\\lim_{x\u2192\u221e}\\frac{\\sqrt{1+\\displaystyle\\frac{8}{16x^4}}+\\displaystyle\\frac{3}{4x}}{(1+\\displaystyle\\frac{3}{x}+\\frac{1}{2x^2})}\u00b72 \\] \\[ =\\frac{\\sqrt{1+0}+0}{1+0+0}\u00b72=2 \\] \u8fd9\u662f\u725b\u987f\u539f\u8bdd\u3002 \u21a9","title":"\u6781\u9650"},{"location":"posts/calculus/limit/#_1","text":"\u770b\u4e0d\u61c2\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u6570\u5217 \\({A_n}\\) \uff0c\u82e5\u5b58\u5728\u5e38\u6570 \\(a\\) \uff0c\u4f7f\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u6b63\u6570 \\(\\varepsilon\\) \uff0c\u603b\u5b58\u5728\u6b63\u6574\u6570 \\(N\\) \uff0c\u4f7f\u5f53 \\(n>N\\) \u65f6\uff0c\u6052\u6709 \\(|A_n-a|<\\varepsilon\\) \uff0c\u6570\u5217 \\({A_n}\\) \u7684\u6781\u9650\u4e3a \\(a\\) \uff0c\u8bb0\u4f5c \\(\\displaystyle\\lim_{n\u2192\u221e}x_n=a\\) \u3002 \u968f\u7740\u4e0b\u6807 \\(n\\) \u7684\u589e\u5927\uff0c \\(A_n\\) \u8d8a\u6765\u8d8a\u63a5\u8fd1\u5e38\u6570 \\(a\\) \uff0c\u5373\u5176\u4e0e \\(a\\) \u7684\u5dee\u503c \\(\\varepsilon\\) \u300c\u8981\u591a\u5c0f\u5c31\u591a\u5c0f\u300d 1 \u3002 \u51fd\u6570\u6781\u9650\u7684\u5b9a\u4e49\u4e0e\u6570\u5217\u76f8\u4f3c\uff0c\u4e0d\u591a\u9610\u8ff0\u3002","title":"\u6781\u9650\u7684\u4e25\u683c\u5b9a\u4e49"},{"location":"posts/calculus/limit/#_2","text":"\u5728\u51fd\u6570 \\(f(x)=\\left\\{\\begin{aligned}&x-1,x\u22602\\\\&\\textcolor{red}{a},x=2\\end{aligned}\\right.\\) \u4e2d\uff0c \\(x\\) \u65e0\u9650\u63a5\u8fd1 \\(2\\) \u4f46\u4e0d\u7b49\u4e8e \\(2\\) \u65f6\uff0c \\(f(x)\\) \u65e0\u9650\u63a5\u8fd1\u4e8e \\(1\\) \u3002 \\(x\\) \\(1.9\\) \\(1.99\\) \\(1.999\\) \\(\\cdots\\) \\(\u21922\\) \\(f(x)\\) \\(0.9\\) \\(0.99\\) \\(0.999\\) \\(\\cdots\\) \\(\u21921\\) \u7b26\u53f7 \\(\u2192\\) \u8868\u793a\u300c\u65e0\u9650\u63a5\u8fd1\u300d\uff0c\u8bfb\u4f5c\u300c\u8d8b\u4e8e\u300d\u3002\u9ad8\u903c\u683c\u5199\u6cd5\uff1a \\[ \\lim_{x\u21922}f(x)=1 \\] \u8bfb\u4f5c\u300c \\(f(x)\\) \u5728 \\(x\\) \u8d8b\u4e8e \\(2\\) \u65f6\u7684\u53cc\u4fa7\u6781\u9650\u7b49\u4e8e \\(1\\) \u300d\u3002 Tip \u4e0d\u8bba\u5b9a\u4e49\u4e2d \\(\\textcolor{red}{a}\\) \u7684\u503c\u4e3a\u4f55\uff0c\u672c\u4f8b\u4e2d \\(\\displaystyle\\lim_{x\u21922}f(x)\\) \u59cb\u7ec8\u7b49\u4e8e \\(1\\) \u3002 \u300c\u65e0\u9650\u63a5\u8fd1\u300d\u5e76\u975e\u300c\u76f8\u7b49\u300d\u3002 \\(x\u21921\\) \u65f6 \\(x\u22601\\) \u3002 \u300c\u53cc\u4fa7\u6781\u9650\u300d\u53ef\u7b80\u8bfb\u4f5c\u300c\u6781\u9650\u300d\u3002","title":"\u53cc\u4fa7\u6781\u9650"},{"location":"posts/calculus/limit/#_3","text":"\u8003\u8651\u51fd\u6570 \\(f(x)=\\left\\{\\begin{aligned}&-x+4,x<3\\\\&-x+2,x>3\\end{aligned}\\right.\\) \u7684\u56fe\u50cf\uff1a \\(\\displaystyle\\lim_{x\u21923}f(x)\\) \u662f\u7b49\u4e8e \\(1\\) \u8fd8\u662f \\(-1\\) \uff1f \u5f53 \\(x\\) \u4ece \\(-\u221e\\) \u9010\u6e10\u589e\u52a0\u5230 \\(\u21923\\) \u65f6\uff0c \\(f(x)\\) \u9010\u6e10\u63a5\u8fd1 \\(1\\) \uff0c\u5199\u4f5c \\(\\displaystyle\\lim_{x\u21923^-}f(x)=1\\) \uff1b \\(x\\) \\(2.9\\) \\(2.99\\) \\(2.999\\) \\(\\cdots\\) \\(\u21923\\) \\(f(x)\\) \\(1.1\\) \\(1.01\\) \\(1.001\\) \\(\\cdots\\) \\(\u21921\\) \u5f53 \\(x\\) \u4ece \\(+\u221e\\) \u9010\u6e10\u51cf\u5c11\u5230 \\(\u21923\\) \u65f6\uff0c \\(f(x)\\) \u9010\u6e10\u63a5\u8fd1 \\(-1\\) \uff0c\u5199\u4f5c \\(\\displaystyle\\lim_{x\u21923^+}f(x)=-1\\) \uff1b \\(x\\) \\(3.1\\) \\(3.01\\) \\(3.001\\) \\(\\cdots\\) \\(\u21923\\) \\(f(x)\\) \\(-1.1\\) \\(-1.01\\) \\(-1.001\\) \\(\\cdots\\) \\(\u2192-1\\) \u5176\u4e2d \\(\\displaystyle\\lim_{x\u21923^-}f(x)\\) \u548c \\(\\displaystyle\\lim_{x\u21923^+}f(x)\\) \u5206\u522b\u79f0\u4f5c\u300c \u5de6\u6781\u9650 \u300d\u548c\u300c \u53f3\u6781\u9650 \u300d\u3002 \u7531\u4e8e\u5de6\u53f3\u6781\u9650\u4e0d\u76f8\u7b49\uff0c\u53cc\u4fa7\u6781\u9650 \\(\\displaystyle\\lim_{x\u21923}f(x)\\) \u4e0d\u5b58\u5728\uff0c\u5199\u4f5c \\(\\displaystyle\\lim_{x\u21923}f(x) \\ \\rm DNE\\) \u3002","title":"\u5de6\u53f3\u6781\u9650"},{"location":"posts/calculus/limit/#_4","text":"\\(\\displaystyle f(x)=\\frac{1}{x},x\u22650\\) \u5728 \\(x=0\\) \u5904\u6709\u4e00\u6761\u5782\u76f4\u6e10\u8fd1\u7ebf\uff0c\u5728 \\(y=0\\) \u5904\u6709\u4e00\u6761\u6c34\u5e73\u6e10\u8fd1\u7ebf\u3002 \u968f\u7740 \\(y\\) \u7684\u589e\u5927\uff0c \\(f(x)\\) \u4e0e\u76f4\u7ebf \\(x=0\\) \u7684\u8ddd\u79bb\u8d8b\u8fd1\u4e8e \\(0\\) \uff1b \u968f\u7740 \\(x\\) \u7684\u589e\u5927\uff0c \\(f(x)\\) \u4e0e\u76f4\u7ebf \\(y=0\\) \u7684\u8ddd\u79bb\u8d8b\u8fd1\u4e8e \\(0\\) \u3002 \u6e10\u8fd1\u7ebf\u7684\u5b9a\u4e49\uff1a \\(\\displaystyle\\lim_{x\u2192a^-}f(x)\\) \u548c \\(\\displaystyle\\lim_{x\u2192a^+}f(x)\\) \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a \\(\u00b1\u221e\\Longleftrightarrow f(x)\\) \u5728 \\(x=a\\) \u5904\u6709 \u5782\u76f4\u6e10\u8fd1\u7ebf \uff1b \\(\\displaystyle\\lim_{x\u2192\u221e}f(x)=a\\Longleftrightarrow f(x)\\) \u5728 \\(y=a\\) \u5904\u6709 \u53f3\u4fa7\u6c34\u5e73\u6e10\u8fd1\u7ebf \uff1b \\(\\displaystyle\\lim_{x\u2192-\u221e}f(x)=a\\Longleftrightarrow f(x)\\) \u5728 \\(y=a\\) \u5904\u6709 \u5de6\u4fa7\u6c34\u5e73\u6e10\u8fd1\u7ebf \u3002","title":"\u6e10\u8fd1\u7ebf"},{"location":"posts/calculus/limit/#_5","text":"\u901a\u8fc7 \u5de6\u53f3\u6781\u9650 \u4e2d\u7684\u63a2\u7a76\u53ef\u5f97\u4e4b\uff1a \\[ \\lim_{x\u2192a^-}f(x)\u2260\\lim_{x\u2192a^+}f(x)\\Longrightarrow\\lim_{x\u2192a}f(x) \\ \\rm DNE \\] \u5373\u5f53\u5de6\u53f3\u6781\u9650\u4e0d\u76f8\u7b49\u65f6\uff0c\u4e0d\u5b58\u5728\u53cc\u4fa7\u6781\u9650\u3002\u4f8b\u5982 \\(\\displaystyle f(x)=\\frac{1}{x}\\) \u5728 \\(x\u21920\\) \u65f6\u6ca1\u6709\u6781\u9650\uff1a \\[ \\left.\\begin{aligned} &\\lim_{x\u21920^-}f(x)=-\u221e\\\\ &\\lim_{x\u21920^+}f(x)=+\u221e \\end{aligned}\\right\\} \\Longrightarrow\\lim_{x\u21920}f(x) \\ \\rm DNE \\] \u6b64\u5916\uff0c\u51fd\u6570\u5728 \u65e0\u9650\u9707\u8361 \u5904\u4e0d\u5b58\u5728\u53cc\u4fa7\u6781\u9650\u548c\u5de6\u53f3\u6781\u9650\u3002","title":"\u4e0d\u5b58\u5728\u6781\u9650"},{"location":"posts/calculus/limit/#_6","text":"\u8003\u8651 \\(\\displaystyle f(x)=\\sin(\\frac{1}{x})\\) \u7684\u56fe\u50cf\u3002 \u7531\u4e8e \\(\\sin(x)\\) \u5728 \\(x=\\pi,2\\pi,3\\pi,\\cdots\\) \u4e0a\u7684\u503c\u5168\u4e3a \\(0\\) \uff0c\u56e0\u800c \\(\\displaystyle\\sin(\\frac{1}{x})\\) \u5728 \\(\\displaystyle x=\\frac{1}{\\pi},\\frac{1}{2\\pi},\\frac{1}{3\\pi},\\cdots\\) \u4e0a\u5168\u4e3a \\(0\\) \u3002 \\(x\u21920\\) \u65f6\uff0c \\(f(x)\\) \u7684\u96f6\u70b9\u65e0\u9650\u5bc6\u96c6\u3002 \u56e0\u6b64 \\(\\displaystyle f(x)=\\sin(\\frac{1}{x})\\) \u7684\u56fe\u50cf\u5982\u4e0b\uff1a \u5f53 \\(|x|\\) \u4ece \\(\u221e\\) \u9010\u6e10\u51cf\u5c0f\u5230 \\(\u21920\\) \u65f6\uff0c \\(f(x)\\) \u7684\u503c\u5728 \\([-1,1]\\) \u4e4b\u95f4\u6765\u56de\u53d8\u5316\uff08 \u632f\u8361 \uff09\u7684\u5468\u671f\u9010\u6e10 \\(\u21920\\) \uff0c\u5728 \\(x=0\\) \u5904\u300c \u65e0\u9650\u632f\u8361 \u300d\uff0c\u7edd\u4e0d\u4f1a\u63a5\u8fd1\u4efb\u4f55\u7cbe\u786e\u503c\u3002\u6545 \\(f(x)\\) \u5728 \\(x=0\\) \u5904\u6ca1\u6709\u53cc\u4fa7\u6781\u9650\u53ca\u5de6\u53f3\u6781\u9650\u3002","title":"\u65e0\u9650\u632f\u8361"},{"location":"posts/calculus/limit/#_7","text":"\u5982\u56fe\uff0c\u51fd\u6570 \\(f(x)\\) \u59cb\u7ec8\u5939\u5728 \\(g(x)\\) \u4e0e \\(h(x)\\) \u4e4b\u95f4\u3002\u5bf9\u4e8e\u5b9a\u4e49\u57df\u4e0a\u7684\u4efb\u610f \\(x\\) \uff0c \\(g(x)\u2264f(x)\u2264h(x)\\) \uff1a \u5f53 \\(x\u2192a\\) \u65f6\uff0c\u4e09\u4e2a\u51fd\u6570\u6781\u9650\u76f8\u540c\uff0c\u5373\uff1a \\[ \\left.\\begin{aligned} &\\lim_{x\u2192a}h(x)=L\\\\ &\\lim_{x\u2192a}g(x)=L \\end{aligned}\\right\\} \\Longrightarrow\\lim_{x\u2192a}f(x)=L \\] \u4f7f\u7528\u5939\u903c\u5b9a\u7406\u6c42 \\(\\displaystyle f(x)=x\\sin(\\frac{1}{x})\\) \u5728 \\(x\u21920\\) \u7684\u6781\u9650\u3002\u5982\u56fe\uff1a \\(\u2235\\displaystyle sin(\\frac{1}{x})\\in[-1,1]\\) \uff0c \\(\u2234\\displaystyle f(x)=x\\sin(\\frac{1}{x})\\in[-x,x]\\) \u3002 \u56e0\u800c \\(f(x)\\) \u59cb\u7ec8\u5939\u5728 \\(h(x)=x\\) \u548c \\(g(x)=-x\\) \u4e4b\u95f4\u3002\u6839\u636e\u5939\u903c\u5b9a\u7406\uff0c\u6709\uff1a \\[ \\left.\\begin{aligned} &\\lim_{x\u21920}h(x)=0\\\\ &\\lim_{x\u21920}g(x)=0 \\end{aligned}\\right\\} \\Longrightarrow\\lim_{x\u21920}f(x)=0 \\]","title":"\u5939\u903c\u5b9a\u7406"},{"location":"posts/calculus/limit/#_8","text":"","title":"\u6c42\u89e3\u6781\u9650"},{"location":"posts/calculus/limit/#_9","text":"","title":"\u6781\u9650\u7684\u8fd0\u7b97\u6cd5\u5219"},{"location":"posts/calculus/limit/#1","text":"\\[ \\displaystyle\\lim [f(x)\\pm g(x)]=\\lim f(x)\\pm \\lim g(x) \\]","title":"1. \u52a0\u51cf\u5206\u914d\u5f8b"},{"location":"posts/calculus/limit/#2","text":"\\[ \\displaystyle\\lim [f(x)\u00b7g(x)]=\\lim f(x)\u00b7\\lim g(x) \\] \\[ \\displaystyle\\lim \\frac{f(x)}{g(x)}=\\frac{\\lim f(x)}{\\lim g(x)} \\]","title":"2. \u4e58\u9664\u5206\u914d\u5f8b"},{"location":"posts/calculus/limit/#3","text":"\\[ \\displaystyle\\lim c\u00b7f(x)=c\\lim f(x) \\] \uff08 \\(c\\) \u4e3a\u5e38\u6570\uff09","title":"3. \u5e38\u6570\u4e71\u653e\u5b9a\u5f8b"},{"location":"posts/calculus/limit/#4","text":"\\[ \\displaystyle\\lim f(x)^{n}=[\\lim f(x)]^n \\] \uff08 \\(n\\) \u4e3a\u5b9e\u6570\uff09","title":"4. \u6307\u6570\u4e71\u653e\u5b9a\u5f8b"},{"location":"posts/calculus/limit/#xa","text":"","title":"\u6709\u7406\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192a\uff09"},{"location":"posts/calculus/limit/#1_1","text":"\u5f53 \\(f(a)\\) \u6709\u610f\u4e49\u65f6\uff0c \\(\\displaystyle\\lim_{x\u2192a}f(x)=f(a)\\) \uff0c\u5373\u76f4\u63a5\u4ee3\u5165 \\(x=a\\) \u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u2192-1} \\frac{x^2-3x+2}{x-2}=\\frac{(-1)^2-3\u00b7(-1)+2}{-1-2}=-2 \\] Tip \u4ee3\u5165\u6cd5\u7684\u524d\u63d0\u662f \\(f(x)\\) \u8fde\u7eed\uff0c\u5728\u4e0b\u4e00\u7ae0\u4e2d\u5c06\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002","title":"1. \u4ee3\u5165\u6cd5"},{"location":"posts/calculus/limit/#2_1","text":"\u6709\u65f6\u91c7\u53d6 \u4ee3\u5165\u6cd5 \u4f1a\u51fa\u5927\u95ee\u9898\uff0c\u4f8b\u5982\uff1a \\[ \\lim_{x\u21922}\\frac{x^2-3x+2}{x-2}=\\lim_{x\u21922}\\frac{2^2-3\u00b72+2}{2-2}=\\frac{0}{0} \\] \u5c06\u5f97\u5230\u5206\u6bcd\u4e3a \\(0\\) \u7684 \u4e0d\u5b9a\u5f0f \u3002\u6b64\u65f6\u53ef\u4ee5\u5c06\u5206\u5b50\u56e0\u5f0f\u5206\u89e3\uff0c\u518d\u628a\u5206\u6bcd\u7ea6\u6389\uff1a \\[ \\lim_{x\u21922}\\frac{x^2-3x+2}{x-2}=\\lim_{x\u21922}\\frac{(x-2)(x-1)}{x-2}=\\lim_{x\u21922}(x-1)=1 \\] Tip \u7531\u4e8e \\(x\u21922\\) \u5374\u4e0d\u7b49\u4e8e \\(2\\) \uff0c\u56e0\u6b64 \\(x-2\u22600\\) \uff0c\u5206\u5b50\u5206\u6bcd\u4e2d\u7684 \\(x-2\\) \u53ef\u4ee5\u540c\u65f6\u7ea6\u53bb\u3002","title":"2. \u56e0\u5f0f\u5206\u89e3\u6cd5"},{"location":"posts/calculus/limit/#3_1","text":"\u66f4\u591a\u65f6\u5019\uff0c\u4f7f\u7528 \u56e0\u5f0f\u5206\u89e3\u6cd5 \u65e0\u6cd5\u89e3\u51b3\u95ee\u9898\u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u21921}\\frac{2x^2-x-6}{x(x-1)^3}=\\lim_{x\u21921}\\frac{(x-2)(2x+3)}{x(x-1)^3} \\] \u5206\u6bcd\u4e2d\u7684 \\((x-1)^3\\) \u7ea6\u4e0d\u6389\uff0c\u5bfc\u81f4\u4ee3\u5165 \\(x=1\\) \u65f6\u5f97\u5230 \\(\\displaystyle\\frac{-5}{0}\\) \u3002\u9488\u5bf9\u8be5\u60c5\u51b5\u4f7f\u7528 \u9694\u79bb\u6cd5 \uff1a \u9996\u5148\u5c06\u5206\u5b50\u5206\u6bcd\u5206\u522b\u66ff\u6362\u4e3a\u51fd\u6570 \\(p(x)\\) \u548c \\(q(x)\\) \uff1a \\[ \\lim_{x\u21921}\\frac{p(x)}{q(x)}, \\ p(x)=2x^2-x-6, \\ q(x)=x(x-1)^3 \\] \u5355\u72ec\u5bf9 \\(p(x)\\) \u5206\u6790\uff1a \\(x\u21921\\) \u65f6\uff0c \\(p(x)\u21922\u00b71^2-1-6=-5\\) \u3002 \u5355\u72ec\u5bf9 \\(q(x)\\) \u5206\u6790\uff1a \u82e5 \\(x\u21921^-\\) \uff08 \\(x\\) \u7565\u5c0f\u4e8e 1\uff0c\u540c\u65f6\u65e0\u9650\u63a5\u8fd1 \\(1\\) \uff09\uff0c\u5219 \\(q(x)\\) \u4e3a \\(\u21920\\) \u7684\u8d1f\u6570\uff1b \u82e5 \\(x\u21921^+\\) \uff08 \\(x\\) \u7565\u5927\u4e8e 1\uff0c\u540c\u65f6\u65e0\u9650\u63a5\u8fd1 \\(1\\) \uff09\uff0c\u5219 \\(q(x)\\) \u4e3a \\(\u21920\\) \u7684\u6b63\u6570\u3002 \u663e\u7136\uff0c\u5206\u6bcd\u7684\u7edd\u5bf9\u503c\u6781\u5c0f\u65f6\uff0c\u5206\u5f0f\u7684\u7edd\u5bf9\u503c\u6781\u5927\u3002\u56e0\u6b64\uff1a \\[\\lim_{x\u21921^-}\\frac{p(x)}{q(x)}=\u221e, \\ \\lim_{x\u21921^+}\\frac{p(x)}{q(x)}=-\u221e\\] \u7531\u4e8e\u5de6\u53f3\u6781\u9650\u4e0d\u76f8\u7b49\uff0c\u6545\u4e0d\u5b58\u5728\u53cc\u4fa7\u6781\u9650\uff1a \\[\\lim_{x\u21921}\\frac{2x^2-x-6}{x(x-1)^3} \\ \\rm DNE\\] Tip \u82e5\u4f7f\u7528 \u4ee3\u5165\u6cd5 \u5f97\u5230\u7684\u4e0d\u5b9a\u5f0f\u5206\u5b50\u4e3a \\(0\\) \uff0c\u624d\u53ef\u4f7f\u7528 \u56e0\u5f0f\u5206\u89e3\u6cd5 \u3002","title":"3. \u9694\u79bb\u6cd5"},{"location":"posts/calculus/limit/#x","text":"","title":"\u6709\u7406\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192\u221e\uff09"},{"location":"posts/calculus/limit/#1_2","text":"\u8fd9\u4e2a\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002 \\[ \\lim_{x\u2192\u221e}k\u00b7x^b=k\u00b7\u221e^b=\u221e,k>0,b>0 \\]","title":"1. \u5355\u9879\u5f0f\u7684\u6781\u9650"},{"location":"posts/calculus/limit/#2_2","text":"Info \u91cd\u8981\u6027\u8d28\uff1a \\(\\displaystyle\\frac{1}{\u221e}=0\\) \u3002 \u4e00\u4e2a\u4e0d\u4e25\u8c28\u7684\u7406\u89e3\u65b9\u5f0f\uff1a\u957f\u5ea6\u4e3a \\(1\\) \u7684\u7ebf\u6bb5\u4e0a\u6709 \\(\u221e\\) \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u957f\u5ea6\u4e3a \\(0\\) \uff0c\u6545 \\(\\displaystyle\\frac{1}{\u221e}=0\\) \u3002 \u82e5\u5173\u4e8e \\(x\\) \u7684\u51fd\u6570 \\(p(x)\\) \u591a\u4e8e\u4e00\u9879\uff0c\u628a\u5b83\u4ee3\u4ee5\uff1a \\[ \\frac{p(x)}{p_L(x)}\u00b7p_L(x) \\] \u5176\u4e2d \\(p_L(x)\\) \u662f \\(p(x)\\) \u7684\u6700\u9ad8\u6b21\u9879\u3002\u518d\u7ed3\u5408\u91cd\u8981\u6027\u8d28 \\(\\displaystyle\\frac{1}{\u221e}=0\\) \u8fdb\u884c\u6c42\u89e3\u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u2192\u221e}(x^2-7)=\\lim_{x\u2192\u221e}(\\frac{x^2-7}{x^2}\u00b7x^2)=\\lim_{x\u2192\u221e}[(1-\\frac{7}{x^2})\u00b7x^2]=(1-\\frac{7}{\u221e^2})\u00b7\u221e=\u221e \\]","title":"2. \u591a\u9879\u5f0f\u7684\u6781\u9650"},{"location":"posts/calculus/limit/#3_2","text":"\u7c7b\u4f3c\u4e8e \u591a\u9879\u5f0f\u7684\u6781\u9650 \uff0c\u5bf9\u5206\u5b50\u548c\u5206\u6bcd\u5206\u522b\u9664\u4ee5\u6b21\u9879\uff0c\u518d\u4e58\u56de\u53bb\u3002\u4f8b\u5982\uff1a \\[ \\lim_{x\u2192\u221e}\\frac{2x+3}{x^2-7}=\\lim_{x\u2192\u221e}\\frac{\\displaystyle\\frac{2x+3}{2x}\u00b72x}{\\displaystyle\\frac{x^2-7}{x^2}\u00b7x^2}=\\lim_{x\u2192\u221e}(\\displaystyle\\frac{1+\\displaystyle\\frac{3}{2x}}{1-\\displaystyle\\frac{7}{x^2}}\u00b7\\frac{2x}{x^2})=\\frac{1+0}{1-0}\u00b7\\frac{2}{\u221e}=0 \\]","title":"3. \u5206\u5f0f\u7684\u6781\u9650"},{"location":"posts/calculus/limit/#xa_1","text":"\u8003\u8651\u6781\u9650\uff1a \\[\\lim_{x\u21925}\\frac{\\sqrt{x^2-9}-4}{x-5}\\] \u82e5\u4ee3\u5165 \\(x=5\\) \uff0c\u5c06\u5f97\u5230 \\(\\displaystyle\\frac{0}{0}\\) \u578b\u7684\u4e0d\u5b9a\u5f0f\u3002\u76f4\u63a5\u56e0\u5f0f\u5206\u89e3\u4e5f\u4e0d\u7ba1\u7528\u3002 \u5b9a\u4e49 \\(\\sqrt{a}+b\\) \u7684 \u5171\u8f6d\u8868\u8fbe\u5f0f \u4e3a \\(\\sqrt{a}-b\\) \uff0c\u5b83\u4eec\u7684\u4e58\u79ef \\((\\sqrt{a}+b)(\\sqrt{a}-b)=a-b^2\\) \u4e3a\u6709\u7406\u6570\u3002\u5c1d\u8bd5\u5c06\u5206\u5b50\u5206\u6bcd\u540c\u65f6\u4e58\u4ee5 \\(\\sqrt{x^2-9}-4\\) \u7684\u5171\u8f6d\u8868\u8fbe\u5f0f\uff0c\u5373 \\(\\sqrt{x^2-9}+4\\) \uff1a \\[ \\lim_{x\u21925}\\frac{\\sqrt{x^2-9}-4}{x-5}=\\lim_{x\u21925}\\frac{(\\sqrt{x^2-9}-4)}{(x-5)}\u00b7\\frac{(\\sqrt{x^2-9}+4)}{(\\sqrt{x^2-9}+4)}=\\lim_{x\u21925}\\frac{x^2-25}{(x-5)(\\sqrt{x^2-9}+4)} \\\\ \\] \u5c06 \\(x^2-25\\) \u5206\u89e3\u4e3a \\((x+5)(x-5)\\) \u5e76\u7ea6\u6389\u5206\u5b50\u5206\u6bcd\u7684\u516c\u56e0\u5b50\uff1a \\[ \\lim_{x\u21925}\\frac{(x+5)(x-5)}{(x-5)(\\sqrt{x^2-9}+4)}=\\lim_{x\u21925}\\frac{x+5}{\\sqrt{x^2-9}+4} \\] \u73b0\u5728\u53ef\u4ee5\u4ee3\u5165 \\(x=5\\) \uff1a \\[ \\frac{5+5}{\\sqrt{5^2-9}+4}=\\frac{5}{4} \\] \u6b64\u505a\u6cd5\u6709\u6982\u7387\u80fd\u5c06\u5206\u6bcd\u4e2d\u4ee3\u5165\u540e\u4e3a \\(0\\) \u7684\u90e8\u5206\u6d88\u6389\uff0c\u4f7f\u5f97\u4ee3\u5165\u6cd5\u53ef\u884c\u3002","title":"\u5e26\u6839\u53f7\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192a\uff09"},{"location":"posts/calculus/limit/#x_1","text":"\u8003\u8651\u6781\u9650\uff1a \\[ \\lim_{x\u2192\u221e}\\frac{\\sqrt{16x^4+8}+3x}{2x^2+6x+1} \\] \u5206\u6bcd\u662f\u4e00\u4e2a\u6700\u9ad8\u6b21\u9879\u4e3a \\(2x^2\\) \u7684\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5\u4ee3\u4ee5\uff1a \\[ \\frac{2x^2+6x-1}{2x^2}\u00b72x^2=(1+\\frac{3}{x}+\\frac{1}{2x^2})\u00b72x^2 \\] \u5206\u5b50\u600e\u4e48\u529e\u5462\uff1f\u6839\u53f7\u4e2d\u7684\u591a\u9879\u5f0f\u4e3a \\(16x^4+8\\) \uff0c\u5b83\u7684\u6700\u9ad8\u6b21\u9879\u4e3a \\(16x^4\\) \u3002\u5bf9\u5176\u53d6\u5e73\u65b9\u6839\u5f97\u5230 \\(4x^2\\) \uff0c\u518d\u4ee3\u4ee5\uff1a \\[ \\frac{\\sqrt{16x^4+8}+3x}{4x^2}\u00b74x^2=(\\frac{\\sqrt{16x^4+8}}{4x^2}+\\frac{3x}{4x^2})\u00b74x^2=(\\sqrt{\\frac{16x^4+8}{16x^4}}+\\frac{3}{4x})\u00b74x^2 \\] \\[ =(\\sqrt{1+\\frac{8}{16x^4}}+\\frac{3}{4x})\u00b74x^2 \\] \u6700\u540e\u5c06\u6240\u6709\u8868\u8fbe\u5f0f\u4ee3\u5165\u539f\u5f0f\uff1a \\[ \\lim_{x\u2192\u221e}\\frac{\\sqrt{16x^4+8}+3x}{2x^2+6x+1}=\\lim_{x\u2192\u221e}\\frac{(\\sqrt{1+\\displaystyle\\frac{8}{16x^4}}+\\displaystyle\\frac{3}{4x})\u00b74x^2}{(1+\\displaystyle\\frac{3}{x}+\\frac{1}{2x^2})\u00b72x^2}=\\lim_{x\u2192\u221e}\\frac{\\sqrt{1+\\displaystyle\\frac{8}{16x^4}}+\\displaystyle\\frac{3}{4x}}{(1+\\displaystyle\\frac{3}{x}+\\frac{1}{2x^2})}\u00b72 \\] \\[ =\\frac{\\sqrt{1+0}+0}{1+0+0}\u00b72=2 \\] \u8fd9\u662f\u725b\u987f\u539f\u8bdd\u3002 \u21a9","title":"\u5e26\u6839\u53f7\u51fd\u6570\u7684\u6781\u9650\uff08x\u2192\u221e\uff09"},{"location":"posts/ds/STL/","text":"\u7b80\u4ecb $ STL \uff08 Standard Template Library \u6807\u51c6\u6a21\u677f\u5e93\uff09\u662f\u4e00\u5957\u529f\u80fd\u5f3a\u5927\u7684 C++ \u6a21\u677f\u7c7b\u548c\u51fd\u6570\uff0c\u8fd9\u4e9b\u6a21\u677f\u7c7b\u548c\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u591a\u79cd\u6d41\u884c\u548c\u5e38\u7528\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u3002 C++ \u6807\u51c6\u6a21\u677f\u5e93\u7684\u6838\u5fc3\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u7ec4\u4ef6\uff1a \u7ec4\u4ef6 \u63cf\u8ff0 \u5bb9\u5668 Containers \u5bb9\u5668\u7528\u4e8e\u50a8\u5b58\u67d0\u4e00\u7c7b\u5bf9\u8c61\u3002 \u7b97\u6cd5 Algorithms \u7b97\u6cd5\u4f5c\u7528\u4e8e\u5bb9\u5668\u3002 STL \u63d0\u4f9b\u4e86\u5404\u79cd\u64cd\u4f5c\u65b9\u5f0f\uff0c\u5305\u62ec\u521d\u59cb\u5316\u3001\u6392\u5e8f\u3001\u641c\u7d22\u548c\u8f6c\u6362\u7b49\u3002 \u8fed\u4ee3\u5668 Iterators \u8fed\u4ee3\u5668\u7528\u4e8e\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\u4ef6\uff0c\u6309\u7167\u4ee5\u4e0b\u5206\u7ec4\u5c55\u5f00\u4ecb\u7ecd\uff1a \u5206\u7ec4 \u5185\u5bb9 \u5206\u7ec4 \u5185\u5bb9 Define \u5934\u6587\u4ef6\u3001\u5b9a\u4e49\u3001\u521d\u59cb\u5316 Capacity \u5185\u5b58\u64cd\u4f5c Access \u5143\u7d20\u8bbf\u95ee Modifiers \u5143\u7d20\u589e\u6539 Operations \u4f18\u5316\u529f\u80fd Code \u793a\u4f8b\u7a0b\u5e8f Warning \u4f7f\u7528 STL \u9700\u8981\u9ed8\u8ba4\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u3002 using namespace std ; \u5bb9\u5668\uff08Containers\uff09 $ \u5bb9\u5668\u7684\u529f\u80fd\u8f83\u6570\u7ec4\u66f4\u52a0\u5f3a\u5927\uff0c\u4e14 STL \u63d0\u4f9b\u4e86\u5bb9\u5668\u7684\u914d\u5957\u7b97\u6cd5\u3002 Vector $ Vector \u5bb9\u5668\u76f8\u5f53\u4e8e\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u6570\u7ec4\u3002 \u652f\u6301\u4ece\u672b\u7aef\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff1b \u652f\u6301\u8bbf\u95ee\u3001\u66f4\u6539\u4efb\u610f\u4f4d\u7f6e\u7684\u5143\u7d20\uff1b \u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff08\u6548\u7387\u8f83\u6162\uff09\u3002 Define #include <vector> \u5934\u6587\u4ef6 vector<type> vec \u521b\u5efa\u7a7a\u5bb9\u5668 vec \uff0c\u7528\u4e8e\u5b58\u653e type \u7c7b\u5143\u7d20 vector<type> vec(n) \u521b\u5efa\u5305\u542b n \u4e2a type \u7c7b\u5143\u7d20\u7684\u5bb9\u5668 vec \uff08\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u4e3a 0 \uff09 vector<type> vec(n, val) \u521b\u5efa\u5305\u542b n \u4e2a type \u7c7b\u5143\u7d20\u7684\u5bb9\u5668 vec \uff0c\u5143\u7d20\u503c\u4e3a val Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 resize(n) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u5bb9\u5668\u5305\u542b n \u4e2a\u5143\u7d20 resize(n, val) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u5bb9\u5668\u5305\u542b n \u4e2a\u5143\u7d20\uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a val clear() \u6e05\u7a7a\u5bb9\u5668 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access operator [pos] \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff08 pos \u4ece 0 \u8bb0\u8d77\uff09 at(pos) \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c back() \u8fd4\u56de\u672b\u7aef\u5143\u7d20\u7684\u503c Modifiers assign(n, val) \u6e05\u7a7a\u5bb9\u5668\uff0c\u5e76\u6dfb\u52a0 n \u4e2a val push_back(x) \u5728\u672b\u7aef\u63d2\u5165 x pop_back() \u5220\u9664\u672b\u7aef\u5143\u7d20 insert(pos, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 x insert(pos, n, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 n \u4e2a x erase(pos) \u5220\u9664 pos \u4f4d\u7f6e\u7684\u5143\u7d20 Code #include <iostream> #include <vector> using namespace std ; int main () { vector < int > vec ( 3 , 5 ); // \u521b\u5efa int \u7c7b\u7684\u5bb9\u5668\uff0c\u5e76\u6dfb\u52a0 3 \u4e2a 5 /* \u5f53\u524d vec = {5, 5, 5} */ for ( int i = 0 ; i < 5 ; i ++ ) vec . push_back ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d vec = {5, 5, 5, 0, 1, 2, 3, 4} */ vec [ 2 ] = 10 ; // \u5c06\u7b2c 2 \u4e2a\u5143\u7d20\u66f4\u6539\u4e3a 10\uff08\u4e0b\u6807\u4ece 0 \u8bb0\u8d77\uff09 /* \u5f53\u524d vec = {5, 5, 10, 0, 1, 2, 3, 4} */ cout << vec . size () << endl ; // \u8f93\u51fa\u5143\u7d20\u4e2a\u6570 for ( int i = 0 ; i < vec . size (); i ++ ) cout << vec [ i ] << ' ' ; // \u8f93\u51fa vec \u7684\u7b2c i \u4e2a\u5143\u7d20 return 0 ; } output: 8 5 5 10 0 1 2 3 4 Vector<Bool> $ Vector<Bool> \u5728 Vector \u7684\u57fa\u7840\u4e0a\uff0c\u989d\u5916\u652f\u6301\u53d6\u53cd\u64cd\u4f5c\uff08 true \u53d8 false \uff0c false \u53d8 true \uff09\u3002 Define #include <vector> \u5934\u6587\u4ef6 vector<bool> vec \u521b\u5efa\u5b58\u50a8 bool \u7c7b\u5143\u7d20\u7684\u7a7a\u5bb9\u5668 Modifiers flip() \u5168\u90e8\u53d6\u53cd flip(pos) \u5c06\u7b2c pos \u4f4d\u53d6\u53cd Code #include <bits/stdc++.h> using namespace std ; const int arr [] = { 0 , 1 , 0 , 0 , 1 , 0 }; int main () { vector < bool > vec ; for ( int i = 0 ; i < 6 ; i ++ ) vec . push_back ( arr [ i ]); vec . flip (); // \u5168\u90e8\u53d6\u53cd for ( int i = 0 ; i < 6 ; i ++ ) cout << vec [ i ] << ' ' ; return 0 ; } output: 1 0 1 1 0 1 Queue $ Queue \u961f\u5217\u3002 \u652f\u6301\u4ece\u672b\u7aef\u63d2\u5165\u5143\u7d20\uff0c\u4ece\u524d\u7aef\u63d0\u53d6\u5143\u7d20\uff1b \u53ea\u80fd\u8bbf\u95ee\u524d\u7aef\u548c\u672b\u7aef\u5143\u7d20\u3002 Define #include <queue> \u5934\u6587\u4ef6 queue<type> que \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u7a7a\u961f\u5217 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access back() \u8fd4\u56de\u672b\u7aef\u5143\u7d20\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c Modifiers push(val) \u5728\u672b\u7aef\u63d2\u5165 val pop() \u5220\u9664\u524d\u7aef\u5143\u7d20 Code #include <iostream> #include <queue> using namespace std ; int main () { queue < int > que ; // \u521b\u5efa int \u7c7b\u7684\u961f\u5217 for ( int i = 0 ; i < 5 ; i ++ ) que . push ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d que = {0, 1, 2, 3, 4} */ cout << que . front () << ' ' << que . back () << endl ; // \u8f93\u51fa\u524d\u7aef\u548c\u672b\u7aef\u5143\u7d20 que . pop (); // \u5220\u9664\u524d\u7aef\u5143\u7d20 /* \u5f53\u524d que = {1, 2, 3, 4} */ cout << que . front (); // \u8f93\u51fa\u524d\u7aef\u5143\u7d20 return 0 ; } output: 0 4 1 Priority Queue $ Priority Queue \u662f\u57fa\u4e8e Queue \u7684\u4f18\u5148\u961f\u5217\u3002 \u7ef4\u62a4\u524d\u7aef\u5143\u7d20\u5728\u961f\u5217\u4e2d\u59cb\u7ec8\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\uff1b \u4ec5\u652f\u6301\u8bbf\u95ee\u524d\u7aef\u5143\u7d20\u3002 Define #include <queue> \u5934\u6587\u4ef6 priority_queue<type> que \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u4f18\u5148\u961f\u5217\uff08\u9ed8\u8ba4\u524d\u7aef\u6700\u5927\uff09 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access top() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c Modifiers push(val) \u5728\u63d2\u5165 val pop() \u5220\u9664\u524d\u7aef\u5143\u7d20 Code #include <iostream> #include <queue> using namespace std ; const int arr [] = { 4 , 1 , 2 , 5 , 3 , 6 }; int main () { priority_queue < int > que ; // \u521b\u5efa\u4f18\u5148\u961f\u5217\uff08\u9ed8\u8ba4\u524d\u7aef\u6700\u5927\uff09 priority_queue < int , vector < int > , greater < int > > min_que ; // \u524d\u7aef\u59cb\u7ec8\u6700\u5c0f priority_queue < int , vector < int > , less < int > > max_que ; // \u524d\u7aef\u59cb\u7ec8\u6700\u5927 for ( int i = 0 ; i < 6 ; i ++ ) { min_que . push ( arr [ i ]); max_que . push ( arr [ i ]); // \u5c06 arr[i] \u63d2\u5165\u961f\u5217 } cout << min_que . top () << endl ; // \u8f93\u51fa\u961f\u5217\u6700\u5c0f\u5143\u7d20 cout << max_que . top () << endl ; // \u8f93\u51fa\u961f\u5217\u6700\u5927\u5143\u7d20 min_que . pop (); max_que . pop (); // \u5220\u9664\u961f\u5217\u524d\u7aef\u5143\u7d20 cout << min_que . top () << endl ; cout << max_que . top () << endl ; return 0 ; } output: 1 6 2 5 Deque $ Deque \u53cc\u5411\u961f\u5217\u76f8\u5f53\u4e8e Vector \u7684\u5347\u7ea7\u7248\u3002 \u652f\u6301\u4ece\u4e24\u7aef\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff1b \u652f\u6301\u8bbf\u95ee\u3001\u66f4\u6539\u4efb\u610f\u4f4d\u7f6e\u7684\u5143\u7d20\uff08\u6548\u7387\u8f83 Vector \u7a0d\u6162\uff09\uff1b \u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff08\u6548\u7387\u8f83\u6162\uff09\u3002 Define #include <deque> \u5934\u6587\u4ef6 deque<type> q \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u53cc\u5411\u961f\u5217 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 resize(n) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u961f\u5217\u5305\u542b n \u4e2a\u5143\u7d20 resize(n, val) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u961f\u5217\u5305\u542b n \u4e2a\u5143\u7d20\uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a val clear() \u6e05\u7a7a\u5bb9\u5668 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access operator [pos] \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff08 pos \u4ece 0 \u8bb0\u8d77\uff09 at(pos) \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c back() \u8fd4\u56de\u672b\u7aef\u5143\u7d20\u7684\u503c Modifiers assign(n, val) \u6e05\u7a7a\u5bb9\u5668\uff0c\u5e76\u6dfb\u52a0 n \u4e2a val push_front(x) \u5728\u524d\u7aef\u63d2\u5165 x push_back(x) \u5728\u672b\u7aef\u63d2\u5165 x pop_front() \u5220\u9664\u524d\u7aef\u5143\u7d20 pop_back() \u5220\u9664\u672b\u7aef\u5143\u7d20 insert(pos, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 x insert(pos, n, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 n \u4e2a x erase(pos) \u5220\u9664 pos \u4f4d\u7f6e\u7684\u5143\u7d20 Code #include <iostream> #include <deque> using namespace std ; int main () { deque < int > deq ( 3 , 5 ); // \u521b\u5efa int \u7c7b\u7684\u53cc\u5411\u961f\u5217\uff0c\u5e76\u6dfb\u52a0 3 \u4e2a 5 /* \u5f53\u524d deq = {5, 5, 5} */ for ( int i = 0 ; i < 5 ; i ++ ) deq . push_back ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d deq = {5, 5, 5, 0, 1, 2, 3, 4} */ deq [ 2 ] = 10 ; // \u5c06\u7b2c 2 \u4e2a\u5143\u7d20\u66f4\u6539\u4e3a 10\uff08\u4e0b\u6807\u4ece 0 \u8bb0\u8d77\uff09 /* \u5f53\u524d deq = {5, 5, 10, 0, 1, 2, 3, 4} */ deq . pop_front (); //\u5220\u9664\u524d\u7aef\u5143\u7d20 /* \u5f53\u524d deq = {5, 10, 0, 1, 2, 3, 4} */ cout << deq . size () << endl ; // \u8f93\u51fa\u5143\u7d20\u4e2a\u6570 for ( int i = 0 ; i < deq . size (); i ++ ) cout << deq [ i ] << ' ' ; // \u8f93\u51fa deq \u7684\u7b2c i \u4e2a\u5143\u7d20 return 0 ; } output: 7 5 10 0 1 2 3 4 Stack $ Stack \u6808\u3002 \u652f\u6301\u4ece\u672b\u7aef\u63d2\u5165\u3001\u63d0\u53d6\u6216\u8bbf\u95ee\u5143\u7d20\u3002 Define #include <stack> \u5934\u6587\u4ef6 stack<type> stk \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u7a7a\u6808 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access top() \u8fd4\u56de\u672b\u7aef\u5143\u7d20 Modifiers push(x) \u5728\u672b\u7aef\u63d2\u5165 val pop() \u5220\u9664\u672b\u7aef\u5143\u7d20 Code #include <iostream> #include <stack> using namespace std ; int main () { stack < int > stk ; // \u521b\u5efa int \u7c7b\u7684\u7a7a\u6808 for ( int i = 0 ; i < 5 ; i ++ ) stk . push ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d stk = {0, 1, 2, 3, 4} */ cout << stk . top () << endl ; // \u8f93\u51fa\u672b\u7aef\u5143\u7d20 stk . pop (); // \u5220\u9664\u672b\u7aef\u5143\u7d20 /* \u5f53\u524d stk = {0, 1, 2, 3} */ cout << stk . top (); // \u8f93\u51fa\u672b\u7aef\u5143\u7d20 } output: 4 3 String $ String \u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u5b57\u7b26\u5bb9\u5668\uff0c\u76f8\u5f53\u4e8e Vector<char> \u7684\u5347\u7ea7\u7248\u3002 Define #include <string> \u5934\u6587\u4ef6 string str \u521b\u5efa\u7a7a\u5b57\u7b26\u4e32 string str = \"context\" \u521b\u5efa\u5b57\u7b26\u4e32\uff0c\u5e76\u521d\u59cb\u5316\u4e3a context Capacity size() \u8fd4\u56de\u5b57\u7b26\u4e2a\u6570 resize(n) \u5c06\u5b57\u7b26\u4e32\u957f\u5ea6\u8c03\u6574\u4e3a n \uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u7b26 resize(n, val) \u5c06\u5b57\u7b26\u4e32\u957f\u5ea6\u8c03\u6574\u4e3a n \uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a val clear() \u6e05\u7a7a\u5bb9\u5668 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access operator [pos] \u8fd4\u56de\u7b2c pos \u4e2a\u5b57\u7b26\u7684\u5f15\u7528\uff08 pos \u4ece 0 \u8bb0\u8d77\uff09 at(pos) \u8fd4\u56de\u7b2c pos \u4e2a\u5b57\u7b26\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5b57\u7b26\u7684\u503c back() \u8fd4\u56de\u672b\u7aef\u5b57\u7b26\u7684\u503c Modifiers assign(n, s) \u6e05\u7a7a\u5b57\u7b26\u4e32\uff0c\u5e76\u6dfb\u52a0 n \u4e2a\u5b57\u7b26 s operator += s \u5728\u672b\u7aef\u63d2\u5165\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s append(s) \u5728\u672b\u7aef\u63d2\u5165\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s push_back(s) \u5728\u672b\u7aef\u63d2\u5165\u5b57\u7b26 s insert(pos, s) \u5728 pos \u4f4d\u7f6e\u524d\u63d2\u5165\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s insert(pos, n, s) \u5728 pos \u4f4d\u7f6e\u524d\u63d2\u5165 n \u4e2a\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s erase(pos) \u5220\u9664 pos \u4f4d\u7f6e\u7684\u5b57\u7b26 Operations c_str() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684 char* \u6307\u9488\u5f62\u5f0f substr(pos) \u8fd4\u56de\u4ece pos \u4f4d\u7f6e\u5230\u672b\u5c3e\u7684\u5b50\u4e32 substr(pos, n) \u8fd4\u56de\u4ece pos \u4f4d\u7f6e\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a n \u7684\u5b50\u4e32 Code #include <iostream> #include <string> using namespace std ; int main () { string str = \"Do you like\" ; // \u521d\u59cb\u5316\u5b57\u7b26\u4e32\u4e3a \"Do you like\" str += \" Van you see?\" ; // \u5728\u672b\u7aef\u63d2\u5165 \" Van you see?\" /* \u5f53\u524d str = \"Do you like Van you see?\" */ str . insert ( 15 , \"\u2642\" ); // \u5728\u4f4d\u7f6e 15 \u524d\u63d2\u5165 \"\u2642\"\uff08\u5360 2 \u5b57\u8282\uff09 cout << str . size () << endl ; // \u8f93\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6 cout << str << endl ; // \u8f93\u51fa\u5b57\u7b26\u4e32 cout << str [ 0 ]; // \u8f93\u51fa\u4f4d\u7f6e 0 \u4e0a\u7684\u5b57\u7b26 return 0 ; } output: 26 Do you like Van\u2642 you see? D Bitset $ Bitset \u652f\u6301\u5bf9\u4e8c\u8fdb\u5236\u6574\u6570\u8fdb\u884c\u4f4d\u64cd\u4f5c\uff0c\u53ef\u5f53\u4f5c\u7a7a\u95f4\u6781\u5c0f\u7684 bool \u6570\u7ec4\u3002 \u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6574\u6570 \\(n\\) \uff1a \u652f\u6301\u8bbf\u95ee\u3001\u66f4\u6539 \\(n\\) \u4efb\u610f\u4f4d\u7684\u6570\u503c\uff08\u5305\u62ec\u53d6\u53cd\uff0c\u8d4b\u503c\uff09\uff1b \u652f\u6301\u5c06 \\(n\\) \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6216 unsigned long \u5f62\u5f0f\u3002 Define #include <bitset> \u5934\u6587\u4ef6 bitset<n> bit \u521b\u5efa n \u4f4d\u4e8c\u8fdb\u5236\u6570 bitset<n> bit(val) \u521b\u5efa n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u5e76\u521d\u59cb\u5316\u4e3a\u5341\u8fdb\u5236\u6570 val Access operator [pos] \u8fd4\u56de\u7b2c pos \u4f4d\u6570\u7684\u5f15\u7528\uff08\u4f4d\u6570\u4ece 0 \u8bb0\u8d77\uff09 test(pos) \u8fd4\u56de\u7b2c pos \u4f4d\u7684\u503c size() \u8fd4\u56de\u4f4d\u6570 count() \u8fd4\u56de 1 \u7684\u4e2a\u6570 any() \u8fd4\u56de\u662f\u5426\u6709 1 none() \u8fd4\u56de\u662f\u5426\u5168\u90e8\u4e3a 0 Modifiers flip() \u5168\u90e8\u53d6\u53cd flip(pos) \u5c06\u7b2c pos \u4f4d\u53d6\u53cd reset() \u5168\u90e8\u8d4b\u503c\u4e3a 0 reset(pos) \u5c06\u7b2c pos \u4f4d\u8d4b\u503c\u4e3a 0 set() \u5168\u90e8\u8d4b\u503c\u4e3a 1 set(pos) \u5c06\u7b2c pos \u4f4d\u8d4b\u503c\u4e3a 1 set(pos, x) \u5c06\u7b2c pos \u4f4d\u8d4b\u503c\u4e3a x Operations to_string() \u8fd4\u56de\u4e8c\u8fdb\u5236\u6570\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f to_ulong() \u8fd4\u56de\u4e8c\u8fdb\u5236\u6570\u7684 unsigned long \u5f62\u5f0f Warning \u4e8c\u8fdb\u5236\u6570\u7684\u4f4d\u6570\u4ece\u53f3\u5f80\u5de6\u9012\u589e\uff0c\u800c bitset \u7684\u4e0b\u6807\u4ece\u5de6\u5f80\u53f3\u9012\u589e\u3002\u6545\u6570\u4f4d\u5728 bitset \u4e2d\u5012\u5e8f\u50a8\u5b58\u3002 Code #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 3 > bit ( 6 ); // \u521b\u5efa 3 \u4f4d\u4e8c\u8fdb\u5236\u6570 110\uff085 \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u662f 110\uff09 /* \u5f53\u524d bit = {0, 1, 1} = 110 */ cout << bit . size () << endl ; // \u8f93\u51fa\u4f4d\u6570 bit . flip ( 0 ); // \u5c06\u7b2c 0 \u4f4d\u53d6\u53cd /* \u5f53\u524d bit = {1, 1, 1} = 111 */ bit [ 2 ] = 0 ; // \u5c06\u7b2c 2 \u4f4d\u8d4b\u503c\u4e3a 1 /* \u5f53\u524d bit = {1, 1, 0} = 011*/ cout << bit . to_string (); // \u8f93\u51fa bit \u7684\u5b57\u7b26\u4e32\u5f62\u5f0f return 0 ; } output: 3 011 th, td { font-size: 14px; }","title":"STL"},{"location":"posts/ds/STL/#_1","text":"STL \uff08 Standard Template Library \u6807\u51c6\u6a21\u677f\u5e93\uff09\u662f\u4e00\u5957\u529f\u80fd\u5f3a\u5927\u7684 C++ \u6a21\u677f\u7c7b\u548c\u51fd\u6570\uff0c\u8fd9\u4e9b\u6a21\u677f\u7c7b\u548c\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u591a\u79cd\u6d41\u884c\u548c\u5e38\u7528\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u3002 C++ \u6807\u51c6\u6a21\u677f\u5e93\u7684\u6838\u5fc3\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u7ec4\u4ef6\uff1a \u7ec4\u4ef6 \u63cf\u8ff0 \u5bb9\u5668 Containers \u5bb9\u5668\u7528\u4e8e\u50a8\u5b58\u67d0\u4e00\u7c7b\u5bf9\u8c61\u3002 \u7b97\u6cd5 Algorithms \u7b97\u6cd5\u4f5c\u7528\u4e8e\u5bb9\u5668\u3002 STL \u63d0\u4f9b\u4e86\u5404\u79cd\u64cd\u4f5c\u65b9\u5f0f\uff0c\u5305\u62ec\u521d\u59cb\u5316\u3001\u6392\u5e8f\u3001\u641c\u7d22\u548c\u8f6c\u6362\u7b49\u3002 \u8fed\u4ee3\u5668 Iterators \u8fed\u4ee3\u5668\u7528\u4e8e\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\u4ef6\uff0c\u6309\u7167\u4ee5\u4e0b\u5206\u7ec4\u5c55\u5f00\u4ecb\u7ecd\uff1a \u5206\u7ec4 \u5185\u5bb9 \u5206\u7ec4 \u5185\u5bb9 Define \u5934\u6587\u4ef6\u3001\u5b9a\u4e49\u3001\u521d\u59cb\u5316 Capacity \u5185\u5b58\u64cd\u4f5c Access \u5143\u7d20\u8bbf\u95ee Modifiers \u5143\u7d20\u589e\u6539 Operations \u4f18\u5316\u529f\u80fd Code \u793a\u4f8b\u7a0b\u5e8f Warning \u4f7f\u7528 STL \u9700\u8981\u9ed8\u8ba4\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u3002 using namespace std ;","title":"\u7b80\u4ecb"},{"location":"posts/ds/STL/#containers","text":"\u5bb9\u5668\u7684\u529f\u80fd\u8f83\u6570\u7ec4\u66f4\u52a0\u5f3a\u5927\uff0c\u4e14 STL \u63d0\u4f9b\u4e86\u5bb9\u5668\u7684\u914d\u5957\u7b97\u6cd5\u3002","title":"\u5bb9\u5668\uff08Containers\uff09"},{"location":"posts/ds/STL/#vector","text":"Vector \u5bb9\u5668\u76f8\u5f53\u4e8e\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u6570\u7ec4\u3002 \u652f\u6301\u4ece\u672b\u7aef\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff1b \u652f\u6301\u8bbf\u95ee\u3001\u66f4\u6539\u4efb\u610f\u4f4d\u7f6e\u7684\u5143\u7d20\uff1b \u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff08\u6548\u7387\u8f83\u6162\uff09\u3002 Define #include <vector> \u5934\u6587\u4ef6 vector<type> vec \u521b\u5efa\u7a7a\u5bb9\u5668 vec \uff0c\u7528\u4e8e\u5b58\u653e type \u7c7b\u5143\u7d20 vector<type> vec(n) \u521b\u5efa\u5305\u542b n \u4e2a type \u7c7b\u5143\u7d20\u7684\u5bb9\u5668 vec \uff08\u5143\u7d20\u7684\u9ed8\u8ba4\u503c\u4e3a 0 \uff09 vector<type> vec(n, val) \u521b\u5efa\u5305\u542b n \u4e2a type \u7c7b\u5143\u7d20\u7684\u5bb9\u5668 vec \uff0c\u5143\u7d20\u503c\u4e3a val Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 resize(n) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u5bb9\u5668\u5305\u542b n \u4e2a\u5143\u7d20 resize(n, val) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u5bb9\u5668\u5305\u542b n \u4e2a\u5143\u7d20\uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a val clear() \u6e05\u7a7a\u5bb9\u5668 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access operator [pos] \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff08 pos \u4ece 0 \u8bb0\u8d77\uff09 at(pos) \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c back() \u8fd4\u56de\u672b\u7aef\u5143\u7d20\u7684\u503c Modifiers assign(n, val) \u6e05\u7a7a\u5bb9\u5668\uff0c\u5e76\u6dfb\u52a0 n \u4e2a val push_back(x) \u5728\u672b\u7aef\u63d2\u5165 x pop_back() \u5220\u9664\u672b\u7aef\u5143\u7d20 insert(pos, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 x insert(pos, n, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 n \u4e2a x erase(pos) \u5220\u9664 pos \u4f4d\u7f6e\u7684\u5143\u7d20 Code #include <iostream> #include <vector> using namespace std ; int main () { vector < int > vec ( 3 , 5 ); // \u521b\u5efa int \u7c7b\u7684\u5bb9\u5668\uff0c\u5e76\u6dfb\u52a0 3 \u4e2a 5 /* \u5f53\u524d vec = {5, 5, 5} */ for ( int i = 0 ; i < 5 ; i ++ ) vec . push_back ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d vec = {5, 5, 5, 0, 1, 2, 3, 4} */ vec [ 2 ] = 10 ; // \u5c06\u7b2c 2 \u4e2a\u5143\u7d20\u66f4\u6539\u4e3a 10\uff08\u4e0b\u6807\u4ece 0 \u8bb0\u8d77\uff09 /* \u5f53\u524d vec = {5, 5, 10, 0, 1, 2, 3, 4} */ cout << vec . size () << endl ; // \u8f93\u51fa\u5143\u7d20\u4e2a\u6570 for ( int i = 0 ; i < vec . size (); i ++ ) cout << vec [ i ] << ' ' ; // \u8f93\u51fa vec \u7684\u7b2c i \u4e2a\u5143\u7d20 return 0 ; } output: 8 5 5 10 0 1 2 3 4","title":"Vector"},{"location":"posts/ds/STL/#vectorbool","text":"Vector<Bool> \u5728 Vector \u7684\u57fa\u7840\u4e0a\uff0c\u989d\u5916\u652f\u6301\u53d6\u53cd\u64cd\u4f5c\uff08 true \u53d8 false \uff0c false \u53d8 true \uff09\u3002 Define #include <vector> \u5934\u6587\u4ef6 vector<bool> vec \u521b\u5efa\u5b58\u50a8 bool \u7c7b\u5143\u7d20\u7684\u7a7a\u5bb9\u5668 Modifiers flip() \u5168\u90e8\u53d6\u53cd flip(pos) \u5c06\u7b2c pos \u4f4d\u53d6\u53cd Code #include <bits/stdc++.h> using namespace std ; const int arr [] = { 0 , 1 , 0 , 0 , 1 , 0 }; int main () { vector < bool > vec ; for ( int i = 0 ; i < 6 ; i ++ ) vec . push_back ( arr [ i ]); vec . flip (); // \u5168\u90e8\u53d6\u53cd for ( int i = 0 ; i < 6 ; i ++ ) cout << vec [ i ] << ' ' ; return 0 ; } output: 1 0 1 1 0 1","title":"Vector&lt;Bool&gt;"},{"location":"posts/ds/STL/#queue","text":"Queue \u961f\u5217\u3002 \u652f\u6301\u4ece\u672b\u7aef\u63d2\u5165\u5143\u7d20\uff0c\u4ece\u524d\u7aef\u63d0\u53d6\u5143\u7d20\uff1b \u53ea\u80fd\u8bbf\u95ee\u524d\u7aef\u548c\u672b\u7aef\u5143\u7d20\u3002 Define #include <queue> \u5934\u6587\u4ef6 queue<type> que \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u7a7a\u961f\u5217 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access back() \u8fd4\u56de\u672b\u7aef\u5143\u7d20\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c Modifiers push(val) \u5728\u672b\u7aef\u63d2\u5165 val pop() \u5220\u9664\u524d\u7aef\u5143\u7d20 Code #include <iostream> #include <queue> using namespace std ; int main () { queue < int > que ; // \u521b\u5efa int \u7c7b\u7684\u961f\u5217 for ( int i = 0 ; i < 5 ; i ++ ) que . push ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d que = {0, 1, 2, 3, 4} */ cout << que . front () << ' ' << que . back () << endl ; // \u8f93\u51fa\u524d\u7aef\u548c\u672b\u7aef\u5143\u7d20 que . pop (); // \u5220\u9664\u524d\u7aef\u5143\u7d20 /* \u5f53\u524d que = {1, 2, 3, 4} */ cout << que . front (); // \u8f93\u51fa\u524d\u7aef\u5143\u7d20 return 0 ; } output: 0 4 1","title":"Queue"},{"location":"posts/ds/STL/#priority-queue","text":"Priority Queue \u662f\u57fa\u4e8e Queue \u7684\u4f18\u5148\u961f\u5217\u3002 \u7ef4\u62a4\u524d\u7aef\u5143\u7d20\u5728\u961f\u5217\u4e2d\u59cb\u7ec8\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\uff1b \u4ec5\u652f\u6301\u8bbf\u95ee\u524d\u7aef\u5143\u7d20\u3002 Define #include <queue> \u5934\u6587\u4ef6 priority_queue<type> que \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u4f18\u5148\u961f\u5217\uff08\u9ed8\u8ba4\u524d\u7aef\u6700\u5927\uff09 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access top() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c Modifiers push(val) \u5728\u63d2\u5165 val pop() \u5220\u9664\u524d\u7aef\u5143\u7d20 Code #include <iostream> #include <queue> using namespace std ; const int arr [] = { 4 , 1 , 2 , 5 , 3 , 6 }; int main () { priority_queue < int > que ; // \u521b\u5efa\u4f18\u5148\u961f\u5217\uff08\u9ed8\u8ba4\u524d\u7aef\u6700\u5927\uff09 priority_queue < int , vector < int > , greater < int > > min_que ; // \u524d\u7aef\u59cb\u7ec8\u6700\u5c0f priority_queue < int , vector < int > , less < int > > max_que ; // \u524d\u7aef\u59cb\u7ec8\u6700\u5927 for ( int i = 0 ; i < 6 ; i ++ ) { min_que . push ( arr [ i ]); max_que . push ( arr [ i ]); // \u5c06 arr[i] \u63d2\u5165\u961f\u5217 } cout << min_que . top () << endl ; // \u8f93\u51fa\u961f\u5217\u6700\u5c0f\u5143\u7d20 cout << max_que . top () << endl ; // \u8f93\u51fa\u961f\u5217\u6700\u5927\u5143\u7d20 min_que . pop (); max_que . pop (); // \u5220\u9664\u961f\u5217\u524d\u7aef\u5143\u7d20 cout << min_que . top () << endl ; cout << max_que . top () << endl ; return 0 ; } output: 1 6 2 5","title":"Priority Queue"},{"location":"posts/ds/STL/#deque","text":"Deque \u53cc\u5411\u961f\u5217\u76f8\u5f53\u4e8e Vector \u7684\u5347\u7ea7\u7248\u3002 \u652f\u6301\u4ece\u4e24\u7aef\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff1b \u652f\u6301\u8bbf\u95ee\u3001\u66f4\u6539\u4efb\u610f\u4f4d\u7f6e\u7684\u5143\u7d20\uff08\u6548\u7387\u8f83 Vector \u7a0d\u6162\uff09\uff1b \u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff08\u6548\u7387\u8f83\u6162\uff09\u3002 Define #include <deque> \u5934\u6587\u4ef6 deque<type> q \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u53cc\u5411\u961f\u5217 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 resize(n) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u961f\u5217\u5305\u542b n \u4e2a\u5143\u7d20 resize(n, val) \u8c03\u6574\u5927\u5c0f\uff0c\u4f7f\u961f\u5217\u5305\u542b n \u4e2a\u5143\u7d20\uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a val clear() \u6e05\u7a7a\u5bb9\u5668 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access operator [pos] \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff08 pos \u4ece 0 \u8bb0\u8d77\uff09 at(pos) \u8fd4\u56de\u7b2c pos \u4e2a\u5143\u7d20\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5143\u7d20\u7684\u503c back() \u8fd4\u56de\u672b\u7aef\u5143\u7d20\u7684\u503c Modifiers assign(n, val) \u6e05\u7a7a\u5bb9\u5668\uff0c\u5e76\u6dfb\u52a0 n \u4e2a val push_front(x) \u5728\u524d\u7aef\u63d2\u5165 x push_back(x) \u5728\u672b\u7aef\u63d2\u5165 x pop_front() \u5220\u9664\u524d\u7aef\u5143\u7d20 pop_back() \u5220\u9664\u672b\u7aef\u5143\u7d20 insert(pos, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 x insert(pos, n, x) \u5728 pos \u4f4d\u7f6e\u63d2\u5165 n \u4e2a x erase(pos) \u5220\u9664 pos \u4f4d\u7f6e\u7684\u5143\u7d20 Code #include <iostream> #include <deque> using namespace std ; int main () { deque < int > deq ( 3 , 5 ); // \u521b\u5efa int \u7c7b\u7684\u53cc\u5411\u961f\u5217\uff0c\u5e76\u6dfb\u52a0 3 \u4e2a 5 /* \u5f53\u524d deq = {5, 5, 5} */ for ( int i = 0 ; i < 5 ; i ++ ) deq . push_back ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d deq = {5, 5, 5, 0, 1, 2, 3, 4} */ deq [ 2 ] = 10 ; // \u5c06\u7b2c 2 \u4e2a\u5143\u7d20\u66f4\u6539\u4e3a 10\uff08\u4e0b\u6807\u4ece 0 \u8bb0\u8d77\uff09 /* \u5f53\u524d deq = {5, 5, 10, 0, 1, 2, 3, 4} */ deq . pop_front (); //\u5220\u9664\u524d\u7aef\u5143\u7d20 /* \u5f53\u524d deq = {5, 10, 0, 1, 2, 3, 4} */ cout << deq . size () << endl ; // \u8f93\u51fa\u5143\u7d20\u4e2a\u6570 for ( int i = 0 ; i < deq . size (); i ++ ) cout << deq [ i ] << ' ' ; // \u8f93\u51fa deq \u7684\u7b2c i \u4e2a\u5143\u7d20 return 0 ; } output: 7 5 10 0 1 2 3 4","title":"Deque"},{"location":"posts/ds/STL/#stack","text":"Stack \u6808\u3002 \u652f\u6301\u4ece\u672b\u7aef\u63d2\u5165\u3001\u63d0\u53d6\u6216\u8bbf\u95ee\u5143\u7d20\u3002 Define #include <stack> \u5934\u6587\u4ef6 stack<type> stk \u521b\u5efa\u5b58\u50a8 type \u7c7b\u5143\u7d20\u7684\u7a7a\u6808 Capacity size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access top() \u8fd4\u56de\u672b\u7aef\u5143\u7d20 Modifiers push(x) \u5728\u672b\u7aef\u63d2\u5165 val pop() \u5220\u9664\u672b\u7aef\u5143\u7d20 Code #include <iostream> #include <stack> using namespace std ; int main () { stack < int > stk ; // \u521b\u5efa int \u7c7b\u7684\u7a7a\u6808 for ( int i = 0 ; i < 5 ; i ++ ) stk . push ( i ); // \u5728\u672b\u7aef\u63d2\u5165 i /* \u5f53\u524d stk = {0, 1, 2, 3, 4} */ cout << stk . top () << endl ; // \u8f93\u51fa\u672b\u7aef\u5143\u7d20 stk . pop (); // \u5220\u9664\u672b\u7aef\u5143\u7d20 /* \u5f53\u524d stk = {0, 1, 2, 3} */ cout << stk . top (); // \u8f93\u51fa\u672b\u7aef\u5143\u7d20 } output: 4 3","title":"Stack"},{"location":"posts/ds/STL/#string","text":"String \u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u5b57\u7b26\u5bb9\u5668\uff0c\u76f8\u5f53\u4e8e Vector<char> \u7684\u5347\u7ea7\u7248\u3002 Define #include <string> \u5934\u6587\u4ef6 string str \u521b\u5efa\u7a7a\u5b57\u7b26\u4e32 string str = \"context\" \u521b\u5efa\u5b57\u7b26\u4e32\uff0c\u5e76\u521d\u59cb\u5316\u4e3a context Capacity size() \u8fd4\u56de\u5b57\u7b26\u4e2a\u6570 resize(n) \u5c06\u5b57\u7b26\u4e32\u957f\u5ea6\u8c03\u6574\u4e3a n \uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u7b26 resize(n, val) \u5c06\u5b57\u7b26\u4e32\u957f\u5ea6\u8c03\u6574\u4e3a n \uff0c\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a val clear() \u6e05\u7a7a\u5bb9\u5668 empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a Access operator [pos] \u8fd4\u56de\u7b2c pos \u4e2a\u5b57\u7b26\u7684\u5f15\u7528\uff08 pos \u4ece 0 \u8bb0\u8d77\uff09 at(pos) \u8fd4\u56de\u7b2c pos \u4e2a\u5b57\u7b26\u7684\u503c front() \u8fd4\u56de\u524d\u7aef\u5b57\u7b26\u7684\u503c back() \u8fd4\u56de\u672b\u7aef\u5b57\u7b26\u7684\u503c Modifiers assign(n, s) \u6e05\u7a7a\u5b57\u7b26\u4e32\uff0c\u5e76\u6dfb\u52a0 n \u4e2a\u5b57\u7b26 s operator += s \u5728\u672b\u7aef\u63d2\u5165\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s append(s) \u5728\u672b\u7aef\u63d2\u5165\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s push_back(s) \u5728\u672b\u7aef\u63d2\u5165\u5b57\u7b26 s insert(pos, s) \u5728 pos \u4f4d\u7f6e\u524d\u63d2\u5165\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s insert(pos, n, s) \u5728 pos \u4f4d\u7f6e\u524d\u63d2\u5165 n \u4e2a\u5b57\u7b26\uff08\u6216\u5b57\u7b26\u4e32\uff09 s erase(pos) \u5220\u9664 pos \u4f4d\u7f6e\u7684\u5b57\u7b26 Operations c_str() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684 char* \u6307\u9488\u5f62\u5f0f substr(pos) \u8fd4\u56de\u4ece pos \u4f4d\u7f6e\u5230\u672b\u5c3e\u7684\u5b50\u4e32 substr(pos, n) \u8fd4\u56de\u4ece pos \u4f4d\u7f6e\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a n \u7684\u5b50\u4e32 Code #include <iostream> #include <string> using namespace std ; int main () { string str = \"Do you like\" ; // \u521d\u59cb\u5316\u5b57\u7b26\u4e32\u4e3a \"Do you like\" str += \" Van you see?\" ; // \u5728\u672b\u7aef\u63d2\u5165 \" Van you see?\" /* \u5f53\u524d str = \"Do you like Van you see?\" */ str . insert ( 15 , \"\u2642\" ); // \u5728\u4f4d\u7f6e 15 \u524d\u63d2\u5165 \"\u2642\"\uff08\u5360 2 \u5b57\u8282\uff09 cout << str . size () << endl ; // \u8f93\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6 cout << str << endl ; // \u8f93\u51fa\u5b57\u7b26\u4e32 cout << str [ 0 ]; // \u8f93\u51fa\u4f4d\u7f6e 0 \u4e0a\u7684\u5b57\u7b26 return 0 ; } output: 26 Do you like Van\u2642 you see? D","title":"String"},{"location":"posts/ds/STL/#bitset","text":"Bitset \u652f\u6301\u5bf9\u4e8c\u8fdb\u5236\u6574\u6570\u8fdb\u884c\u4f4d\u64cd\u4f5c\uff0c\u53ef\u5f53\u4f5c\u7a7a\u95f4\u6781\u5c0f\u7684 bool \u6570\u7ec4\u3002 \u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6574\u6570 \\(n\\) \uff1a \u652f\u6301\u8bbf\u95ee\u3001\u66f4\u6539 \\(n\\) \u4efb\u610f\u4f4d\u7684\u6570\u503c\uff08\u5305\u62ec\u53d6\u53cd\uff0c\u8d4b\u503c\uff09\uff1b \u652f\u6301\u5c06 \\(n\\) \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6216 unsigned long \u5f62\u5f0f\u3002 Define #include <bitset> \u5934\u6587\u4ef6 bitset<n> bit \u521b\u5efa n \u4f4d\u4e8c\u8fdb\u5236\u6570 bitset<n> bit(val) \u521b\u5efa n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u5e76\u521d\u59cb\u5316\u4e3a\u5341\u8fdb\u5236\u6570 val Access operator [pos] \u8fd4\u56de\u7b2c pos \u4f4d\u6570\u7684\u5f15\u7528\uff08\u4f4d\u6570\u4ece 0 \u8bb0\u8d77\uff09 test(pos) \u8fd4\u56de\u7b2c pos \u4f4d\u7684\u503c size() \u8fd4\u56de\u4f4d\u6570 count() \u8fd4\u56de 1 \u7684\u4e2a\u6570 any() \u8fd4\u56de\u662f\u5426\u6709 1 none() \u8fd4\u56de\u662f\u5426\u5168\u90e8\u4e3a 0 Modifiers flip() \u5168\u90e8\u53d6\u53cd flip(pos) \u5c06\u7b2c pos \u4f4d\u53d6\u53cd reset() \u5168\u90e8\u8d4b\u503c\u4e3a 0 reset(pos) \u5c06\u7b2c pos \u4f4d\u8d4b\u503c\u4e3a 0 set() \u5168\u90e8\u8d4b\u503c\u4e3a 1 set(pos) \u5c06\u7b2c pos \u4f4d\u8d4b\u503c\u4e3a 1 set(pos, x) \u5c06\u7b2c pos \u4f4d\u8d4b\u503c\u4e3a x Operations to_string() \u8fd4\u56de\u4e8c\u8fdb\u5236\u6570\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f to_ulong() \u8fd4\u56de\u4e8c\u8fdb\u5236\u6570\u7684 unsigned long \u5f62\u5f0f Warning \u4e8c\u8fdb\u5236\u6570\u7684\u4f4d\u6570\u4ece\u53f3\u5f80\u5de6\u9012\u589e\uff0c\u800c bitset \u7684\u4e0b\u6807\u4ece\u5de6\u5f80\u53f3\u9012\u589e\u3002\u6545\u6570\u4f4d\u5728 bitset \u4e2d\u5012\u5e8f\u50a8\u5b58\u3002 Code #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 3 > bit ( 6 ); // \u521b\u5efa 3 \u4f4d\u4e8c\u8fdb\u5236\u6570 110\uff085 \u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u662f 110\uff09 /* \u5f53\u524d bit = {0, 1, 1} = 110 */ cout << bit . size () << endl ; // \u8f93\u51fa\u4f4d\u6570 bit . flip ( 0 ); // \u5c06\u7b2c 0 \u4f4d\u53d6\u53cd /* \u5f53\u524d bit = {1, 1, 1} = 111 */ bit [ 2 ] = 0 ; // \u5c06\u7b2c 2 \u4f4d\u8d4b\u503c\u4e3a 1 /* \u5f53\u524d bit = {1, 1, 0} = 011*/ cout << bit . to_string (); // \u8f93\u51fa bit \u7684\u5b57\u7b26\u4e32\u5f62\u5f0f return 0 ; } output: 3 011 th, td { font-size: 14px; }","title":"Bitset"},{"location":"posts/ds/link/","text":"\u7b80\u4ecb $ \u94fe\u8868 \u53ea\u80fd\u6309\u987a\u5e8f\u4f9d\u6b21\u8bbf\u95ee\u5143\u7d20\uff0c\u800c\u6570\u7ec4\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002 \u94fe\u8868 \u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\uff0c\u800c\u6570\u7ec4\u4e0d\u652f\u6301\u3002 \u94fe\u8868\u8282\u70b9 $ \u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\u94fe\u8868\u7684\u8282\u70b9\uff0c\u5176\u4e2d\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u6570\u636e\u3002\u53e6\u5916\u7528 prev \u548c next \u4e24\u4e2a\u6307\u9488\u6307\u5411\u524d\u540e\u76f8\u90bb\u7684\u8282\u70b9\u3002 Code struct Node { int val ; // \u6570\u636e\uff08\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff09 Node * prev , * next ; // \u6307\u9488 }; \u521d\u59cb\u5316 $ \u521d\u59cb\u5316\u94fe\u8868\u65f6\uff0c\u989d\u5916\u5efa\u7acb\u4e24\u4e2a\u8282\u70b9 head \u548c tail \u4ee3\u8868\u94fe\u8868\u5934\u5c3e\uff0c\u628a\u5b9e\u9645\u8282\u70b9\u5b58\u50a8\u5728 head \u4e0e tail \u4e4b\u95f4\uff0c\u7b80\u5316\u94fe\u8868\u8fb9\u754c\u7684\u5224\u65ad\u3002 Code Node * head , * tail ; void init () { head = new Node (); tail = new Node (); head -> next = tail ; tail -> prev = next ; } \u63d2\u5165/\u5220\u9664\u8282\u70b9 $ Question \u5982\u4f55\u5728 \u2460 \u548c \u2461 \u4e4b\u95f4\u63d2\u5165 \u2462 \uff1f \u8ba9 \u2462 \u7684 next \u6307\u5411 \u2461\uff0c\u2461 \u7684 prev \u6307\u5411 \u2462\uff1a \u8ba9 \u2460 \u7684 next \u6307\u5411 \u2462\uff0c\u2462 \u7684 prev \u6307\u5411 \u2460\uff1a \u5220\u9664\u8282\u70b9\u8fd0\u7528\u5230\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 Code void insert ( Node * pri , int val ) { // \u5728\u8282\u70b9 pri \u540e\u9762\u63d2\u5165\u6570\u636e\u4e3a val \u7684\u65b0\u8282\u70b9 q = new Node (); q -> val = val ; Node * aft = pre -> next ; aft -> prev = q , q -> next = aft ; // \u6b65\u9aa4 1 pri -> next = q , q -> prev = pri ; // \u6b65\u9aa4 2 } void remote ( Node * p ) { // \u5220\u9664\u8282\u70b9 p p -> prev -> next = p -> next ; p -> next -> prev = p -> prev ; delete p ; } \u67e5\u627e\u8282\u70b9 $ Code Node * indexOf ( int val ) { // \u8fd4\u56de\u94fe\u8868\u4e2d\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u4e3a val \u7684\u8282\u70b9\u6307\u9488 for ( Node * p = head -> next ; p != tail ; p = p -> next ) if ( p -> val == val ) return p ; return NULL ; } \u6e05\u7a7a\u94fe\u8868 $ Code void clear () { while ( head != tail ) { head = head -> next ; delete head -> prev ; } delete tail ; } \u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868 $ \u4f7f\u7528\u6307\u9488\u52a8\u6001\u5206\u914d\u7a7a\u95f4\uff0c\u6548\u7387\u8f83\u4f4e\u4e14\u4e0d\u7a33\u5b9a\u3002\u4e00\u822c\u4f7f\u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u3002 Code struct Node { int val ; int prev , next ; } node []; int head , tail , tot ; void init () { head = 0 , tail = 1 , tot = 2 ; node [ head ]. next = tail ; node [ tail ]. prev = head ; } void insert ( int p , int val ) { int q = ++ tot ; node [ q ]. val = val ; node [ node [ p ]. next ]. prev = q ; node [ q ]. next = node [ p ]. next ; node [ p ]. next = q , node [ q ]. next = p ; } void remove ( int p ) { node [ node [ p ]. prev ]. next = node [ p ]. next ; node [ node [ p ]. next ]. prev = node [ p ]. prev ; } int indexOf ( int val ) { for ( int p = node [ head ]. next ; p != tail ; p = node [ p ]. next ) if ( node [ p ]. val == val ) return p ; return -1 ; } void clear () { head = tail = tot = 0 ; memset ( node , 0 , sizeof node ); }","title":"\u94fe\u8868"},{"location":"posts/ds/link/#_1","text":"\u94fe\u8868 \u53ea\u80fd\u6309\u987a\u5e8f\u4f9d\u6b21\u8bbf\u95ee\u5143\u7d20\uff0c\u800c\u6570\u7ec4\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002 \u94fe\u8868 \u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\uff0c\u800c\u6570\u7ec4\u4e0d\u652f\u6301\u3002","title":"\u7b80\u4ecb"},{"location":"posts/ds/link/#_2","text":"\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\u94fe\u8868\u7684\u8282\u70b9\uff0c\u5176\u4e2d\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u6570\u636e\u3002\u53e6\u5916\u7528 prev \u548c next \u4e24\u4e2a\u6307\u9488\u6307\u5411\u524d\u540e\u76f8\u90bb\u7684\u8282\u70b9\u3002 Code struct Node { int val ; // \u6570\u636e\uff08\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff09 Node * prev , * next ; // \u6307\u9488 };","title":"\u94fe\u8868\u8282\u70b9"},{"location":"posts/ds/link/#_3","text":"\u521d\u59cb\u5316\u94fe\u8868\u65f6\uff0c\u989d\u5916\u5efa\u7acb\u4e24\u4e2a\u8282\u70b9 head \u548c tail \u4ee3\u8868\u94fe\u8868\u5934\u5c3e\uff0c\u628a\u5b9e\u9645\u8282\u70b9\u5b58\u50a8\u5728 head \u4e0e tail \u4e4b\u95f4\uff0c\u7b80\u5316\u94fe\u8868\u8fb9\u754c\u7684\u5224\u65ad\u3002 Code Node * head , * tail ; void init () { head = new Node (); tail = new Node (); head -> next = tail ; tail -> prev = next ; }","title":"\u521d\u59cb\u5316"},{"location":"posts/ds/link/#_4","text":"Question \u5982\u4f55\u5728 \u2460 \u548c \u2461 \u4e4b\u95f4\u63d2\u5165 \u2462 \uff1f \u8ba9 \u2462 \u7684 next \u6307\u5411 \u2461\uff0c\u2461 \u7684 prev \u6307\u5411 \u2462\uff1a \u8ba9 \u2460 \u7684 next \u6307\u5411 \u2462\uff0c\u2462 \u7684 prev \u6307\u5411 \u2460\uff1a \u5220\u9664\u8282\u70b9\u8fd0\u7528\u5230\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 Code void insert ( Node * pri , int val ) { // \u5728\u8282\u70b9 pri \u540e\u9762\u63d2\u5165\u6570\u636e\u4e3a val \u7684\u65b0\u8282\u70b9 q = new Node (); q -> val = val ; Node * aft = pre -> next ; aft -> prev = q , q -> next = aft ; // \u6b65\u9aa4 1 pri -> next = q , q -> prev = pri ; // \u6b65\u9aa4 2 } void remote ( Node * p ) { // \u5220\u9664\u8282\u70b9 p p -> prev -> next = p -> next ; p -> next -> prev = p -> prev ; delete p ; }","title":"\u63d2\u5165/\u5220\u9664\u8282\u70b9"},{"location":"posts/ds/link/#_5","text":"Code Node * indexOf ( int val ) { // \u8fd4\u56de\u94fe\u8868\u4e2d\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u4e3a val \u7684\u8282\u70b9\u6307\u9488 for ( Node * p = head -> next ; p != tail ; p = p -> next ) if ( p -> val == val ) return p ; return NULL ; }","title":"\u67e5\u627e\u8282\u70b9"},{"location":"posts/ds/link/#_6","text":"Code void clear () { while ( head != tail ) { head = head -> next ; delete head -> prev ; } delete tail ; }","title":"\u6e05\u7a7a\u94fe\u8868"},{"location":"posts/ds/link/#_7","text":"\u4f7f\u7528\u6307\u9488\u52a8\u6001\u5206\u914d\u7a7a\u95f4\uff0c\u6548\u7387\u8f83\u4f4e\u4e14\u4e0d\u7a33\u5b9a\u3002\u4e00\u822c\u4f7f\u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u3002 Code struct Node { int val ; int prev , next ; } node []; int head , tail , tot ; void init () { head = 0 , tail = 1 , tot = 2 ; node [ head ]. next = tail ; node [ tail ]. prev = head ; } void insert ( int p , int val ) { int q = ++ tot ; node [ q ]. val = val ; node [ node [ p ]. next ]. prev = q ; node [ q ]. next = node [ p ]. next ; node [ p ]. next = q , node [ q ]. next = p ; } void remove ( int p ) { node [ node [ p ]. prev ]. next = node [ p ]. next ; node [ node [ p ]. next ]. prev = node [ p ]. prev ; } int indexOf ( int val ) { for ( int p = node [ head ]. next ; p != tail ; p = node [ p ]. next ) if ( node [ p ]. val == val ) return p ; return -1 ; } void clear () { head = tail = tot = 0 ; memset ( node , 0 , sizeof node ); }","title":"\u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868"},{"location":"posts/ds/queue/","text":"\u7b80\u4ecb $ \u961f\u5217\u662f\u4e00\u79cd\u300c\u5148\u8fdb\u5148\u51fa\u300d\u7684\u6570\u636e\u7ed3\u6784\u3002\u5143\u7d20\u4ece\u961f\u5217\u7684\u524d\u7aef\u8fdb\u5165\uff08\u5165\u961f\uff09\uff0c\u4ece\u672b\u7aef\u79bb\u5f00\uff08\u51fa\u961f\uff09\uff0c\u7c7b\u4f3c\u4e8e\u6392\u961f\u3002\u57fa\u672c\u64cd\u4f5c\u89c1 STL Queue \u3002 \u53cc\u5411\u961f\u5217 $ \u961f\u5217\u5143\u7d20\u53ea\u80fd\u4ece\u4e00\u7aef\u8fdb\uff0c\u53e6\u4e00\u7aef\u51fa\uff0c\u6709\u65f6\u65e0\u6cd5\u6ee1\u8db3\u95ee\u9898\u7684\u9700\u8981\u3002\u53cc\u5411\u961f\u5217\u5e94\u8fd0\u800c\u751f\uff0c\u5b83\u652f\u6301\u4ece\u4e24\u7aef\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u3002 \u53cc\u5411\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c\u89c1 STL Deque \u3002 \u5355\u8c03\u961f\u5217 $ \u5355\u8c03\u961f\u5217\u7684\u5143\u7d20\u4ece\u961f\u5934\u5230\u961f\u5c3e\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u9002\u7528\u4e8e\u67e5\u8be2\u67d0\u4e00\u52a8\u6001\u533a\u95f4\u7684\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\u5143\u7d20\u3002 \u63d2\u5165\u5143\u7d20 $ \u5c06 \\(A[i]\\) \u5165\u961f\uff0c\u7ef4\u62a4\u961f\u5217\u5355\u8c03\u6027\uff0c\u540c\u65f6\u4fdd\u8bc1\u961f\u5217\u5143\u7d20\u5728 \\(A[p\\cdots i]\\) \u8303\u56f4\u5185\u3002\u4ee5\u5355\u8c03\u9012\u589e\u961f\u5217\u4e3a\u4f8b\uff1a \u91cd\u590d\u5f39\u51fa\u961f\u5934\uff0c\u76f4\u5230\u961f\u5934 \\(\u2265p\\) \uff1b \u91cd\u590d\u5f39\u51fa\u961f\u5c3e\uff0c\u76f4\u5230 \\(A[\\) \u961f\u5c3e \\(]<A[i]\\) \uff08\u82e5\u5355\u8c03\u9012\u51cf\uff0c\u5219\u91cd\u590d\u76f4\u5230 \\(A[\\) \u961f\u5c3e \\(]>A[i]\\) \uff09\u3002 \u5c06 \\(i\\) \u5165\u961f\u3002 \u6d89\u53ca\u53cc\u7aef\u64cd\u4f5c\uff0c\u987b\u4f7f\u7528\u53cc\u5411\u961f\u5217\u3002\u6b64\u65f6 \\(A[p\\cdots i]\\) \u8303\u56f4\u5185\u6700\u5c0f\u5143\u7d20\u4e3a \\(A[\\) \u961f\u5934 \\(]\\) \u3002 Code deque < int > q ; // \u5b58\u50a8\u5143\u7d20\u4e0b\u6807 void insert ( int i , int p ) { // \u5c06 a[i] \u5165\u961f\uff0c\u7ef4\u62a4\u961f\u5217\u5143\u7d20\u5728 a[p...i] \u8303\u56f4\u5185 while ( ! q . empty () && q . front () < p ) q . pop_front (); while ( ! q . empty () && a [ q . back ()] >= a [ i ]) q . pop_back (); q . push_back ( i ); } \u6ed1\u52a8\u7a97\u53e3 $ Question \u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff08\u957f\u5ea6\u4e3a \\(k\\) \uff09\u4ece\u6570\u7ec4 \\(A\\) \uff08\u957f\u5ea6\u4e3a \\(n\\) \uff09\u7684\u5de6\u7aef\u79fb\u52a8\u5230\u53f3\u7aef\uff0c\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u4e00\u4f4d\u3002\u6c42\u6bcf\u6b21\u6ed1\u52a8\u65f6\u7a97\u53e3\u533a\u4e2d\u7684\u6700\u5927\u503c\u3002 \u793a\u4f8b\uff08 \\(k=3,n=8\\) \uff0c\u7ea2\u8272\u6570\u503c\u5728\u7a97\u53e3\u533a\u5185\uff09\uff1a \\(A_1\\) \\(A_2\\) \\(A_3\\) \\(A_4\\) \\(A_5\\) \\(A_6\\) \\(A_7\\) \\(A_8\\) \u6700\u5927\u503c 1 3 -1 -3 5 3 6 7 3 1 3 -1 -3 5 3 6 7 3 1 3 -1 -3 5 3 6 7 5 1 3 -1 -3 5 3 6 7 5 1 3 -1 -3 5 3 6 7 6 1 3 -1 -3 5 3 6 7 7 \u6734\u7d20\u7b97\u6cd5 $ \u679a\u4e3e \\(i=k\\rightarrow n\\) \uff0c\u679a\u4e3e\u51fa\u533a\u95f4 \\([i-k+1,i]\\) \u4e2d\u7684\u6700\u5927\u6574\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nk)\\) \u3002 Code for ( int i = k ; i <= n ; i ++ ) { int maxn = a [ i ]; for ( int j = i - k + 1 ; j <= i ; j ++ ) maxn = max ( maxn , a [ j ]); cout << maxn << ' ' ; } \u5355\u8c03\u961f\u5217\u4f18\u5316 $ \u4f7f\u7528\u5355\u8c03\u9012\u51cf\u961f\u5217\u4f18\u5316\u300c\u67e5\u627e\u533a\u95f4 \\([i-k+1,i]\\) \u4e2d\u7684\u6700\u5927\u6574\u6570\u300d\u7684\u6548\u7387\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code deque < int > q ; void insert ( int i , int p ) { while ( ! q . empty () && q . front () < p ) q . pop_front (); while ( ! q . empty () && a [ q . back ()] <= a [ i ]) q . pop_back (); q . push_back ( i ); } for ( int i = 1 ; i <= n ; i ++ ) { insert ( i , i - k + 1 ); if ( i >= k ) cout << a [ q . front ()] << ' ' ; } th, td { font-size: 14px; } .md-typeset table:not([class]) th { min-width: 3rem; }","title":"\u961f\u5217"},{"location":"posts/ds/queue/#_1","text":"\u961f\u5217\u662f\u4e00\u79cd\u300c\u5148\u8fdb\u5148\u51fa\u300d\u7684\u6570\u636e\u7ed3\u6784\u3002\u5143\u7d20\u4ece\u961f\u5217\u7684\u524d\u7aef\u8fdb\u5165\uff08\u5165\u961f\uff09\uff0c\u4ece\u672b\u7aef\u79bb\u5f00\uff08\u51fa\u961f\uff09\uff0c\u7c7b\u4f3c\u4e8e\u6392\u961f\u3002\u57fa\u672c\u64cd\u4f5c\u89c1 STL Queue \u3002","title":"\u7b80\u4ecb"},{"location":"posts/ds/queue/#_2","text":"\u961f\u5217\u5143\u7d20\u53ea\u80fd\u4ece\u4e00\u7aef\u8fdb\uff0c\u53e6\u4e00\u7aef\u51fa\uff0c\u6709\u65f6\u65e0\u6cd5\u6ee1\u8db3\u95ee\u9898\u7684\u9700\u8981\u3002\u53cc\u5411\u961f\u5217\u5e94\u8fd0\u800c\u751f\uff0c\u5b83\u652f\u6301\u4ece\u4e24\u7aef\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u3002 \u53cc\u5411\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c\u89c1 STL Deque \u3002","title":"\u53cc\u5411\u961f\u5217"},{"location":"posts/ds/queue/#_3","text":"\u5355\u8c03\u961f\u5217\u7684\u5143\u7d20\u4ece\u961f\u5934\u5230\u961f\u5c3e\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u9002\u7528\u4e8e\u67e5\u8be2\u67d0\u4e00\u52a8\u6001\u533a\u95f4\u7684\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\u5143\u7d20\u3002","title":"\u5355\u8c03\u961f\u5217"},{"location":"posts/ds/queue/#_4","text":"\u5c06 \\(A[i]\\) \u5165\u961f\uff0c\u7ef4\u62a4\u961f\u5217\u5355\u8c03\u6027\uff0c\u540c\u65f6\u4fdd\u8bc1\u961f\u5217\u5143\u7d20\u5728 \\(A[p\\cdots i]\\) \u8303\u56f4\u5185\u3002\u4ee5\u5355\u8c03\u9012\u589e\u961f\u5217\u4e3a\u4f8b\uff1a \u91cd\u590d\u5f39\u51fa\u961f\u5934\uff0c\u76f4\u5230\u961f\u5934 \\(\u2265p\\) \uff1b \u91cd\u590d\u5f39\u51fa\u961f\u5c3e\uff0c\u76f4\u5230 \\(A[\\) \u961f\u5c3e \\(]<A[i]\\) \uff08\u82e5\u5355\u8c03\u9012\u51cf\uff0c\u5219\u91cd\u590d\u76f4\u5230 \\(A[\\) \u961f\u5c3e \\(]>A[i]\\) \uff09\u3002 \u5c06 \\(i\\) \u5165\u961f\u3002 \u6d89\u53ca\u53cc\u7aef\u64cd\u4f5c\uff0c\u987b\u4f7f\u7528\u53cc\u5411\u961f\u5217\u3002\u6b64\u65f6 \\(A[p\\cdots i]\\) \u8303\u56f4\u5185\u6700\u5c0f\u5143\u7d20\u4e3a \\(A[\\) \u961f\u5934 \\(]\\) \u3002 Code deque < int > q ; // \u5b58\u50a8\u5143\u7d20\u4e0b\u6807 void insert ( int i , int p ) { // \u5c06 a[i] \u5165\u961f\uff0c\u7ef4\u62a4\u961f\u5217\u5143\u7d20\u5728 a[p...i] \u8303\u56f4\u5185 while ( ! q . empty () && q . front () < p ) q . pop_front (); while ( ! q . empty () && a [ q . back ()] >= a [ i ]) q . pop_back (); q . push_back ( i ); }","title":"\u63d2\u5165\u5143\u7d20"},{"location":"posts/ds/queue/#_5","text":"Question \u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff08\u957f\u5ea6\u4e3a \\(k\\) \uff09\u4ece\u6570\u7ec4 \\(A\\) \uff08\u957f\u5ea6\u4e3a \\(n\\) \uff09\u7684\u5de6\u7aef\u79fb\u52a8\u5230\u53f3\u7aef\uff0c\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u4e00\u4f4d\u3002\u6c42\u6bcf\u6b21\u6ed1\u52a8\u65f6\u7a97\u53e3\u533a\u4e2d\u7684\u6700\u5927\u503c\u3002 \u793a\u4f8b\uff08 \\(k=3,n=8\\) \uff0c\u7ea2\u8272\u6570\u503c\u5728\u7a97\u53e3\u533a\u5185\uff09\uff1a \\(A_1\\) \\(A_2\\) \\(A_3\\) \\(A_4\\) \\(A_5\\) \\(A_6\\) \\(A_7\\) \\(A_8\\) \u6700\u5927\u503c 1 3 -1 -3 5 3 6 7 3 1 3 -1 -3 5 3 6 7 3 1 3 -1 -3 5 3 6 7 5 1 3 -1 -3 5 3 6 7 5 1 3 -1 -3 5 3 6 7 6 1 3 -1 -3 5 3 6 7 7","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"posts/ds/queue/#_6","text":"\u679a\u4e3e \\(i=k\\rightarrow n\\) \uff0c\u679a\u4e3e\u51fa\u533a\u95f4 \\([i-k+1,i]\\) \u4e2d\u7684\u6700\u5927\u6574\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nk)\\) \u3002 Code for ( int i = k ; i <= n ; i ++ ) { int maxn = a [ i ]; for ( int j = i - k + 1 ; j <= i ; j ++ ) maxn = max ( maxn , a [ j ]); cout << maxn << ' ' ; }","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"posts/ds/queue/#_7","text":"\u4f7f\u7528\u5355\u8c03\u9012\u51cf\u961f\u5217\u4f18\u5316\u300c\u67e5\u627e\u533a\u95f4 \\([i-k+1,i]\\) \u4e2d\u7684\u6700\u5927\u6574\u6570\u300d\u7684\u6548\u7387\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code deque < int > q ; void insert ( int i , int p ) { while ( ! q . empty () && q . front () < p ) q . pop_front (); while ( ! q . empty () && a [ q . back ()] <= a [ i ]) q . pop_back (); q . push_back ( i ); } for ( int i = 1 ; i <= n ; i ++ ) { insert ( i , i - k + 1 ); if ( i >= k ) cout << a [ q . front ()] << ' ' ; } th, td { font-size: 14px; } .md-typeset table:not([class]) th { min-width: 3rem; }","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316"},{"location":"posts/ds/seg-tree/","text":"Code int n , a [], t []; void build ( int node , int l , int r ) { if ( l == r ) { t [ node ] = a [ l ]; return ; } int m = ( l + r ) / 2 ; int node_l = node * 2 + 1 ; int node_r = node * 2 + 2 ; build ( node_l , l , m ); build ( node_r , m + 1 , r ); t [ node ] = t [ node_l ] + t [ node_r ]; } void set ( int node , int l , int r , int id , int v ) { if ( l == r ) { t [ node ] = a [ id ] = v ; return ; } int m = ( l + r ) / 2 ; int node_l = node * 2 + 1 ; int node_r = node * 2 + 2 ; if ( id <= m ) set ( node_l , l , m , id , v ); else set ( node_r , m + 1 , r , id , v ); t [ node ] = t [ node_l ] + t [ node_r ]; } int get ( int node , int l , int r , int L , int R ) { if ( R < l || L > r ) return 0 ; else if ( l == r ) return t [ node ]; int m = ( l + r ) / 2 ; int node_l = node * 2 + 1 ; int node_r = node * 2 + 2 ; return get ( node_l , l , m , L , R ) + get ( node_r , m + 1 , r , L , R ); }","title":"\u7ebf\u6bb5\u6811"},{"location":"posts/ds/stack/","text":"\u7b80\u4ecb $ \u6808\u662f\u4e00\u79cd\u300c\u5148\u8fdb\u540e\u51fa\u300d\u7684\u6570\u636e\u7ed3\u6784\u3002\u7c7b\u4f3c\u4e8e\u5728\u6876\u4e2d\u5806\u79ef\u7269\u54c1\uff0c\u53d6\u7269\u54c1\u65f6\u53ea\u80fd\u4ece\u9876\u7aef\u5f00\u59cb\u53d6\uff0c\u6700\u5148\u8fdb\u6876\u7684\u88ab\u538b\u5728\u6700\u5e95\u4e0b\uff0c\u6700\u540e\u88ab\u53d6\u51fa\u6765\u3002\u57fa\u672c\u64cd\u4f5c\u89c1 STL Stack \u3002 \u8868\u8fbe\u5f0f\u8ba1\u7b97 $ \u7b97\u672f\u8868\u8fbe\u5f0f\u5206\u4e3a\u4e09\u7c7b\uff08 \\(op\\) \u4e3a\u8fd0\u7b97\u7b26\uff0c \\(A,B\\) \u4e3a\u6570\u5b57\u6216\u8868\u8fbe\u5f0f\uff09\uff1a \u4e2d\u7f00\u8868\u8fbe\u5f0f \uff1a\u5168\u56fd\u4eba\u6c11\u90fd\u5728\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u5982\u300c \\(5\u00d7(3+2)\\) \u300d\uff1b \u524d\u7f00\u8868\u8fbe\u5f0f \uff1a\u5f62\u5982\u300c \\(op \\ \\textcolor{red}{A} \\ \\textcolor{blue}{B}\\) \u300d\uff0c\u5982\u300c \\(\u00d7 \\ \\textcolor{red}{5} \\ \\textcolor{blue}{+} \\ \\textcolor{blue}{3} \\ \\textcolor{blue}{2}\\) \u300d\uff1b \u540e\u7f00\u8868\u8fbe\u5f0f \uff1a\u5f62\u5982\u300c \\(\\textcolor{red}{A} \\ \\textcolor{blue}{B} \\ op\\) \u300d\uff0c\u5982\u300c \\(\\textcolor{red}{3} \\ \\textcolor{red}{2} \\ \\textcolor{red}{+} \\ \\textcolor{blue}{5} \\ \u00d7\\) \u300d\u3002 \u8ba1\u7b97\u524d/\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\uff0c\u5148\u9012\u5f52\u6c42\u51fa \\(A,B\\) \u7684\u503c\uff0c\u4e8c\u8005\u518d\u505a \\(op\\) \u8fd0\u7b97\u3002\u8ba1\u7b97\u65b9\u6848\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u4e14\u4e0d\u9700\u8981\u4f7f\u7528\u62ec\u53f7\u3002\u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u7b97\u6cd5\u6700\u5bb9\u6613\u8bbe\u8ba1\u3002 \u540e\u7f00\u8868\u8fbe\u5f0f $ \u5b9a\u4e49\u4e00\u4e2a\u6808\uff0c\u7528\u4e8e\u5b58\u653e\u6570\uff1b \u9010\u4e00\u626b\u63cf\u540e\u7f00\u8868\u8fbe\u5f0f\u4e2d\u7684\u5143\u7d20\uff1a \u82e5\u626b\u5230\u4e00\u4e2a\u6570 \\(n\\) \uff0c\u5219\u628a \\(n\\) \u5165\u6808\uff1b \u82e5\u626b\u5230\u8fd0\u7b97\u7b26 \\(op\\) \uff0c\u5219\u5f39\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4e8c\u8005\u505a \\(op\\) \u8ba1\u7b97\u3002\u5c06\u8ba1\u7b97\u7ed3\u679c\u5165\u6808\u3002 \u6700\u7ec8\u7684\u6808\u9876\u5143\u7d20\u5c31\u662f\u8ba1\u7b97\u7ed3\u679c\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code bool isdigit ( char ch ) { // \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57 return ch >= '0' && ch <= '9' ; } bool isop ( char ch ) { // \u5224\u65ad\u662f\u5426\u4e3a\u8fd0\u7b97\u7b26 return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^' ; } double postfix_calc ( string str ) { stack < double > s ; int i = 0 ; s = stack < double > (); while ( i < str . size ()) { if ( isdigit ( str [ i ])) { // \u5047\u5b9a\u8f93\u5165\u6570\u636e\u53ea\u5305\u542b\u6574\u6570 double x = 0 ; while ( isdigit ( str [ i ])) x = x * 10 + str [ i ++ ] - '0' ; s . push ( x ); continue ; } else if ( isop ( str [ i ])) { double r = s . top (); s . pop (); double l = s . top (); s . pop (); double ans ; switch ( str [ i ]) { case '+' : ans = l + r ; break ; case '-' : ans = l - r ; break ; case '*' : ans = l * r ; break ; case '/' : ans = l / r ; break ; case '^' : ans = pow ( l , r ); break ; } s . push ( ans ); } i ++ ; } return s . top (); } \u4e2d\u7f00\u8868\u8fbe\u5f0f $ \u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210 \u540e\u7f00\u8868\u8fbe\u5f0f \u540e\u518d\u8ba1\u7b97\u3002 \u5b9a\u4e49\u4e00\u4e2a\u6808\uff0c\u7528\u4e8e\u5b58\u653e\u8fd0\u7b97\u7b26\uff1b \u9010\u4e00\u626b\u63cf\u4e2d\u7f00\u8868\u8fbe\u5f0f\u4e2d\u7684\u5143\u7d20\uff1a \u82e5\u626b\u5230\u4e00\u4e2a\u6570 \\(n\\) \uff0c\u76f4\u63a5\u8f93\u51fa \\(n\\) \uff1b \u82e5\u626b\u5230\u300c\u5de6\u62ec\u53f7\u300d\uff0c\u628a\u5de6\u62ec\u53f7\u5165\u6808\uff1b \u82e5\u626b\u5230\u300c\u53f3\u62ec\u53f7\u300d\uff0c\u91cd\u590d\u53d6\u6808\u9876\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u6808\u9876\u4e3a\u5de6\u62ec\u53f7\uff0c\u518d\u51fa\u6808\u5de6\u62ec\u53f7\uff1b \u82e5\u626b\u5230\u5176\u5b83\u8fd0\u7b97\u7b26 \\(op\\) \uff0c\u91cd\u590d\u53d6\u6808\u9876\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u6808\u9876\u7684 \u4f18\u5148\u7ea7 \u5927\u4e8e \\(op\\) \uff0c\u518d\u628a \\(op\\) \u5165\u6808\u3002 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u8d8a\u665a\u51fa\u6808\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u300c\u5de6\u62ec\u53f7\u300d\u7684\u4f18\u5148\u7ea7\u89c6\u4f5c\u6700\u4f4e\uff0c\u300c\u53f3\u62ec\u53f7\u300d\u7684\u4f18\u5148\u7ea7\u89c6\u4f5c\u6700\u9ad8\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u8fd0\u7b97\u7b26 \\((\\) \\(+/-\\) \\(\u00d7/\u00f7\\) \\(\\wedge\\) \\()\\) \u4f18\u5148\u7ea7 \u6700\u4f4e\uff080\uff09 \u4f4e\uff081\uff09 \u4e2d\uff082\uff09 \u9ad8\uff083\uff09 \u6700\u9ad8\uff084\uff09 Code int lev ( char ch ) { // \u8fd4\u56de\u8fd0\u7b97\u7b26\u5bf9\u5e94\u7684\u4f18\u5148\u7ea7 int level ; switch ( ch ) { case '(' : level = 0 ; break ; case ')' : level = 4 ; break ; case '+' : level = 1 ; break ; case '-' : level = 1 ; break ; case '*' : level = 2 ; break ; case '/' : level = 2 ; break ; case '^' : level = 3 ; break ; } return level ; } double infix_calc ( string str ) { string data ; stack < char > op ; int i = 0 ; while ( i < str . size ()) { if ( isdigit ( str [ i ])) { while ( isdigit ( str [ i ])) data += str [ i ++ ]; data += ' ' ; // \u6570\u4e0e\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u533a\u5206 continue ; } else if ( isop ( str [ i ])) { while ( ! op . empty () && lev ( op . top ()) <= lev ( str [ i ])) { if ( op . top () != '(' && op . top () != ')' ) data += op . top (); op . pop (); } op . push ( str [ i ]); } i ++ ; } while ( ! op . empty ()) { // \u8f93\u51fa\u6808\u5185\u5269\u4f59\u5143\u7d20 if ( op . top () != '(' && op . top () != ')' ) data += op . top (); op . pop (); } return postfix_calc ( data ); } \u5355\u8c03\u6808 $ \u5355\u8c03\u6808\u4e2d\u7684\u5143\u7d20\u4ece\u6808\u5e95\u5230\u6808\u9876\u6ee1\u8db3\u5355\u8c03\u6027\u3002 \u63d2\u5165\u5143\u7d20 $ \u5c06\u5143\u7d20 \\(x\\) \u5165\u6808\uff0c\u540c\u65f6\u7ef4\u62a4\u6808\u7684\u5355\u8c03\u6027\u3002\u4ee5\u5355\u8c03\u9012\u589e\u6808\u4e3a\u4f8b\uff1a \u4ece\u6808\u9876\u4f9d\u6b21\u5f39\u6389\u6bd4 \\(x\\) \u5927\u7684\u5143\u7d20\uff0c\u4fdd\u8bc1 \\(x\u2265\\) \u6808\u9876\uff1b \u5c06 \\(x\\) \u5165\u6808\u3002 Code stack < int > s ; void insert ( int x ) while ( ! s . empty () && s . top () > x ) s . pop (); s . push ( x ); } \u5e94\u7528 $ \u5355\u8c03\u9012\u589e\u6808\u53ef\u4ee5\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u300c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20\u300d\u3002\u4f8b\u5982 \\(A=\\{1,2,5,4,3,6\\}\\) \uff0c \\(A_5=3\\) \u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u662f \\(A_2=2\\) \u3002 \u987a\u5e8f\u626b\u63cf \\(A\\) \uff0c\u5c06 \\(A_i\\) \u63d2\u5165\u5355\u8c03\u6808\u524d\uff0c\u6808\u4e2d\u6bd4 \\(A_i\\) \u5927\u7684\u5143\u7d20\u90fd\u88ab\u5f39\u6389\u4e86\uff0c\u6808\u9876\u5143\u7d20\u5373\u4e3a\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4 \\(A_i\\) \u5c0f\u7684\u5143\u7d20\u3002 Code stack < int > s ; for ( int i = 1 ; i <= n ; i ++ ) { while ( ! s . empty () && s . top () > a [ i ]) s . pop (); if ( ! s . empty ()) cout << s . top () << endl ; // \u8f93\u51fa a[i] \u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 else cout << \"none\" << endl ; // \u5982\u679c\u6ca1\u6709\u5219\u8f93\u51fa none s . push ( a [ i ]); } Info \u6c42\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u2014\u2014 \u987a\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u589e\u6808\uff1b \u6c42\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20 \u2014\u2014 \u987a\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u51cf\u6808\uff1b \u6c42\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u2014\u2014 \u5012\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u589e\u6808\uff1b \u6c42\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20 \u2014\u2014 \u5012\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u51cf\u6808\u3002","title":"\u6808"},{"location":"posts/ds/stack/#_1","text":"\u6808\u662f\u4e00\u79cd\u300c\u5148\u8fdb\u540e\u51fa\u300d\u7684\u6570\u636e\u7ed3\u6784\u3002\u7c7b\u4f3c\u4e8e\u5728\u6876\u4e2d\u5806\u79ef\u7269\u54c1\uff0c\u53d6\u7269\u54c1\u65f6\u53ea\u80fd\u4ece\u9876\u7aef\u5f00\u59cb\u53d6\uff0c\u6700\u5148\u8fdb\u6876\u7684\u88ab\u538b\u5728\u6700\u5e95\u4e0b\uff0c\u6700\u540e\u88ab\u53d6\u51fa\u6765\u3002\u57fa\u672c\u64cd\u4f5c\u89c1 STL Stack \u3002","title":"\u7b80\u4ecb"},{"location":"posts/ds/stack/#_2","text":"\u7b97\u672f\u8868\u8fbe\u5f0f\u5206\u4e3a\u4e09\u7c7b\uff08 \\(op\\) \u4e3a\u8fd0\u7b97\u7b26\uff0c \\(A,B\\) \u4e3a\u6570\u5b57\u6216\u8868\u8fbe\u5f0f\uff09\uff1a \u4e2d\u7f00\u8868\u8fbe\u5f0f \uff1a\u5168\u56fd\u4eba\u6c11\u90fd\u5728\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u5982\u300c \\(5\u00d7(3+2)\\) \u300d\uff1b \u524d\u7f00\u8868\u8fbe\u5f0f \uff1a\u5f62\u5982\u300c \\(op \\ \\textcolor{red}{A} \\ \\textcolor{blue}{B}\\) \u300d\uff0c\u5982\u300c \\(\u00d7 \\ \\textcolor{red}{5} \\ \\textcolor{blue}{+} \\ \\textcolor{blue}{3} \\ \\textcolor{blue}{2}\\) \u300d\uff1b \u540e\u7f00\u8868\u8fbe\u5f0f \uff1a\u5f62\u5982\u300c \\(\\textcolor{red}{A} \\ \\textcolor{blue}{B} \\ op\\) \u300d\uff0c\u5982\u300c \\(\\textcolor{red}{3} \\ \\textcolor{red}{2} \\ \\textcolor{red}{+} \\ \\textcolor{blue}{5} \\ \u00d7\\) \u300d\u3002 \u8ba1\u7b97\u524d/\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\uff0c\u5148\u9012\u5f52\u6c42\u51fa \\(A,B\\) \u7684\u503c\uff0c\u4e8c\u8005\u518d\u505a \\(op\\) \u8fd0\u7b97\u3002\u8ba1\u7b97\u65b9\u6848\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u4e14\u4e0d\u9700\u8981\u4f7f\u7528\u62ec\u53f7\u3002\u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u7b97\u6cd5\u6700\u5bb9\u6613\u8bbe\u8ba1\u3002","title":"\u8868\u8fbe\u5f0f\u8ba1\u7b97"},{"location":"posts/ds/stack/#_3","text":"\u5b9a\u4e49\u4e00\u4e2a\u6808\uff0c\u7528\u4e8e\u5b58\u653e\u6570\uff1b \u9010\u4e00\u626b\u63cf\u540e\u7f00\u8868\u8fbe\u5f0f\u4e2d\u7684\u5143\u7d20\uff1a \u82e5\u626b\u5230\u4e00\u4e2a\u6570 \\(n\\) \uff0c\u5219\u628a \\(n\\) \u5165\u6808\uff1b \u82e5\u626b\u5230\u8fd0\u7b97\u7b26 \\(op\\) \uff0c\u5219\u5f39\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4e8c\u8005\u505a \\(op\\) \u8ba1\u7b97\u3002\u5c06\u8ba1\u7b97\u7ed3\u679c\u5165\u6808\u3002 \u6700\u7ec8\u7684\u6808\u9876\u5143\u7d20\u5c31\u662f\u8ba1\u7b97\u7ed3\u679c\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code bool isdigit ( char ch ) { // \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57 return ch >= '0' && ch <= '9' ; } bool isop ( char ch ) { // \u5224\u65ad\u662f\u5426\u4e3a\u8fd0\u7b97\u7b26 return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^' ; } double postfix_calc ( string str ) { stack < double > s ; int i = 0 ; s = stack < double > (); while ( i < str . size ()) { if ( isdigit ( str [ i ])) { // \u5047\u5b9a\u8f93\u5165\u6570\u636e\u53ea\u5305\u542b\u6574\u6570 double x = 0 ; while ( isdigit ( str [ i ])) x = x * 10 + str [ i ++ ] - '0' ; s . push ( x ); continue ; } else if ( isop ( str [ i ])) { double r = s . top (); s . pop (); double l = s . top (); s . pop (); double ans ; switch ( str [ i ]) { case '+' : ans = l + r ; break ; case '-' : ans = l - r ; break ; case '*' : ans = l * r ; break ; case '/' : ans = l / r ; break ; case '^' : ans = pow ( l , r ); break ; } s . push ( ans ); } i ++ ; } return s . top (); }","title":"\u540e\u7f00\u8868\u8fbe\u5f0f"},{"location":"posts/ds/stack/#_4","text":"\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210 \u540e\u7f00\u8868\u8fbe\u5f0f \u540e\u518d\u8ba1\u7b97\u3002 \u5b9a\u4e49\u4e00\u4e2a\u6808\uff0c\u7528\u4e8e\u5b58\u653e\u8fd0\u7b97\u7b26\uff1b \u9010\u4e00\u626b\u63cf\u4e2d\u7f00\u8868\u8fbe\u5f0f\u4e2d\u7684\u5143\u7d20\uff1a \u82e5\u626b\u5230\u4e00\u4e2a\u6570 \\(n\\) \uff0c\u76f4\u63a5\u8f93\u51fa \\(n\\) \uff1b \u82e5\u626b\u5230\u300c\u5de6\u62ec\u53f7\u300d\uff0c\u628a\u5de6\u62ec\u53f7\u5165\u6808\uff1b \u82e5\u626b\u5230\u300c\u53f3\u62ec\u53f7\u300d\uff0c\u91cd\u590d\u53d6\u6808\u9876\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u6808\u9876\u4e3a\u5de6\u62ec\u53f7\uff0c\u518d\u51fa\u6808\u5de6\u62ec\u53f7\uff1b \u82e5\u626b\u5230\u5176\u5b83\u8fd0\u7b97\u7b26 \\(op\\) \uff0c\u91cd\u590d\u53d6\u6808\u9876\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u6808\u9876\u7684 \u4f18\u5148\u7ea7 \u5927\u4e8e \\(op\\) \uff0c\u518d\u628a \\(op\\) \u5165\u6808\u3002 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u8d8a\u665a\u51fa\u6808\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u300c\u5de6\u62ec\u53f7\u300d\u7684\u4f18\u5148\u7ea7\u89c6\u4f5c\u6700\u4f4e\uff0c\u300c\u53f3\u62ec\u53f7\u300d\u7684\u4f18\u5148\u7ea7\u89c6\u4f5c\u6700\u9ad8\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u8fd0\u7b97\u7b26 \\((\\) \\(+/-\\) \\(\u00d7/\u00f7\\) \\(\\wedge\\) \\()\\) \u4f18\u5148\u7ea7 \u6700\u4f4e\uff080\uff09 \u4f4e\uff081\uff09 \u4e2d\uff082\uff09 \u9ad8\uff083\uff09 \u6700\u9ad8\uff084\uff09 Code int lev ( char ch ) { // \u8fd4\u56de\u8fd0\u7b97\u7b26\u5bf9\u5e94\u7684\u4f18\u5148\u7ea7 int level ; switch ( ch ) { case '(' : level = 0 ; break ; case ')' : level = 4 ; break ; case '+' : level = 1 ; break ; case '-' : level = 1 ; break ; case '*' : level = 2 ; break ; case '/' : level = 2 ; break ; case '^' : level = 3 ; break ; } return level ; } double infix_calc ( string str ) { string data ; stack < char > op ; int i = 0 ; while ( i < str . size ()) { if ( isdigit ( str [ i ])) { while ( isdigit ( str [ i ])) data += str [ i ++ ]; data += ' ' ; // \u6570\u4e0e\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u533a\u5206 continue ; } else if ( isop ( str [ i ])) { while ( ! op . empty () && lev ( op . top ()) <= lev ( str [ i ])) { if ( op . top () != '(' && op . top () != ')' ) data += op . top (); op . pop (); } op . push ( str [ i ]); } i ++ ; } while ( ! op . empty ()) { // \u8f93\u51fa\u6808\u5185\u5269\u4f59\u5143\u7d20 if ( op . top () != '(' && op . top () != ')' ) data += op . top (); op . pop (); } return postfix_calc ( data ); }","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f"},{"location":"posts/ds/stack/#_5","text":"\u5355\u8c03\u6808\u4e2d\u7684\u5143\u7d20\u4ece\u6808\u5e95\u5230\u6808\u9876\u6ee1\u8db3\u5355\u8c03\u6027\u3002","title":"\u5355\u8c03\u6808"},{"location":"posts/ds/stack/#_6","text":"\u5c06\u5143\u7d20 \\(x\\) \u5165\u6808\uff0c\u540c\u65f6\u7ef4\u62a4\u6808\u7684\u5355\u8c03\u6027\u3002\u4ee5\u5355\u8c03\u9012\u589e\u6808\u4e3a\u4f8b\uff1a \u4ece\u6808\u9876\u4f9d\u6b21\u5f39\u6389\u6bd4 \\(x\\) \u5927\u7684\u5143\u7d20\uff0c\u4fdd\u8bc1 \\(x\u2265\\) \u6808\u9876\uff1b \u5c06 \\(x\\) \u5165\u6808\u3002 Code stack < int > s ; void insert ( int x ) while ( ! s . empty () && s . top () > x ) s . pop (); s . push ( x ); }","title":"\u63d2\u5165\u5143\u7d20"},{"location":"posts/ds/stack/#_7","text":"\u5355\u8c03\u9012\u589e\u6808\u53ef\u4ee5\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u300c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20\u300d\u3002\u4f8b\u5982 \\(A=\\{1,2,5,4,3,6\\}\\) \uff0c \\(A_5=3\\) \u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u662f \\(A_2=2\\) \u3002 \u987a\u5e8f\u626b\u63cf \\(A\\) \uff0c\u5c06 \\(A_i\\) \u63d2\u5165\u5355\u8c03\u6808\u524d\uff0c\u6808\u4e2d\u6bd4 \\(A_i\\) \u5927\u7684\u5143\u7d20\u90fd\u88ab\u5f39\u6389\u4e86\uff0c\u6808\u9876\u5143\u7d20\u5373\u4e3a\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4 \\(A_i\\) \u5c0f\u7684\u5143\u7d20\u3002 Code stack < int > s ; for ( int i = 1 ; i <= n ; i ++ ) { while ( ! s . empty () && s . top () > a [ i ]) s . pop (); if ( ! s . empty ()) cout << s . top () << endl ; // \u8f93\u51fa a[i] \u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 else cout << \"none\" << endl ; // \u5982\u679c\u6ca1\u6709\u5219\u8f93\u51fa none s . push ( a [ i ]); } Info \u6c42\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u2014\u2014 \u987a\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u589e\u6808\uff1b \u6c42\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20 \u2014\u2014 \u987a\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u51cf\u6808\uff1b \u6c42\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u2014\u2014 \u5012\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u589e\u6808\uff1b \u6c42\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20 \u2014\u2014 \u5012\u5e8f\u626b\u63cf + \u5355\u8c03\u9012\u51cf\u6808\u3002","title":"\u5e94\u7528"},{"location":"posts/ds/tree-array/","text":"\u7b80\u4ecb $ \u6811\u72b6\u6570\u7ec4 \u5de7\u5999\u5730\u5229\u7528 \u6811\u7ed3\u6784 \uff0c\u4f18\u5316\u4e86\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u7684\u6548\u7387\u3002 \u652f\u6301\u4fee\u6539\u6570\u7ec4\u5355\u4e2a\u5143\u7d20\u7684\u503c\uff1b \u652f\u6301\u5feb\u901f\u67e5\u8be2\u6570\u7ec4\u67d0\u533a\u95f4\u7684\u5143\u7d20\u548c\uff08\u6216\u79ef\uff09\u3002 \u524d\u7f6e\u77e5\u8bc6\uff1a \\(\\rm lowbit\\) \u8fd0\u7b97 \u3002 \u5f15\u5165\u95ee\u9898 $ Question \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(A\\) \uff0c\u8fdb\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u82e5\u5e72\u6b21\uff1a \u5c06\u7b2c \\(x\\) \u4e2a\u6570\u52a0\u4e0a \\(k\\) \uff1b \u8f93\u51fa\u533a\u95f4 \\([l,r]\\) \u5185\u6bcf\u4e2a\u6570\u7684\u548c\uff0c\u5373 \\(A\\) \u7684\u7b2c \\(l\\sim r\\) \u4e2a\u5143\u7d20\u7684\u548c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n\\) \uff08\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\uff09\u548c \\(m\\) \uff08\u64cd\u4f5c\u6b21\u6570\uff09\uff1b \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u8868\u793a \\(A_i\\) \uff1b \u63a5\u4e0b\u6765 \\(m\\) \u884c\u6bcf\u884c \\(3\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a 1 x k \uff1a\u5c06 \\(A_x\\) \u52a0\u4e0a \\(k\\) \uff1b 2 l r \uff1a\u8f93\u51fa\u533a\u95f4 \\([l,r]\\) \u5185\u6bcf\u4e2a\u6570\u7684\u548c\uff08\u533a\u95f4\u67e5\u8be2\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u7684\u7ed3\u679c\u4ee5\u6362\u884c\u9694\u5f00\u3002 \u8f93\u5165\u6837\u4f8b 5 5 1 5 4 2 3 1 1 3 2 2 5 1 3 -1 1 4 2 2 1 4 \u8f93\u51fa\u6837\u4f8b 14 16 \u6570\u636e\u8303\u56f4 \\(1\u2264n,m\u22645\u00d710^5\\) \u3002 \u66b4\u529b\u7b97\u6cd5 $ \u5355\u70b9\u4fee\u6539\uff1a\u76f4\u63a5\u66f4\u6539\u539f\u6570\u7ec4\u4e2d \\(A_x\\) \u7684\u503c\uff1b \u533a\u95f4\u67e5\u8be2\uff1a\u904d\u5386\u6574\u4e2a\u533a\u95f4 \\([l,r]\\) \u5185\u7684\u5143\u7d20\uff0c\u7d2f\u52a0\u3002 Code int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; while ( m -- ) { cin >> op ; if ( op == 1 ) { cin >> x >> k ; a [ x ] += k ; // \u5355\u70b9\u4fee\u6539 } else { int sum = 0 ; cin >> l >> r ; for (; l <= r ; l ++ ) // \u904d\u5386\u533a\u95f4 [l, r] \u7684\u5143\u7d20 sum += a [ l ]; cout << sum << endl ; } } } \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5355\u70b9\u4fee\u6539\uff1a \\(O(1)\\) \uff1b \u533a\u95f4\u67e5\u8be2\uff1a \\(O(n)\\) \u3002 \\(m\\) \u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002\u8be5\u505a\u6cd5\u663e\u7136\u63a5\u53d7\u4e0d\u4e86\u5927\u6570\u636e\u3002 \u4f7f\u7528\u300c \u6811\u72b6\u6570\u7ec4 \u300d\u4ee5\u82df\u8fc7\u6240\u6709\u7684\u6d4b\u8bd5\u70b9\u3002 \u6811\u72b6\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5355\u70b9\u4fee\u6539\uff1a \\(O(\\log{n})\\) \uff1b \u533a\u95f4\u67e5\u8be2\uff1a \\(O(\\log{n})\\) \u3002 \\(m\\) \u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u4e3a \\(O(m\\log{n})\\) \uff0c\u53ef\u4ee5\u8dd1\u975e\u5e38\u5927\u89c4\u6a21\u7684\u6570\u636e\u3002 \u6784\u9020 $ \u5728\u6570\u7ec4 \\(A\\) \u7684\u4e0a\u65b9\u5efa\u7acb\u8d77\u8fd9\u6837\u7684\u68ee\u6797\u7ed3\u6784\uff1a \u5176\u4e2d \\(C_i\\) \u7684\u503c\u4e3a\u300c\u4ee5 \\(C_i\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u53f6\u7ed3\u70b9\u503c\u7684\u548c\u300d\uff0c\u5373\uff1a \\(C_1=A_1\\) \uff1b \\(C_2=A_1+A_2\\) \uff1b \\(C_3=A_3\\) \uff1b \\(C_4=A_1+A_2+A_3+A_4\\) \uff1b \\(C_5=A_5\\) \uff1b \\(C_6=A_5+A_6\\) \uff1b \\(C_7=A_7\\) \uff1b \\(C_8=A_1+A_2+A_3+A_4+A_5+A_6+A_7+A_8\\) \u3002 \\(\\cdots \\ \\cdots\\) \u6bcf\u4e2a\u8282\u70b9\u8986\u76d6\u7684\u957f\u5ea6\u4e3a\u591a\u5c11\u5462\uff1f\u5c06 \\(C\\) \u6570\u7ec4\u6240\u6709\u5143\u7d20\u7684\u4e0b\u6807\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u518d\u5206\u522b\u8ba1\u7b97\u5b83\u4eec\u7684 \\(\\rm lowbit\\) \u503c \uff1a \u4f1a\u53d1\u73b0\u540c\u4e00\u5c42\u6240\u6709\u8282\u70b9\u4e0b\u6807\u7684 \\(\\rm lowbit\\) \u503c\u76f8\u540c\uff0c\u4e14\u8282\u70b9 \\(C_i\\) \u8986\u76d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a \\(\\rm lowbit(i)\\) \u3002 \u901a\u8fc7\u8fdb\u4e00\u6b65\u89c2\u5bdf\u53d1\u73b0\uff1a \\(C_i\\) \u7684\u7236\u8282\u70b9\u4e3a \\(C[i+\\rm lowbit(i)]\\) \u3002\u4f8b\u5982\uff1a \\(C[\\) 0010 \\(]\\) \u7684\u7236\u8282\u70b9 \\(=C[\\) 0010 \\(+ \\rm \\ lowbit(\\) 0010 \\()]=C[\\) 0010 \\(+\\) 10 \\(]=C[\\) 0100 \\(]\\) \u5355\u70b9\u4fee\u6539 $ \u5c06 \\(A_x\\) \u7684\u503c\u589e\u52a0 \\(k\\) \uff0c\u54ea\u4e9b\u8282\u70b9\u7684\u503c\u4f1a\u8ddf\u7740\u53d8\u52a8\uff1f\u4ee5 \\(A_3\\) \u4e3a\u4f8b\uff1a \\(C_3=\\textcolor{red}{A_3}\\) \uff1b \\(C_4=A_1+A_2+\\textcolor{red}{A_3}+A_4\\) \uff1b \\(C_8=A_1+A_2+\\textcolor{red}{A_3}+A_4+A_5+A_6+A_7+A_8\\) \u3002 \u56e0\u6b64\u9700\u8981\u5c06 \\(C_3,C_4,C_8\\) \u7684\u503c\u90fd\u52a0\u4e0a \\(k\\) \uff0c\u800c \\(C_3,C_4,C_8\\) \u6ee1\u8db3\u300c\u540e\u4e00\u4e2a\u662f\u524d\u4e00\u4e2a\u7684\u7236\u8282\u70b9\u300d\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684 \\(x\\) \uff0c\u4ece \\(C_x\\) \u5f00\u59cb\u4e00\u5c42\u5c42\u904d\u5386\u7236\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u503c\u52a0\u4e0a \\(k\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int lowbit ( int x ) { return x & - x ; } void add ( int p , int k ) { // \u5c06 a[p] \u589e\u52a0 k\uff0c\u540c\u65f6\u7ef4\u62a4\u6811\u7684\u6784\u9020 a [ p ] += k ; for (; p ; p += lowbit ( p )) c [ p ] += k ; } \u524d\u7f00\u67e5\u8be2 $ \u6811\u72b6\u6570\u7ec4\u652f\u6301\u67e5\u8be2\u524d\u7f00\u548c\uff0c\u5373\u6570\u7ec4 \\(A\\) \u7b2c \\(1\\sim x\\) \u4e2a\u5143\u7d20\u7684\u548c\u3002 \\(sum[x]\\) \u8868\u793a \\(A[1\\cdots x]\\) \u6240\u6709\u5143\u7d20\u7684\u548c\u3002\u4ee5 \\(sum[7]\\) \u4e3a\u4f8b\uff1a \\(C_4=A_1+A_2+A_3+A_4\\) \uff1b \\(C_6=A_5+A_6\\) \uff1b \\(C_7=A_7\\) \uff1b \u56e0\u800c \\(C_4+C_6+C_7=sum[7]\\) \u3002\u800c \\(C_7,C_6,C_4\\) \u6ee1\u8db3\u300c\u540e\u4e00\u4e2a\u662f\u524d\u4e00\u4e2a\u7684\u5de6\u4e0a\u65b9\u6700\u8fd1\u8282\u70b9\u300d\u3002 \u540c\u6837\u91c7\u7528\u4e8c\u8fdb\u5236\u601d\u60f3\uff0c\u5c06\u8282\u70b9\u7f16\u53f7\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff1a \u8fdb\u4e00\u6b65\u89c2\u5bdf\u53d1\u73b0\uff0c \\(C_i\\) \u7684\u5de6\u4e0a\u65b9\u6700\u8fd1\u8282\u70b9\u4e3a \\(C[i-\\rm lowbit(i)]\\) \u3002\u4f8b\u5982\uff1a \\(C[\\) 0111 \\(- \\rm \\ lowbit(\\) 0111 \\()]=C[\\) 0111 \\(-\\) 01 \\(]=C[\\) 0110 \\(]\\) \\(C[\\) 0110 \\(- \\rm \\ lowbit(\\) 0110 \\()]=C[\\) 0110 \\(-\\) 10 \\(]=C[\\) 0100 \\(]\\) \u67e5\u8be2 \\(sum[x]\\) \u65f6\uff0c\u5c06 \\(sum[x]\\) \u7684\u521d\u59cb\u503c\u8bbe\u4e3a \\(0\\) \uff0c\u4ece \\(C_x\\) \u5f00\u59cb\u4f9d\u6b21\u904d\u5386\u5de6\u4e0a\u65b9\u6700\u8fd1\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u503c\u7d2f\u52a0\u5728 \\(sum[x]\\) \u4e0a\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int ask ( int p ) { // \u67e5\u8be2 A[1...p] \u7684\u548c int sum = 0 ; for (; p ; p -= lowbit ( p )) sum += c [ p ]; return sum ; } \u533a\u95f4\u67e5\u8be2 $ \u91c7\u7528 \u524d\u7f00\u548c \u601d\u60f3\u3002 \\(get[l,r]\\) \u8868\u793a \\(A[l\\cdots r]\\) \u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5219\uff1a \\[ get[l,r]=sum[r]-sum[l-1]; \\] Code int get ( int l , int r ) { // \u67e5\u8be2 A[l...r] \u7684\u548c return ask ( r ) - ask ( l - 1 ); }","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"posts/ds/tree-array/#_1","text":"\u6811\u72b6\u6570\u7ec4 \u5de7\u5999\u5730\u5229\u7528 \u6811\u7ed3\u6784 \uff0c\u4f18\u5316\u4e86\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u7684\u6548\u7387\u3002 \u652f\u6301\u4fee\u6539\u6570\u7ec4\u5355\u4e2a\u5143\u7d20\u7684\u503c\uff1b \u652f\u6301\u5feb\u901f\u67e5\u8be2\u6570\u7ec4\u67d0\u533a\u95f4\u7684\u5143\u7d20\u548c\uff08\u6216\u79ef\uff09\u3002 \u524d\u7f6e\u77e5\u8bc6\uff1a \\(\\rm lowbit\\) \u8fd0\u7b97 \u3002","title":"\u7b80\u4ecb"},{"location":"posts/ds/tree-array/#_2","text":"Question \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(A\\) \uff0c\u8fdb\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u82e5\u5e72\u6b21\uff1a \u5c06\u7b2c \\(x\\) \u4e2a\u6570\u52a0\u4e0a \\(k\\) \uff1b \u8f93\u51fa\u533a\u95f4 \\([l,r]\\) \u5185\u6bcf\u4e2a\u6570\u7684\u548c\uff0c\u5373 \\(A\\) \u7684\u7b2c \\(l\\sim r\\) \u4e2a\u5143\u7d20\u7684\u548c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n\\) \uff08\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\uff09\u548c \\(m\\) \uff08\u64cd\u4f5c\u6b21\u6570\uff09\uff1b \u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u8868\u793a \\(A_i\\) \uff1b \u63a5\u4e0b\u6765 \\(m\\) \u884c\u6bcf\u884c \\(3\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a 1 x k \uff1a\u5c06 \\(A_x\\) \u52a0\u4e0a \\(k\\) \uff1b 2 l r \uff1a\u8f93\u51fa\u533a\u95f4 \\([l,r]\\) \u5185\u6bcf\u4e2a\u6570\u7684\u548c\uff08\u533a\u95f4\u67e5\u8be2\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u7684\u7ed3\u679c\u4ee5\u6362\u884c\u9694\u5f00\u3002 \u8f93\u5165\u6837\u4f8b 5 5 1 5 4 2 3 1 1 3 2 2 5 1 3 -1 1 4 2 2 1 4 \u8f93\u51fa\u6837\u4f8b 14 16 \u6570\u636e\u8303\u56f4 \\(1\u2264n,m\u22645\u00d710^5\\) \u3002","title":"\u5f15\u5165\u95ee\u9898"},{"location":"posts/ds/tree-array/#_3","text":"\u5355\u70b9\u4fee\u6539\uff1a\u76f4\u63a5\u66f4\u6539\u539f\u6570\u7ec4\u4e2d \\(A_x\\) \u7684\u503c\uff1b \u533a\u95f4\u67e5\u8be2\uff1a\u904d\u5386\u6574\u4e2a\u533a\u95f4 \\([l,r]\\) \u5185\u7684\u5143\u7d20\uff0c\u7d2f\u52a0\u3002 Code int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; while ( m -- ) { cin >> op ; if ( op == 1 ) { cin >> x >> k ; a [ x ] += k ; // \u5355\u70b9\u4fee\u6539 } else { int sum = 0 ; cin >> l >> r ; for (; l <= r ; l ++ ) // \u904d\u5386\u533a\u95f4 [l, r] \u7684\u5143\u7d20 sum += a [ l ]; cout << sum << endl ; } } } \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5355\u70b9\u4fee\u6539\uff1a \\(O(1)\\) \uff1b \u533a\u95f4\u67e5\u8be2\uff1a \\(O(n)\\) \u3002 \\(m\\) \u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002\u8be5\u505a\u6cd5\u663e\u7136\u63a5\u53d7\u4e0d\u4e86\u5927\u6570\u636e\u3002 \u4f7f\u7528\u300c \u6811\u72b6\u6570\u7ec4 \u300d\u4ee5\u82df\u8fc7\u6240\u6709\u7684\u6d4b\u8bd5\u70b9\u3002 \u6811\u72b6\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5355\u70b9\u4fee\u6539\uff1a \\(O(\\log{n})\\) \uff1b \u533a\u95f4\u67e5\u8be2\uff1a \\(O(\\log{n})\\) \u3002 \\(m\\) \u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u4e3a \\(O(m\\log{n})\\) \uff0c\u53ef\u4ee5\u8dd1\u975e\u5e38\u5927\u89c4\u6a21\u7684\u6570\u636e\u3002","title":"\u66b4\u529b\u7b97\u6cd5"},{"location":"posts/ds/tree-array/#_4","text":"\u5728\u6570\u7ec4 \\(A\\) \u7684\u4e0a\u65b9\u5efa\u7acb\u8d77\u8fd9\u6837\u7684\u68ee\u6797\u7ed3\u6784\uff1a \u5176\u4e2d \\(C_i\\) \u7684\u503c\u4e3a\u300c\u4ee5 \\(C_i\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u53f6\u7ed3\u70b9\u503c\u7684\u548c\u300d\uff0c\u5373\uff1a \\(C_1=A_1\\) \uff1b \\(C_2=A_1+A_2\\) \uff1b \\(C_3=A_3\\) \uff1b \\(C_4=A_1+A_2+A_3+A_4\\) \uff1b \\(C_5=A_5\\) \uff1b \\(C_6=A_5+A_6\\) \uff1b \\(C_7=A_7\\) \uff1b \\(C_8=A_1+A_2+A_3+A_4+A_5+A_6+A_7+A_8\\) \u3002 \\(\\cdots \\ \\cdots\\) \u6bcf\u4e2a\u8282\u70b9\u8986\u76d6\u7684\u957f\u5ea6\u4e3a\u591a\u5c11\u5462\uff1f\u5c06 \\(C\\) \u6570\u7ec4\u6240\u6709\u5143\u7d20\u7684\u4e0b\u6807\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u518d\u5206\u522b\u8ba1\u7b97\u5b83\u4eec\u7684 \\(\\rm lowbit\\) \u503c \uff1a \u4f1a\u53d1\u73b0\u540c\u4e00\u5c42\u6240\u6709\u8282\u70b9\u4e0b\u6807\u7684 \\(\\rm lowbit\\) \u503c\u76f8\u540c\uff0c\u4e14\u8282\u70b9 \\(C_i\\) \u8986\u76d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a \\(\\rm lowbit(i)\\) \u3002 \u901a\u8fc7\u8fdb\u4e00\u6b65\u89c2\u5bdf\u53d1\u73b0\uff1a \\(C_i\\) \u7684\u7236\u8282\u70b9\u4e3a \\(C[i+\\rm lowbit(i)]\\) \u3002\u4f8b\u5982\uff1a \\(C[\\) 0010 \\(]\\) \u7684\u7236\u8282\u70b9 \\(=C[\\) 0010 \\(+ \\rm \\ lowbit(\\) 0010 \\()]=C[\\) 0010 \\(+\\) 10 \\(]=C[\\) 0100 \\(]\\)","title":"\u6784\u9020"},{"location":"posts/ds/tree-array/#_5","text":"\u5c06 \\(A_x\\) \u7684\u503c\u589e\u52a0 \\(k\\) \uff0c\u54ea\u4e9b\u8282\u70b9\u7684\u503c\u4f1a\u8ddf\u7740\u53d8\u52a8\uff1f\u4ee5 \\(A_3\\) \u4e3a\u4f8b\uff1a \\(C_3=\\textcolor{red}{A_3}\\) \uff1b \\(C_4=A_1+A_2+\\textcolor{red}{A_3}+A_4\\) \uff1b \\(C_8=A_1+A_2+\\textcolor{red}{A_3}+A_4+A_5+A_6+A_7+A_8\\) \u3002 \u56e0\u6b64\u9700\u8981\u5c06 \\(C_3,C_4,C_8\\) \u7684\u503c\u90fd\u52a0\u4e0a \\(k\\) \uff0c\u800c \\(C_3,C_4,C_8\\) \u6ee1\u8db3\u300c\u540e\u4e00\u4e2a\u662f\u524d\u4e00\u4e2a\u7684\u7236\u8282\u70b9\u300d\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684 \\(x\\) \uff0c\u4ece \\(C_x\\) \u5f00\u59cb\u4e00\u5c42\u5c42\u904d\u5386\u7236\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u503c\u52a0\u4e0a \\(k\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int lowbit ( int x ) { return x & - x ; } void add ( int p , int k ) { // \u5c06 a[p] \u589e\u52a0 k\uff0c\u540c\u65f6\u7ef4\u62a4\u6811\u7684\u6784\u9020 a [ p ] += k ; for (; p ; p += lowbit ( p )) c [ p ] += k ; }","title":"\u5355\u70b9\u4fee\u6539"},{"location":"posts/ds/tree-array/#_6","text":"\u6811\u72b6\u6570\u7ec4\u652f\u6301\u67e5\u8be2\u524d\u7f00\u548c\uff0c\u5373\u6570\u7ec4 \\(A\\) \u7b2c \\(1\\sim x\\) \u4e2a\u5143\u7d20\u7684\u548c\u3002 \\(sum[x]\\) \u8868\u793a \\(A[1\\cdots x]\\) \u6240\u6709\u5143\u7d20\u7684\u548c\u3002\u4ee5 \\(sum[7]\\) \u4e3a\u4f8b\uff1a \\(C_4=A_1+A_2+A_3+A_4\\) \uff1b \\(C_6=A_5+A_6\\) \uff1b \\(C_7=A_7\\) \uff1b \u56e0\u800c \\(C_4+C_6+C_7=sum[7]\\) \u3002\u800c \\(C_7,C_6,C_4\\) \u6ee1\u8db3\u300c\u540e\u4e00\u4e2a\u662f\u524d\u4e00\u4e2a\u7684\u5de6\u4e0a\u65b9\u6700\u8fd1\u8282\u70b9\u300d\u3002 \u540c\u6837\u91c7\u7528\u4e8c\u8fdb\u5236\u601d\u60f3\uff0c\u5c06\u8282\u70b9\u7f16\u53f7\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff1a \u8fdb\u4e00\u6b65\u89c2\u5bdf\u53d1\u73b0\uff0c \\(C_i\\) \u7684\u5de6\u4e0a\u65b9\u6700\u8fd1\u8282\u70b9\u4e3a \\(C[i-\\rm lowbit(i)]\\) \u3002\u4f8b\u5982\uff1a \\(C[\\) 0111 \\(- \\rm \\ lowbit(\\) 0111 \\()]=C[\\) 0111 \\(-\\) 01 \\(]=C[\\) 0110 \\(]\\) \\(C[\\) 0110 \\(- \\rm \\ lowbit(\\) 0110 \\()]=C[\\) 0110 \\(-\\) 10 \\(]=C[\\) 0100 \\(]\\) \u67e5\u8be2 \\(sum[x]\\) \u65f6\uff0c\u5c06 \\(sum[x]\\) \u7684\u521d\u59cb\u503c\u8bbe\u4e3a \\(0\\) \uff0c\u4ece \\(C_x\\) \u5f00\u59cb\u4f9d\u6b21\u904d\u5386\u5de6\u4e0a\u65b9\u6700\u8fd1\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u503c\u7d2f\u52a0\u5728 \\(sum[x]\\) \u4e0a\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int ask ( int p ) { // \u67e5\u8be2 A[1...p] \u7684\u548c int sum = 0 ; for (; p ; p -= lowbit ( p )) sum += c [ p ]; return sum ; }","title":"\u524d\u7f00\u67e5\u8be2"},{"location":"posts/ds/tree-array/#_7","text":"\u91c7\u7528 \u524d\u7f00\u548c \u601d\u60f3\u3002 \\(get[l,r]\\) \u8868\u793a \\(A[l\\cdots r]\\) \u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5219\uff1a \\[ get[l,r]=sum[r]-sum[l-1]; \\] Code int get ( int l , int r ) { // \u67e5\u8be2 A[l...r] \u7684\u548c return ask ( r ) - ask ( l - 1 ); }","title":"\u533a\u95f4\u67e5\u8be2"},{"location":"posts/graph/","text":"\u56fe\u7684\u5b9a\u4e49 $ \u56fe\uff08Graph\uff09 \u7531\u82e5\u5e72 \u9876\u70b9 \u548c \u8fb9 \u7ec4\u6210\u3002\u7528\u5927\u5199\u5b57\u6bcd \\(G\\) \u8868\u793a\u56fe\uff0c \\(V\\) \u8868\u793a\u9876\u70b9\u96c6\u5408\uff0c \\(E\\) \u8868\u793a\u8fb9\u96c6\u5408\uff0c\u8bb0\u4f5c \\(G=(V,E)\\) \u3002 \u56fe\u662f\u63cf\u8ff0\u5b9e\u9645\u95ee\u9898\u7684\u5de5\u5177\u3002\u5982\u8fdb\u884c\u57ce\u5e02\u9053\u89c4\u5212\u65f6\uff0c\u53ef\u5c06\u6bcf\u4e2a\u57ce\u5e02\u89c6\u4f5c\u9876\u70b9\uff0c\u8fde\u63a5\u57ce\u5e02\u7684\u9053\u8def\u89c6\u4f5c\u8fb9\u3002 \u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe $ \u5982\u679c\u56fe\u7684\u6bcf\u6761\u8fb9\u90fd\u89c4\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u5219\u56fe\u88ab\u79f0\u4f5c \u6709\u5411\u56fe \uff1b \u76f8\u53cd\uff0c\u8fb9\u6ca1\u6709\u65b9\u5411\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u53cc\u5411\uff09\u7684\u56fe\u79f0\u4e3a \u65e0\u5411\u56fe\uff08\u53cc\u5411\u56fe\uff09 \u3002 \u8fb9\u6743\u548c\u70b9\u6743 $ \u4e3a\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\uff0c\u5f15\u5165 \u8fb9\u6743 \u548c \u70b9\u6743 \u7684\u6982\u5ff5\uff1a \u8fb9\u6743 \u53ca\u8fb9\u7684\u957f\u5ea6\u3002\u89e3\u51b3\u6700\u77ed\u8def\u5f84\u95ee\u9898\u65f6\uff0c\u5c06\u57ce\u5e02\u89c6\u4f5c\u9876\u70b9\uff0c\u57ce\u5e02\u4e4b\u95f4\u7684\u9053\u8def\u957f\u5ea6\u89c6\u4f5c\u8fb9\u6743\uff1b \u70b9\u6743 \u5373\u70b9\u7684\u5927\u5c0f\u3002\u89e3\u51b3\u6700\u5c0f\u6536\u8d39\u95ee\u9898\u65f6\uff0c\u5c06\u6536\u8d39\u7ad9\u89c6\u4f5c\u9876\u70b9\uff0c\u6536\u8d39\u7ad9\u4e4b\u95f4\u7684\u9053\u8def\u89c6\u4f5c\u8fb9\uff0c\u901a\u8fc7\u6536\u8d39\u7ad9\u652f\u4ed8\u7684\u8d39\u7528\u89c6\u4f5c\u70b9\u6743\u3002 \u5ea6\u6570 $ \u82e5\u56fe\u4e2d\u6709 \\(d\\) \u6761\u8fb9\u4e0e\u8282\u70b9 \\(i\\) \u76f8\u8fde\uff0c\u5219\u8282\u70b9 \\(i\\) \u7684 \u5ea6\u6570 \u4e3a \\(d\\) \uff08\u5373\u8282\u70b9\u7684 \u8fde\u8fb9 \u4e2a\u6570\uff09\u3002\u5982\u4e0b\u56fe\uff0c\u8282\u70b9 \\(1\\) \u7684\u5ea6\u4e3a \\(5\\) \uff1a \u82e5\u6709\u5411\u56fe\u4e2d\u6709 \\(d\\) \u6761\u8fb9\u7684 \u7ec8\u70b9 \u662f\u8282\u70b9 \\(i\\) \uff0c\u5219\u8282\u70b9 \\(i\\) \u7684 \u5165\u5ea6 \u4e3a \\(d\\) \uff08\u5373\u8282\u70b9\u7684 \u5165\u8fb9 \u4e2a\u6570\uff09\uff1b \u82e5\u6709\u5411\u56fe\u4e2d\u6709 \\(d\\) \u6761\u8fb9\u7684 \u8d77\u70b9 \u662f\u8282\u70b9 \\(i\\) \uff0c\u5219\u8282\u70b9 \\(i\\) \u7684 \u51fa\u5ea6 \u4e3a \\(d\\) \uff08\u5373\u8282\u70b9\u7684 \u51fa\u8fb9 \u4e2a\u6570\uff09\uff1b \u5b50\u56fe $ \u56fe \\(G\\) \u7684\u5b50\u56fe \\(H\\) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \\(G\\) \u4e2d\u5305\u542b \\(H\\) \u7684\u6240\u6709\u8282\u70b9\u548c\u8fb9\uff1b \\(G\\) \u548c \\(H\\) \u540c\u65f6\u4e3a\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u3002 \u5373 \\(G=(V,E),H=(V',E'),V'\\in V,E'\\in E\\) \u3002\u5982\u4e0b\u56fe\uff0c \\(H\\) \u662f \\(G\\) \u7684\u5b50\u56fe\uff1a \u8def\u5f84\u548c\u8fde\u901a $ \u4ece\u8282\u70b9 \\(i\\) \u8d70\u5230\u8282\u70b9 \\(j\\) \uff0c\u7ecf\u8fc7\u7684\u8fb9\u7684\u5e8f\u5217\u4e3a \\(i\\) \u5230 \\(j\\) \u7684 \u8def\u5f84 \u3002\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u7ecf\u8fc7\u8fb9\u7684\u8fb9\u6743\u548c\u3002 \u5982\u4e0b\u56fe\uff0c\u8282\u70b9 \\(1\\) \u5230 \\(6\\) \u7684\u4e00\u6761\u8def\u5f84\u4e3a \\(1-4-5-6\\) \u3002 \u82e5\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u8def\u5f84\uff0c\u5219\u79f0\u5b83\u4eec \u8fde\u901a \u3002 \u56de\u8def\uff08\u73af\uff09 $ \u82e5\u56fe\u4e2d\u5b58\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u7684\u8def\u5f84\uff0c\u5219\u6b64\u8def\u5f84\u79f0\u4f5c \u56de\u8def\uff08\u73af\uff09 \u3002 \u5b8c\u5168\u56fe\u548c\u8fde\u901a\u56fe $ \u82e5\u65e0\u5411\u56fe \\(G\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\uff0c\u5219 \\(G\\) \u79f0\u4e3a \u5b8c\u5168\u56fe \u3002 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u5b8c\u5168\u56fe\u6709 \\(\\displaystyle\\frac{1}{2}n(n-1)\\) \u6761\u8fb9\uff1b \u82e5\u65e0\u5411\u56fe \\(G\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u90fd\u8fde\u901a\uff0c\u5219 \\(G\\) \u79f0\u4e3a \u8fde\u901a\u56fe \u3002 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u81f3\u5c11\u6709 \\(n-1\\) \u6761\u8fb9\u3002 \u5f3a\u8fde\u901a\u5206\u91cf $ \u82e5\u6709\u5411\u56fe \\(G\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u90fd\u8fde\u901a\uff0c\u5219 \\(G\\) \u79f0\u4e3a \u5f3a\u8fde\u901a\u56fe \uff1b \u82e5\u6709\u5411\u56fe \\(G\\) \u7684\u5b50\u56fe \\(H\\) \u662f\u5f3a\u8fde\u901a\u56fe\uff0c\u5219 \\(H\\) \u79f0\u4e3a \\(G\\) \u7684 \u5f3a\u8fde\u901a\u5206\u91cf \u3002","title":"\u7b80\u4ecb"},{"location":"posts/graph/#_1","text":"\u56fe\uff08Graph\uff09 \u7531\u82e5\u5e72 \u9876\u70b9 \u548c \u8fb9 \u7ec4\u6210\u3002\u7528\u5927\u5199\u5b57\u6bcd \\(G\\) \u8868\u793a\u56fe\uff0c \\(V\\) \u8868\u793a\u9876\u70b9\u96c6\u5408\uff0c \\(E\\) \u8868\u793a\u8fb9\u96c6\u5408\uff0c\u8bb0\u4f5c \\(G=(V,E)\\) \u3002 \u56fe\u662f\u63cf\u8ff0\u5b9e\u9645\u95ee\u9898\u7684\u5de5\u5177\u3002\u5982\u8fdb\u884c\u57ce\u5e02\u9053\u89c4\u5212\u65f6\uff0c\u53ef\u5c06\u6bcf\u4e2a\u57ce\u5e02\u89c6\u4f5c\u9876\u70b9\uff0c\u8fde\u63a5\u57ce\u5e02\u7684\u9053\u8def\u89c6\u4f5c\u8fb9\u3002","title":"\u56fe\u7684\u5b9a\u4e49"},{"location":"posts/graph/#_2","text":"\u5982\u679c\u56fe\u7684\u6bcf\u6761\u8fb9\u90fd\u89c4\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u5219\u56fe\u88ab\u79f0\u4f5c \u6709\u5411\u56fe \uff1b \u76f8\u53cd\uff0c\u8fb9\u6ca1\u6709\u65b9\u5411\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u53cc\u5411\uff09\u7684\u56fe\u79f0\u4e3a \u65e0\u5411\u56fe\uff08\u53cc\u5411\u56fe\uff09 \u3002","title":"\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe"},{"location":"posts/graph/#_3","text":"\u4e3a\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\uff0c\u5f15\u5165 \u8fb9\u6743 \u548c \u70b9\u6743 \u7684\u6982\u5ff5\uff1a \u8fb9\u6743 \u53ca\u8fb9\u7684\u957f\u5ea6\u3002\u89e3\u51b3\u6700\u77ed\u8def\u5f84\u95ee\u9898\u65f6\uff0c\u5c06\u57ce\u5e02\u89c6\u4f5c\u9876\u70b9\uff0c\u57ce\u5e02\u4e4b\u95f4\u7684\u9053\u8def\u957f\u5ea6\u89c6\u4f5c\u8fb9\u6743\uff1b \u70b9\u6743 \u5373\u70b9\u7684\u5927\u5c0f\u3002\u89e3\u51b3\u6700\u5c0f\u6536\u8d39\u95ee\u9898\u65f6\uff0c\u5c06\u6536\u8d39\u7ad9\u89c6\u4f5c\u9876\u70b9\uff0c\u6536\u8d39\u7ad9\u4e4b\u95f4\u7684\u9053\u8def\u89c6\u4f5c\u8fb9\uff0c\u901a\u8fc7\u6536\u8d39\u7ad9\u652f\u4ed8\u7684\u8d39\u7528\u89c6\u4f5c\u70b9\u6743\u3002","title":"\u8fb9\u6743\u548c\u70b9\u6743"},{"location":"posts/graph/#_4","text":"\u82e5\u56fe\u4e2d\u6709 \\(d\\) \u6761\u8fb9\u4e0e\u8282\u70b9 \\(i\\) \u76f8\u8fde\uff0c\u5219\u8282\u70b9 \\(i\\) \u7684 \u5ea6\u6570 \u4e3a \\(d\\) \uff08\u5373\u8282\u70b9\u7684 \u8fde\u8fb9 \u4e2a\u6570\uff09\u3002\u5982\u4e0b\u56fe\uff0c\u8282\u70b9 \\(1\\) \u7684\u5ea6\u4e3a \\(5\\) \uff1a \u82e5\u6709\u5411\u56fe\u4e2d\u6709 \\(d\\) \u6761\u8fb9\u7684 \u7ec8\u70b9 \u662f\u8282\u70b9 \\(i\\) \uff0c\u5219\u8282\u70b9 \\(i\\) \u7684 \u5165\u5ea6 \u4e3a \\(d\\) \uff08\u5373\u8282\u70b9\u7684 \u5165\u8fb9 \u4e2a\u6570\uff09\uff1b \u82e5\u6709\u5411\u56fe\u4e2d\u6709 \\(d\\) \u6761\u8fb9\u7684 \u8d77\u70b9 \u662f\u8282\u70b9 \\(i\\) \uff0c\u5219\u8282\u70b9 \\(i\\) \u7684 \u51fa\u5ea6 \u4e3a \\(d\\) \uff08\u5373\u8282\u70b9\u7684 \u51fa\u8fb9 \u4e2a\u6570\uff09\uff1b","title":"\u5ea6\u6570"},{"location":"posts/graph/#_5","text":"\u56fe \\(G\\) \u7684\u5b50\u56fe \\(H\\) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \\(G\\) \u4e2d\u5305\u542b \\(H\\) \u7684\u6240\u6709\u8282\u70b9\u548c\u8fb9\uff1b \\(G\\) \u548c \\(H\\) \u540c\u65f6\u4e3a\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u3002 \u5373 \\(G=(V,E),H=(V',E'),V'\\in V,E'\\in E\\) \u3002\u5982\u4e0b\u56fe\uff0c \\(H\\) \u662f \\(G\\) \u7684\u5b50\u56fe\uff1a","title":"\u5b50\u56fe"},{"location":"posts/graph/#_6","text":"\u4ece\u8282\u70b9 \\(i\\) \u8d70\u5230\u8282\u70b9 \\(j\\) \uff0c\u7ecf\u8fc7\u7684\u8fb9\u7684\u5e8f\u5217\u4e3a \\(i\\) \u5230 \\(j\\) \u7684 \u8def\u5f84 \u3002\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u7ecf\u8fc7\u8fb9\u7684\u8fb9\u6743\u548c\u3002 \u5982\u4e0b\u56fe\uff0c\u8282\u70b9 \\(1\\) \u5230 \\(6\\) \u7684\u4e00\u6761\u8def\u5f84\u4e3a \\(1-4-5-6\\) \u3002 \u82e5\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u8def\u5f84\uff0c\u5219\u79f0\u5b83\u4eec \u8fde\u901a \u3002","title":"\u8def\u5f84\u548c\u8fde\u901a"},{"location":"posts/graph/#_7","text":"\u82e5\u56fe\u4e2d\u5b58\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u7684\u8def\u5f84\uff0c\u5219\u6b64\u8def\u5f84\u79f0\u4f5c \u56de\u8def\uff08\u73af\uff09 \u3002","title":"\u56de\u8def\uff08\u73af\uff09"},{"location":"posts/graph/#_8","text":"\u82e5\u65e0\u5411\u56fe \\(G\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\uff0c\u5219 \\(G\\) \u79f0\u4e3a \u5b8c\u5168\u56fe \u3002 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u5b8c\u5168\u56fe\u6709 \\(\\displaystyle\\frac{1}{2}n(n-1)\\) \u6761\u8fb9\uff1b \u82e5\u65e0\u5411\u56fe \\(G\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u90fd\u8fde\u901a\uff0c\u5219 \\(G\\) \u79f0\u4e3a \u8fde\u901a\u56fe \u3002 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u81f3\u5c11\u6709 \\(n-1\\) \u6761\u8fb9\u3002","title":"\u5b8c\u5168\u56fe\u548c\u8fde\u901a\u56fe"},{"location":"posts/graph/#_9","text":"\u82e5\u6709\u5411\u56fe \\(G\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u90fd\u8fde\u901a\uff0c\u5219 \\(G\\) \u79f0\u4e3a \u5f3a\u8fde\u901a\u56fe \uff1b \u82e5\u6709\u5411\u56fe \\(G\\) \u7684\u5b50\u56fe \\(H\\) \u662f\u5f3a\u8fde\u901a\u56fe\uff0c\u5219 \\(H\\) \u79f0\u4e3a \\(G\\) \u7684 \u5f3a\u8fde\u901a\u5206\u91cf \u3002","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"posts/graph/DSU/","text":"\u7b80\u4ecb $ \u5e76\u67e5\u96c6 \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u5f80\u4e00\u4e2a\u96c6\u5408\u4e2d\u52a0\u5165\u5143\u7d20\uff1b \u5feb\u901f\u67e5\u8be2\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\uff1b \u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e3a\u4e00\u4e2a\u96c6\u5408\u3002 \u57fa\u672c\u539f\u7406 $ Question \u82e5 \\(a \\ b\\) \uff0c \\(e \\ c\\) \uff0c \\(e \\ d\\) \u5206\u522b\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u4e00\u5171\u6709\u51e0\u4e2a\u96c6\u5408\uff1f \\(b\\) \u548c \\(d\\) \u662f\u5426\u540c\u96c6\uff1f \u6784\u9020\u5e76\u67e5\u96c6 $ \u628a\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u4e24\u4e2a\u8282\u70b9\u8fde\u5728\u4e00\u8d77\uff0c\u6613\u77e5\uff1a\u96c6\u5408\u6570 \\(=\\) \u8fde\u901a\u56fe\u6570\u3002\u82e5\u4e24\u4e2a\u8282\u70b9\u8fde\u901a\uff0c\u5219\u5b83\u4eec\u540c\u96c6\u3002 \u91c7\u7528\u8be5\u505a\u6cd5\u65f6\uff0c\u5224\u65ad\u4e24\u4e2a\u7ed3\u70b9\u662f\u5426\u8fde\u901a\u7684\u6548\u7387\u8f83\u4f4e\u3002 \u5e76\u67e5\u96c6 \u5728\u6bcf\u4e2a\u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a \u4ee3\u8868\u5143\u7d20 \u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u6784\u9020\u300c\u6811\u578b\u7ed3\u6784\u300d\u3002\u5982\u4e0b\u56fe\uff0c\u8282\u70b9 \\(a\\) \u548c\u8282\u70b9 \\(e\\) \u5206\u522b\u662f\u4e24\u4e2a\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u3002 \\(fa[i]\\) \u4ee3\u8868\u8282\u70b9 \\(i\\) \u7684\u7236\u8282\u70b9\u7f16\u53f7\uff0c\u5982\u4e0a\u56fe\uff0c \\(fa[b]=a\\) \uff0c \\(fa[d]=e\\) \uff0c \\(fa[c]=e\\) \u3002\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u5176 \\(fa\\) \u503c\u90fd\u8bbe\u4e3a \\(0\\) \uff0c\u5982 \\(fa[a]=0\\) \uff0c \\(fa[e]=0\\) \u3002 \u67e5\u8be2\u4ee3\u8868\u5143\u7d20 $ \u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u5c31\u662f\u5e76\u67e5\u96c6\u4e2d\u7684\u6839\u8282\u70b9\u3002\u82e5\u8282\u70b9 \\(x\\) \u6ca1\u6709\u7236\u8282\u70b9\uff0c\u5219\u5b83\u81ea\u5df1\u662f\u6839\u8282\u70b9\uff0c\u5426\u5219\u9012\u5f52\u67e5\u8be2\u5b83\u7684\u7236\u8282\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int find ( int x ) { // \u8fd4\u56de\u8282\u70b9 x \u7684\u6839\u8282\u70b9 if ( ! fa [ x ]) return x ; return find ( fa [ x ]); } \u67e5\u8be2\u662f\u5426\u540c\u96c6 $ \u82e5\u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f8\u540c\uff0c\u5219\u5b83\u4eec\u540c\u96c6\u3002 Code bool judge ( int x , int y ) { return find ( x ) == find ( y ); } \u5408\u5e76\u96c6\u5408 $ \u82e5 \\(b\\) \u548c \\(c\\) \u4e5f\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u5219\u5408\u5e76 \\(b\\) \u548c \\(c\\) \u6240\u5728\u7684\u96c6\u5408\u3002\u4f7f \\(c\\) \u7684\u6839\u8282\u70b9\uff08 \\(e\\) \uff09\u6307\u5411 \\(b\\) \u7684\u6839\u8282\u70b9\uff08 \\(a\\) \uff09\u5373\u53ef\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\uff0c\u4f7f \\(a\\) \u6307\u5411 \\(c\\) \u3002 Code void merge ( int x , int y ) { if ( find ( x ) != find ( y )) // \u5982\u679c\u8282\u70b9 x \u548c y \u5df2\u7ecf\u540c\u96c6\uff0c\u5219\u6ca1\u5fc5\u8981\u518d\u5408\u5e76 find ( x ) = fa [ find ( y )]; } \u8def\u5f84\u538b\u7f29 $ \u6bcf\u6b21\u67e5\u8be2\u51fa\u8282\u70b9 \\(i\\) \u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9 \\(e\\) \u540e\uff0c\u4f7f \\(fa[i]=e\\) \uff1b \u518d\u6b21\u67e5\u8be2 \\(i\\) \u7684\u6839\u8282\u70b9\u65f6\uff0c find(i) \u51fd\u6570\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de \\(e\\) \uff0c\u514d\u53bb\u9012\u5f52\u8fc7\u7a0b\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u4f18\u5316\u4e3a \\(O(1)\\) \u3002\u8be5\u505a\u6cd5\u7c7b\u4f3c\u4e8e\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 Code int find ( int x ) { if ( ! fa [ x ]) return x ; fa [ x ] = find ( fa [ x ]); return fa [ x ]; // \u6700\u540e\u4e24\u884c\u7b49\u4ef7\u4e8e return fa[x] = find(fa[x]); }","title":"\u5e76\u67e5\u96c6"},{"location":"posts/graph/DSU/#_1","text":"\u5e76\u67e5\u96c6 \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u5f80\u4e00\u4e2a\u96c6\u5408\u4e2d\u52a0\u5165\u5143\u7d20\uff1b \u5feb\u901f\u67e5\u8be2\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\uff1b \u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e3a\u4e00\u4e2a\u96c6\u5408\u3002","title":"\u7b80\u4ecb"},{"location":"posts/graph/DSU/#_2","text":"Question \u82e5 \\(a \\ b\\) \uff0c \\(e \\ c\\) \uff0c \\(e \\ d\\) \u5206\u522b\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u4e00\u5171\u6709\u51e0\u4e2a\u96c6\u5408\uff1f \\(b\\) \u548c \\(d\\) \u662f\u5426\u540c\u96c6\uff1f","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/graph/DSU/#_3","text":"\u628a\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u4e24\u4e2a\u8282\u70b9\u8fde\u5728\u4e00\u8d77\uff0c\u6613\u77e5\uff1a\u96c6\u5408\u6570 \\(=\\) \u8fde\u901a\u56fe\u6570\u3002\u82e5\u4e24\u4e2a\u8282\u70b9\u8fde\u901a\uff0c\u5219\u5b83\u4eec\u540c\u96c6\u3002 \u91c7\u7528\u8be5\u505a\u6cd5\u65f6\uff0c\u5224\u65ad\u4e24\u4e2a\u7ed3\u70b9\u662f\u5426\u8fde\u901a\u7684\u6548\u7387\u8f83\u4f4e\u3002 \u5e76\u67e5\u96c6 \u5728\u6bcf\u4e2a\u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a \u4ee3\u8868\u5143\u7d20 \u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u6784\u9020\u300c\u6811\u578b\u7ed3\u6784\u300d\u3002\u5982\u4e0b\u56fe\uff0c\u8282\u70b9 \\(a\\) \u548c\u8282\u70b9 \\(e\\) \u5206\u522b\u662f\u4e24\u4e2a\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u3002 \\(fa[i]\\) \u4ee3\u8868\u8282\u70b9 \\(i\\) \u7684\u7236\u8282\u70b9\u7f16\u53f7\uff0c\u5982\u4e0a\u56fe\uff0c \\(fa[b]=a\\) \uff0c \\(fa[d]=e\\) \uff0c \\(fa[c]=e\\) \u3002\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u5176 \\(fa\\) \u503c\u90fd\u8bbe\u4e3a \\(0\\) \uff0c\u5982 \\(fa[a]=0\\) \uff0c \\(fa[e]=0\\) \u3002","title":"\u6784\u9020\u5e76\u67e5\u96c6"},{"location":"posts/graph/DSU/#_4","text":"\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u5c31\u662f\u5e76\u67e5\u96c6\u4e2d\u7684\u6839\u8282\u70b9\u3002\u82e5\u8282\u70b9 \\(x\\) \u6ca1\u6709\u7236\u8282\u70b9\uff0c\u5219\u5b83\u81ea\u5df1\u662f\u6839\u8282\u70b9\uff0c\u5426\u5219\u9012\u5f52\u67e5\u8be2\u5b83\u7684\u7236\u8282\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log{n})\\) \u3002 Code int find ( int x ) { // \u8fd4\u56de\u8282\u70b9 x \u7684\u6839\u8282\u70b9 if ( ! fa [ x ]) return x ; return find ( fa [ x ]); }","title":"\u67e5\u8be2\u4ee3\u8868\u5143\u7d20"},{"location":"posts/graph/DSU/#_5","text":"\u82e5\u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f8\u540c\uff0c\u5219\u5b83\u4eec\u540c\u96c6\u3002 Code bool judge ( int x , int y ) { return find ( x ) == find ( y ); }","title":"\u67e5\u8be2\u662f\u5426\u540c\u96c6"},{"location":"posts/graph/DSU/#_6","text":"\u82e5 \\(b\\) \u548c \\(c\\) \u4e5f\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u5219\u5408\u5e76 \\(b\\) \u548c \\(c\\) \u6240\u5728\u7684\u96c6\u5408\u3002\u4f7f \\(c\\) \u7684\u6839\u8282\u70b9\uff08 \\(e\\) \uff09\u6307\u5411 \\(b\\) \u7684\u6839\u8282\u70b9\uff08 \\(a\\) \uff09\u5373\u53ef\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\uff0c\u4f7f \\(a\\) \u6307\u5411 \\(c\\) \u3002 Code void merge ( int x , int y ) { if ( find ( x ) != find ( y )) // \u5982\u679c\u8282\u70b9 x \u548c y \u5df2\u7ecf\u540c\u96c6\uff0c\u5219\u6ca1\u5fc5\u8981\u518d\u5408\u5e76 find ( x ) = fa [ find ( y )]; }","title":"\u5408\u5e76\u96c6\u5408"},{"location":"posts/graph/DSU/#_7","text":"\u6bcf\u6b21\u67e5\u8be2\u51fa\u8282\u70b9 \\(i\\) \u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9 \\(e\\) \u540e\uff0c\u4f7f \\(fa[i]=e\\) \uff1b \u518d\u6b21\u67e5\u8be2 \\(i\\) \u7684\u6839\u8282\u70b9\u65f6\uff0c find(i) \u51fd\u6570\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de \\(e\\) \uff0c\u514d\u53bb\u9012\u5f52\u8fc7\u7a0b\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u4f18\u5316\u4e3a \\(O(1)\\) \u3002\u8be5\u505a\u6cd5\u7c7b\u4f3c\u4e8e\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 Code int find ( int x ) { if ( ! fa [ x ]) return x ; fa [ x ] = find ( fa [ x ]); return fa [ x ]; // \u6700\u540e\u4e24\u884c\u7b49\u4ef7\u4e8e return fa[x] = find(fa[x]); }","title":"\u8def\u5f84\u538b\u7f29"},{"location":"posts/graph/SCC/","text":"Tarjan \u7b97\u6cd5 $ Code int dep [], low [], tot ; stack < int > s ; void tarjan ( int u ) { dep [ u ] = low [ u ] = ++ tot ; s . push ( u ), avl [ u ] = true ; for ( int i = 0 ; i < g [ u ]. size (); i ++ ) { int y = g [ u ][ i ]; if ( ! dep [ y ]) { tarjan ( y ); low [ u ] = min ( low [ u ], low [ y ]); } else if ( avl [ y ]) low [ u ] = min ( low [ u ], dep [ y ]); } if ( dep [ u ] == low [ u ]) { ans ++ ; while ( u != s . top ()) avl [ s . top ()] = false , s . pop (); avl [ u ] = false , s . pop (); } } Kosaraju \u7b97\u6cd5 $ Code void dfs1 ( int u ) { vis [ u ] = true ; for ( int v : g [ u ]) if ( ! vis [ v ]) dfs1 ( v ); s . push_back ( u ); } void dfs2 ( int u ) { color [ u ] = sccCnt ; for ( int v : g2 [ u ]) if ( ! color [ v ]) dfs2 ( v ); } void kosaraju () { sccCnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vis [ i ]) dfs1 ( i ); for ( int i = n ; i >= 1 ; -- i ) if ( ! color [ s [ i ]]) { ++ sccCnt ; dfs2 ( s [ i ]); } } Garbow \u7b97\u6cd5 $ Code int garbow ( int u ) { stack1 [ ++ p1 ] = u ; stack2 [ ++ p2 ] = u ; low [ u ] = ++ dfs_clock ; for ( int i = head [ u ]; i ; i = e [ i ]. next ) { int v = e [ i ]. to ; if ( ! low [ v ]) garbow ( v ); else if ( ! sccno [ v ]) while ( low [ stack2 [ p2 ]] > low [ v ]) p2 -- ; } if ( stack2 [ p2 ] == u ) { p2 -- ; scc_cnt ++ ; do { sccno [ stack1 [ p1 ]] = scc_cnt ; } while ( stack1 [ p1 -- ] != u ); } return 0 ; } void find_scc ( int n ) { dfs_clock = scc_cnt = 0 ; p1 = p2 = 0 ; memset ( sccno , 0 , sizeof ( sccno )); memset ( low , 0 , sizeof ( low )); for ( int i = 1 ; i <= n ; i ++ ) if ( ! low [ i ]) garbow ( i ); }","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"posts/graph/SCC/#tarjan","text":"Code int dep [], low [], tot ; stack < int > s ; void tarjan ( int u ) { dep [ u ] = low [ u ] = ++ tot ; s . push ( u ), avl [ u ] = true ; for ( int i = 0 ; i < g [ u ]. size (); i ++ ) { int y = g [ u ][ i ]; if ( ! dep [ y ]) { tarjan ( y ); low [ u ] = min ( low [ u ], low [ y ]); } else if ( avl [ y ]) low [ u ] = min ( low [ u ], dep [ y ]); } if ( dep [ u ] == low [ u ]) { ans ++ ; while ( u != s . top ()) avl [ s . top ()] = false , s . pop (); avl [ u ] = false , s . pop (); } }","title":"Tarjan \u7b97\u6cd5"},{"location":"posts/graph/SCC/#kosaraju","text":"Code void dfs1 ( int u ) { vis [ u ] = true ; for ( int v : g [ u ]) if ( ! vis [ v ]) dfs1 ( v ); s . push_back ( u ); } void dfs2 ( int u ) { color [ u ] = sccCnt ; for ( int v : g2 [ u ]) if ( ! color [ v ]) dfs2 ( v ); } void kosaraju () { sccCnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vis [ i ]) dfs1 ( i ); for ( int i = n ; i >= 1 ; -- i ) if ( ! color [ s [ i ]]) { ++ sccCnt ; dfs2 ( s [ i ]); } }","title":"Kosaraju \u7b97\u6cd5"},{"location":"posts/graph/SCC/#garbow","text":"Code int garbow ( int u ) { stack1 [ ++ p1 ] = u ; stack2 [ ++ p2 ] = u ; low [ u ] = ++ dfs_clock ; for ( int i = head [ u ]; i ; i = e [ i ]. next ) { int v = e [ i ]. to ; if ( ! low [ v ]) garbow ( v ); else if ( ! sccno [ v ]) while ( low [ stack2 [ p2 ]] > low [ v ]) p2 -- ; } if ( stack2 [ p2 ] == u ) { p2 -- ; scc_cnt ++ ; do { sccno [ stack1 [ p1 ]] = scc_cnt ; } while ( stack1 [ p1 -- ] != u ); } return 0 ; } void find_scc ( int n ) { dfs_clock = scc_cnt = 0 ; p1 = p2 = 0 ; memset ( sccno , 0 , sizeof ( sccno )); memset ( low , 0 , sizeof ( low )); for ( int i = 1 ; i <= n ; i ++ ) if ( ! low [ i ]) garbow ( i ); }","title":"Garbow \u7b97\u6cd5"},{"location":"posts/graph/path/","text":"\u677e\u5f1b\u64cd\u4f5c\uff08relax\uff09 $ \u7528 \u90bb\u63a5\u77e9\u9635 g[][] \u5b58\u50a8\u8fb9\u3002\u5982\u679c g[i][k] + g[k][j] < g[i][j] \uff0c\u5219\u8bf4\u660e\u300c\u5148\u4ece i \u8d70\u5230 k\uff0c\u518d\u8d70\u5230 j\u300d\u6bd4\u539f\u5148\u7684\u8def\u5f84\u66f4\u5feb\uff0c\u6b64\u65f6\u4ee4 g[i][j] = g[i][k] + g[k][j] \u3002 Floyed \u7b97\u6cd5 $ g[k][i][j] \u8868\u793a\u53ea\u5141\u8bb8\u7ecf\u8fc7\u8282\u70b9 1 ~ k \u65f6\uff0c\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7684\u6700\u77ed\u8def\u5f84\u3002 \u5f53\u8282\u70b9 k \u88ab\u5141\u8bb8\u7ecf\u8fc7\u65f6\uff0c\u679a\u4e3e\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9 i \u548c j\uff1a \u82e5\u4e0d\u7ecf\u8fc7\u8282\u70b9 k\uff0c\u5219 g[k][i][j] = g[k - 1][i][j] \uff1b \u82e5\u7ecf\u8fc7\u8282\u70b9 k\uff0c\u5219 g[k][i][j] = g[k - 1][i][k] + g[k - 1][k][j] \u3002 g[k][i][j] = max(g[k - 1][i][j], g[k - 1][i][k] + g[k - 1][k][j]) \u3002 Code for ( int k = 1 ; k <= n ; k ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) g [ k ][ i ][ j ] = min ( g [ k - 1 ][ i ][ j ], g [ k - 1 ][ i ][ k ] + g [ k - 1 ][ k ][ j ]); \u5b9e\u9645\u4e0a\uff0cFloyed \u7b97\u6cd5\u7684\u7b2c\u4e00\u7ef4\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u53ef\u4ee5\u7701\u53bb\u3002 Code for ( int k = 1 ; k <= n ; k ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) g [ i ][ j ] = min ( g [ i ][ j ], g [ i ][ k ] + g [ k ][ j ]); Floyed \u7b97\u6cd5\u9002\u7528\u4e8e\u4efb\u4f55\u56fe\uff0c\u4f46\u5fc5\u987b\u5b58\u5728\u6700\u77ed\u8def\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^3)\\) \u3002 Bellman-Ford \u7b97\u6cd5 $ Bellman-Ford \u7b97\u6cd5\u662f Floyed \u7b97\u6cd5\u7684\u4f18\u5316\u7248\u672c\u3002\u679a\u4e3e\u8282\u70b9\u7684\u6548\u7387\u592a\u4f4e\uff0c\u6539\u4e3a\u679a\u4e3e\u8fb9\u3002 n \u4e2a\u8282\u70b9 m \u6761\u8fb9\u7684\u56fe\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u6700\u77ed\u8def\u5f84\uff0c\u5219\u6700\u77ed\u8def\u5f84\u6240\u5305\u542b\u7684\u8fb9\u6570 \u2264 n-1\u3002\u6545\u6bcf\u6761\u8def\u6700\u591a\u88ab\u677e\u5f1b n-1 \u6b21\u3002 dis[i] \u8868\u793a\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 i \u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u521d\u59cb\u65f6\u8981\u8bbe\u4e3a\u65e0\u7a77\u5927\u3002 Bellman-Ford \u7b97\u6cd5\u53ea\u80fd\u5904\u7406\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u56de\u8def\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Code void bellman_ford ( int s ) { memset ( dis , 0x7f , sizeof dis ); for ( int i = 1 ; i < n ; i ++ ) // \u677e\u5f1b n-1 \u6b21 for ( int j = 1 ; j <= m ; j ++ ) dis [ to [ j ]] = min ( dis [ to [ j ]], dis [ from [ j ]] + len [ j ]); } \u5224\u65ad\u8d1f\u6743\u56de\u8def $ \u82e5\u56fe\u4e2d\u5b58\u5728\u957f\u5ea6\u4e3a\u8d1f\u6570\u7684 \u56de\u8def \uff0c\u5219\u6b64\u56de\u8def\u79f0\u4e3a \u8d1f\u6743\u56de\u8def\uff08\u8d1f\u73af\uff09 \u3002\u6709\u8d1f\u6743\u56de\u8def\u7684\u56fe\u4e0d\u5b58\u5728\u6700\u77ed\u8def\u3002 \u4f7f\u7528 Bellman-Ford \u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u4e00\u6761\u8def\u80fd\u88ab\u677e\u5f1b n \u6b21\u5373\u4ee5\u4e0a\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 Code bool check ( int s ) { memset ( dis , 0x7f , sizeof dis ); for ( int i = 1 ; i < n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dis [ to [ j ]] = min ( dis [ to [ j ]], dis [ from [ j ]] + len [ j ]); for ( int j = 1 ; j <= m ; j ++ ) if ( dis [ to [ j ]] > dis [ from [ j ]] + len [ j ]) return false ; // \u677e\u5f1b\u4e86 n - 1 \u6b21\u540e\uff0c\u8fd8\u80fd\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5219\u5b58\u5728\u8d1f\u6743\u56de\u8def return true ; } SPFA \u7b97\u6cd5 $ SPFA \u7b97\u6cd5\u662f Bellman-Ford \u7b97\u6cd5\u7684\u961f\u5217\u4f18\u5316\u7248\u672c\u3002\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u7684\u7ed3\u70b9\u7684\u51fa\u8fb9\uff0c\u624d\u6709\u53ef\u80fd\u5f15\u8d77\u4e0b\u4e00\u6b21\u7684\u677e\u5f1b\u64cd\u4f5c\u3002\u6bcf\u6b21\u53d6\u961f\u9996\u8282\u70b9\uff0c\u5bf9\u5176\u51fa\u8fb9\u8fdb\u884c\u677e\u5f1b\uff0c\u5c06\u677e\u5f1b\u5230\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(kn)\\) \uff0c \\(k\\) \u4e3a\u5e38\u6570\u3002 Code void spfa ( int s ) { memset ( avl , true , sizeof avl ); memset ( dis , 0x7f , sizeof dis ); queue < int > Q ; Q . push ( s ); dis [ s ] = 0 , avl [ s ] = false ; while ( ! Q . empty ()) { int cur = Q . front (); Q . pop (); for ( int i = 0 ; i < ( int ) g [ cur ]. size (); i ++ ) { int v = g [ cur ][ i ]. val ; int d = g [ cur ][ i ]. len ; if ( dis [ v ] > dis [ cur ] + d ) { dis [ v ] = dis [ cur ] + d ; if ( ! avl [ v ]) continue ; avl [ v ] = false ; Q . push ( v ); } } } } \u5361 SPFA $ SPFA \u9047\u5230\u4ee5\u4e0b\u51e0\u7c7b\u56fe\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u6210 \\(O(n^2)\\) \u3002\u8bbe\u8ba1\u7279\u5b9a\u7684\u6570\u636e\u5361 SPFA \u7b97\u6cd5\u4e5f\u6210\u4e86\u51fa\u9898\u8005\u6700\u70ed\u8877\u4e8e\u505a\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002 1. \u7f51\u683c\u56fe $ 2. \u94fe\u5957\u83ca\u82b1 $ Dijkstra \u7b97\u6cd5 $ \u4ece\u8282\u70b9 s \u51fa\u53d1\u3002\u9996\u5148\u628a\u6240\u6709\u8282\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\uff0c\u548c\u672a\u786e\u5b9a\u7684\u3002\u4e00\u5f00\u59cb\u53ea\u6709 s \u5728\u7b2c\u4e00\u4e2a\u96c6\u5408\uff0c\u4e14 dis[s] = 0 \uff1b\u5176\u5b83\u8282\u70b9\u90fd\u672a\u786e\u5b9a\u6700\u77ed\u8def\uff0c\u5b83\u4eec\u7684 dis \u503c\u5e94\u8bbe\u4e3a \\(\u221e\\) \u3002 \u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u6ca1\u6709\u8282\u70b9\uff1a \u677e\u5f1b\u521a\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u7684\u8282\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u3002 \u4ece\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\uff0c\u9009\u53d6 dis \u503c\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u3002 \u53ea\u80fd\u5904\u7406\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u8def\u5f84\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Code void dijkstra ( int s ) { memset ( avl , true , sizeof avl ); memset ( dis , 0x7f , sizeof dis ); dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int minn = INF , minp = 0 ; for ( int j = 1 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] < minn ) minn = dis [ j ], minp = j ; if ( ! minp ) continue ; avl [ minp ] = false ; for ( int j = 1 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] > minn + g [ minp ][ j ]) dis [ j ] = minn + g [ minp ][ j ]; } }","title":"\u6700\u77ed\u8def\u5f84"},{"location":"posts/graph/path/#relax","text":"\u7528 \u90bb\u63a5\u77e9\u9635 g[][] \u5b58\u50a8\u8fb9\u3002\u5982\u679c g[i][k] + g[k][j] < g[i][j] \uff0c\u5219\u8bf4\u660e\u300c\u5148\u4ece i \u8d70\u5230 k\uff0c\u518d\u8d70\u5230 j\u300d\u6bd4\u539f\u5148\u7684\u8def\u5f84\u66f4\u5feb\uff0c\u6b64\u65f6\u4ee4 g[i][j] = g[i][k] + g[k][j] \u3002","title":"\u677e\u5f1b\u64cd\u4f5c\uff08relax\uff09"},{"location":"posts/graph/path/#floyed","text":"g[k][i][j] \u8868\u793a\u53ea\u5141\u8bb8\u7ecf\u8fc7\u8282\u70b9 1 ~ k \u65f6\uff0c\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u7684\u6700\u77ed\u8def\u5f84\u3002 \u5f53\u8282\u70b9 k \u88ab\u5141\u8bb8\u7ecf\u8fc7\u65f6\uff0c\u679a\u4e3e\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9 i \u548c j\uff1a \u82e5\u4e0d\u7ecf\u8fc7\u8282\u70b9 k\uff0c\u5219 g[k][i][j] = g[k - 1][i][j] \uff1b \u82e5\u7ecf\u8fc7\u8282\u70b9 k\uff0c\u5219 g[k][i][j] = g[k - 1][i][k] + g[k - 1][k][j] \u3002 g[k][i][j] = max(g[k - 1][i][j], g[k - 1][i][k] + g[k - 1][k][j]) \u3002 Code for ( int k = 1 ; k <= n ; k ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) g [ k ][ i ][ j ] = min ( g [ k - 1 ][ i ][ j ], g [ k - 1 ][ i ][ k ] + g [ k - 1 ][ k ][ j ]); \u5b9e\u9645\u4e0a\uff0cFloyed \u7b97\u6cd5\u7684\u7b2c\u4e00\u7ef4\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u53ef\u4ee5\u7701\u53bb\u3002 Code for ( int k = 1 ; k <= n ; k ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) g [ i ][ j ] = min ( g [ i ][ j ], g [ i ][ k ] + g [ k ][ j ]); Floyed \u7b97\u6cd5\u9002\u7528\u4e8e\u4efb\u4f55\u56fe\uff0c\u4f46\u5fc5\u987b\u5b58\u5728\u6700\u77ed\u8def\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^3)\\) \u3002","title":"Floyed \u7b97\u6cd5"},{"location":"posts/graph/path/#bellman-ford","text":"Bellman-Ford \u7b97\u6cd5\u662f Floyed \u7b97\u6cd5\u7684\u4f18\u5316\u7248\u672c\u3002\u679a\u4e3e\u8282\u70b9\u7684\u6548\u7387\u592a\u4f4e\uff0c\u6539\u4e3a\u679a\u4e3e\u8fb9\u3002 n \u4e2a\u8282\u70b9 m \u6761\u8fb9\u7684\u56fe\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u6700\u77ed\u8def\u5f84\uff0c\u5219\u6700\u77ed\u8def\u5f84\u6240\u5305\u542b\u7684\u8fb9\u6570 \u2264 n-1\u3002\u6545\u6bcf\u6761\u8def\u6700\u591a\u88ab\u677e\u5f1b n-1 \u6b21\u3002 dis[i] \u8868\u793a\u4ece\u8282\u70b9 s \u5230\u8282\u70b9 i \u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u521d\u59cb\u65f6\u8981\u8bbe\u4e3a\u65e0\u7a77\u5927\u3002 Bellman-Ford \u7b97\u6cd5\u53ea\u80fd\u5904\u7406\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u56de\u8def\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 Code void bellman_ford ( int s ) { memset ( dis , 0x7f , sizeof dis ); for ( int i = 1 ; i < n ; i ++ ) // \u677e\u5f1b n-1 \u6b21 for ( int j = 1 ; j <= m ; j ++ ) dis [ to [ j ]] = min ( dis [ to [ j ]], dis [ from [ j ]] + len [ j ]); }","title":"Bellman-Ford \u7b97\u6cd5"},{"location":"posts/graph/path/#_1","text":"\u82e5\u56fe\u4e2d\u5b58\u5728\u957f\u5ea6\u4e3a\u8d1f\u6570\u7684 \u56de\u8def \uff0c\u5219\u6b64\u56de\u8def\u79f0\u4e3a \u8d1f\u6743\u56de\u8def\uff08\u8d1f\u73af\uff09 \u3002\u6709\u8d1f\u6743\u56de\u8def\u7684\u56fe\u4e0d\u5b58\u5728\u6700\u77ed\u8def\u3002 \u4f7f\u7528 Bellman-Ford \u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u4e00\u6761\u8def\u80fd\u88ab\u677e\u5f1b n \u6b21\u5373\u4ee5\u4e0a\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 Code bool check ( int s ) { memset ( dis , 0x7f , sizeof dis ); for ( int i = 1 ; i < n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dis [ to [ j ]] = min ( dis [ to [ j ]], dis [ from [ j ]] + len [ j ]); for ( int j = 1 ; j <= m ; j ++ ) if ( dis [ to [ j ]] > dis [ from [ j ]] + len [ j ]) return false ; // \u677e\u5f1b\u4e86 n - 1 \u6b21\u540e\uff0c\u8fd8\u80fd\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5219\u5b58\u5728\u8d1f\u6743\u56de\u8def return true ; }","title":"\u5224\u65ad\u8d1f\u6743\u56de\u8def"},{"location":"posts/graph/path/#spfa","text":"SPFA \u7b97\u6cd5\u662f Bellman-Ford \u7b97\u6cd5\u7684\u961f\u5217\u4f18\u5316\u7248\u672c\u3002\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u7684\u7ed3\u70b9\u7684\u51fa\u8fb9\uff0c\u624d\u6709\u53ef\u80fd\u5f15\u8d77\u4e0b\u4e00\u6b21\u7684\u677e\u5f1b\u64cd\u4f5c\u3002\u6bcf\u6b21\u53d6\u961f\u9996\u8282\u70b9\uff0c\u5bf9\u5176\u51fa\u8fb9\u8fdb\u884c\u677e\u5f1b\uff0c\u5c06\u677e\u5f1b\u5230\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(kn)\\) \uff0c \\(k\\) \u4e3a\u5e38\u6570\u3002 Code void spfa ( int s ) { memset ( avl , true , sizeof avl ); memset ( dis , 0x7f , sizeof dis ); queue < int > Q ; Q . push ( s ); dis [ s ] = 0 , avl [ s ] = false ; while ( ! Q . empty ()) { int cur = Q . front (); Q . pop (); for ( int i = 0 ; i < ( int ) g [ cur ]. size (); i ++ ) { int v = g [ cur ][ i ]. val ; int d = g [ cur ][ i ]. len ; if ( dis [ v ] > dis [ cur ] + d ) { dis [ v ] = dis [ cur ] + d ; if ( ! avl [ v ]) continue ; avl [ v ] = false ; Q . push ( v ); } } } }","title":"SPFA \u7b97\u6cd5"},{"location":"posts/graph/path/#spfa_1","text":"SPFA \u9047\u5230\u4ee5\u4e0b\u51e0\u7c7b\u56fe\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u6210 \\(O(n^2)\\) \u3002\u8bbe\u8ba1\u7279\u5b9a\u7684\u6570\u636e\u5361 SPFA \u7b97\u6cd5\u4e5f\u6210\u4e86\u51fa\u9898\u8005\u6700\u70ed\u8877\u4e8e\u505a\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002","title":"\u5361 SPFA"},{"location":"posts/graph/path/#1","text":"","title":"1. \u7f51\u683c\u56fe"},{"location":"posts/graph/path/#2","text":"","title":"2. \u94fe\u5957\u83ca\u82b1"},{"location":"posts/graph/path/#dijkstra","text":"\u4ece\u8282\u70b9 s \u51fa\u53d1\u3002\u9996\u5148\u628a\u6240\u6709\u8282\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\uff0c\u548c\u672a\u786e\u5b9a\u7684\u3002\u4e00\u5f00\u59cb\u53ea\u6709 s \u5728\u7b2c\u4e00\u4e2a\u96c6\u5408\uff0c\u4e14 dis[s] = 0 \uff1b\u5176\u5b83\u8282\u70b9\u90fd\u672a\u786e\u5b9a\u6700\u77ed\u8def\uff0c\u5b83\u4eec\u7684 dis \u503c\u5e94\u8bbe\u4e3a \\(\u221e\\) \u3002 \u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\u6ca1\u6709\u8282\u70b9\uff1a \u677e\u5f1b\u521a\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u7684\u8282\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u3002 \u4ece\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e2d\uff0c\u9009\u53d6 dis \u503c\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u3002 \u53ea\u80fd\u5904\u7406\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u8def\u5f84\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \u3002 Code void dijkstra ( int s ) { memset ( avl , true , sizeof avl ); memset ( dis , 0x7f , sizeof dis ); dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int minn = INF , minp = 0 ; for ( int j = 1 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] < minn ) minn = dis [ j ], minp = j ; if ( ! minp ) continue ; avl [ minp ] = false ; for ( int j = 1 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] > minn + g [ minp ][ j ]) dis [ j ] = minn + g [ minp ][ j ]; } }","title":"Dijkstra \u7b97\u6cd5"},{"location":"posts/graph/store/","text":"\u76f4\u63a5\u5b58\u8fb9 $ \u628a\u6bcf\u6761\u8fb9\u7684\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u957f\u5ea6\u5b58\u5165\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u3002 Code struct node { int from , to , len ; } edge []; \u4e5f\u53ef\u4ee5\u5206\u6210\u4e09\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u3002 Code int from [], to [], len []; \u90bb\u63a5\u77e9\u9635 $ \u7528\u4e8c\u7ef4\u6570\u7ec4 g[][] \uff08\u90bb\u63a5\u77e9\u9635\uff09\u5b58\u50a8\u8fb9\u957f\u3002 g[i][j] \u8868\u793a\u8fde\u63a5\u8282\u70b9 i \u548c j \u7684\u8fb9\u7684\u6743\u503c\u3002 \u7f3a\u70b9\uff1a\u4e0d\u80fd\u5b58\u50a8\u91cd\u8fb9\uff1b\u6d6a\u8d39\u7a7a\u95f4\u3002 \u90bb\u63a5\u8868 $ \u628a\u8282\u70b9 i \u7684\u6240\u6709\u76f8\u90bb\u8282\u70b9\u63d2\u5165\u4ee5 head[i] \u5f00\u5934\u7684 \u94fe\u8868 \u4e2d\uff08\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u5411 0\uff09\u3002 Code int top , head []; struct Node { int val , len ; int next ; // \u8fd9\u91cc\u53ea\u9700\u8981\u7528\u5230\u5355\u5411\u94fe\u8868 } edge []; void insert ( int u , int v , int len ) { // \u8ffd\u52a0\u4e00\u6761\u4ece u \u5230 v \u957f\u5ea6\u4e3a len \u7684\u8fb9 edge [ ++ top ] = Node { v , len , head [ u ]}; head [ u ] = top ; } int path ( int u , int v ) { // \u83b7\u53d6\u4ee5 u, v \u4e3a\u7aef\u70b9\u7684\u8fb9\u7684\u957f\u5ea6\uff08\u6ca1\u6709\u8fb9\u5219\u8fd4\u56de -1\uff09 for ( int p = head [ u ]; p ; p = edge [ p ]. next ) if ( edge [ p ]. val == v ) return edge [ p ]. len ; return -1 ; } \u90bb\u63a5\u8868\u53ef\u4ee5\u7528 STL Vector \u5b9e\u73b0\u3002 Code struct Node { int val , len ; }; vector < Node > edge []; void insert ( int u , int v , int len ) { edge [ u ]. push_back ( Node { v , len }); } int path ( int u , int v ) { for ( int i = 0 ; i < edge [ u ]. size (); i ++ ) if ( edge [ u ][ i ]. val == v ) return edge [ u ][ i ]. len ; return -1 ; } \u53cd\u5411\u8fb9\u8bbf\u95ee $ \u4f7f\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u53cc\u5411\u8fb9\u65f6\uff0c\u4f9d\u6b21\u5b58\u50a8\u6b63\u5411\u8fb9\u548c\u53cd\u5411\u8fb9\uff0c\u6545 edge[i] \u548c edge[i + 1] \uff08 \\(i\\) \u4e3a\u5076\u6570\uff09\u4e92\u4e3a\u53cd\u5411\u8fb9\u3002\u6b64\u65f6 \\(i\\) \u548c \\(i+1\\) \u6784\u6210 \u300c\u6210\u5bf9\u53d8\u5316\u300d \uff0c\u5373 edge[i] \u7684\u53cd\u5411\u8fb9\u4e3a edge[i ^ 1] \u3002 Code void insert ( int u , int v , int len ) { // \u8ffd\u52a0\u4e00\u6761\u4ece u \u5230 v \u957f\u5ea6\u4e3a len \u7684\u53cc\u5411\u8fb9 edge [ ++ top ] = Node { v , len , head [ u ]}, head [ u ] = top ; // \u4ece u \u5230 v \u7684\u8fb9 edge [ ++ top ] = Node { u , len , head [ v ]}, head [ v ] = top ; // \u4ece v \u5230 u \u7684\u8fb9 } Node rpath ( int pos ) { // \u8fd4\u56de edge[pos] \u7684\u53cd\u5411\u8fb9 return edge [ pos ^ 1 ]; }","title":"\u56fe\u7684\u5b58\u50a8"},{"location":"posts/graph/store/#_1","text":"\u628a\u6bcf\u6761\u8fb9\u7684\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u957f\u5ea6\u5b58\u5165\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u3002 Code struct node { int from , to , len ; } edge []; \u4e5f\u53ef\u4ee5\u5206\u6210\u4e09\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u3002 Code int from [], to [], len [];","title":"\u76f4\u63a5\u5b58\u8fb9"},{"location":"posts/graph/store/#_2","text":"\u7528\u4e8c\u7ef4\u6570\u7ec4 g[][] \uff08\u90bb\u63a5\u77e9\u9635\uff09\u5b58\u50a8\u8fb9\u957f\u3002 g[i][j] \u8868\u793a\u8fde\u63a5\u8282\u70b9 i \u548c j \u7684\u8fb9\u7684\u6743\u503c\u3002 \u7f3a\u70b9\uff1a\u4e0d\u80fd\u5b58\u50a8\u91cd\u8fb9\uff1b\u6d6a\u8d39\u7a7a\u95f4\u3002","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"posts/graph/store/#_3","text":"\u628a\u8282\u70b9 i \u7684\u6240\u6709\u76f8\u90bb\u8282\u70b9\u63d2\u5165\u4ee5 head[i] \u5f00\u5934\u7684 \u94fe\u8868 \u4e2d\uff08\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u5411 0\uff09\u3002 Code int top , head []; struct Node { int val , len ; int next ; // \u8fd9\u91cc\u53ea\u9700\u8981\u7528\u5230\u5355\u5411\u94fe\u8868 } edge []; void insert ( int u , int v , int len ) { // \u8ffd\u52a0\u4e00\u6761\u4ece u \u5230 v \u957f\u5ea6\u4e3a len \u7684\u8fb9 edge [ ++ top ] = Node { v , len , head [ u ]}; head [ u ] = top ; } int path ( int u , int v ) { // \u83b7\u53d6\u4ee5 u, v \u4e3a\u7aef\u70b9\u7684\u8fb9\u7684\u957f\u5ea6\uff08\u6ca1\u6709\u8fb9\u5219\u8fd4\u56de -1\uff09 for ( int p = head [ u ]; p ; p = edge [ p ]. next ) if ( edge [ p ]. val == v ) return edge [ p ]. len ; return -1 ; } \u90bb\u63a5\u8868\u53ef\u4ee5\u7528 STL Vector \u5b9e\u73b0\u3002 Code struct Node { int val , len ; }; vector < Node > edge []; void insert ( int u , int v , int len ) { edge [ u ]. push_back ( Node { v , len }); } int path ( int u , int v ) { for ( int i = 0 ; i < edge [ u ]. size (); i ++ ) if ( edge [ u ][ i ]. val == v ) return edge [ u ][ i ]. len ; return -1 ; }","title":"\u90bb\u63a5\u8868"},{"location":"posts/graph/store/#_4","text":"\u4f7f\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u53cc\u5411\u8fb9\u65f6\uff0c\u4f9d\u6b21\u5b58\u50a8\u6b63\u5411\u8fb9\u548c\u53cd\u5411\u8fb9\uff0c\u6545 edge[i] \u548c edge[i + 1] \uff08 \\(i\\) \u4e3a\u5076\u6570\uff09\u4e92\u4e3a\u53cd\u5411\u8fb9\u3002\u6b64\u65f6 \\(i\\) \u548c \\(i+1\\) \u6784\u6210 \u300c\u6210\u5bf9\u53d8\u5316\u300d \uff0c\u5373 edge[i] \u7684\u53cd\u5411\u8fb9\u4e3a edge[i ^ 1] \u3002 Code void insert ( int u , int v , int len ) { // \u8ffd\u52a0\u4e00\u6761\u4ece u \u5230 v \u957f\u5ea6\u4e3a len \u7684\u53cc\u5411\u8fb9 edge [ ++ top ] = Node { v , len , head [ u ]}, head [ u ] = top ; // \u4ece u \u5230 v \u7684\u8fb9 edge [ ++ top ] = Node { u , len , head [ v ]}, head [ v ] = top ; // \u4ece v \u5230 u \u7684\u8fb9 } Node rpath ( int pos ) { // \u8fd4\u56de edge[pos] \u7684\u53cd\u5411\u8fb9 return edge [ pos ^ 1 ]; }","title":"\u53cd\u5411\u8fb9\u8bbf\u95ee"},{"location":"posts/graph/topsort/","text":"AOV \u7f51 $ \u7ed9\u51fa\u51e0\u7ec4\u5173\u7cfb\uff1a a > b \uff0c a > c \uff0c b > c \uff0c b > d \uff0c ... \uff0c\u6c42\u53ef\u80fd\u7684 a b c d ... \u7684\u5927\u5c0f\u987a\u5e8f\uff1f \u5c06\u4e0a\u8ff0\u5173\u7cfb\u8f6c\u5316\u4e3a\u6709\u5411\u56fe\uff0c\u5176\u4e2d a \u2192 b \u4ee3\u8868 a > b \u3002\u8fd9\u79cd\u80fd\u8868\u793a\u7ed3\u70b9\u5927\u5c0f\u5173\u7cfb\u7684\u6709\u5411\u56fe\u53eb\u505a AOV \u7f51 \u3002 \u57fa\u672c\u539f\u7406 $ \u62d3\u6251\u6392\u5e8f \u6c42\u7684\u662f\u5408\u6cd5\u7684\u4f18\u5148\u987a\u5e8f\uff0c\u6c42\u5f97\u7684\u5e8f\u5217\u79f0\u4e3a \u62d3\u6251\u5e8f\u5217 \u3002\u540c\u4e00\u5f20 AOV \u7f51\u53ef\u80fd\u6709\u591a\u4e2a\u5408\u6cd5\u7684\u62d3\u6251\u5e8f\u5217\u3002 \u6ca1\u6709\u88ab\u6307\u5411\u7684\u8282\u70b9\uff08\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\uff09\u662f\u5f53\u524d\u6700\u5927\u7684\u8282\u70b9\u3002 \u8282\u70b9 a \u7684\u5165\u5ea6\u4e3a 0\uff0c\u6545\u5728\u62d3\u6251\u5e8f\u5217\u4e2d\u8ffd\u52a0 a\uff0c\u5e76\u5220\u9664 a \u548c\u5b83\u7684\u6240\u6709\u90bb\u8fb9\uff1a \u5bf9\u8282\u70b9 e \u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff1a \u5bf9\u8282\u70b9 b \u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff1a \\(\\cdots \\ \\cdots\\) \u6545\u6837\u4f8b\u7684\u4e00\u79cd\u62d3\u6251\u5e8f\u5217\u4e3a a e b c d f \u3002 deg[i] \u8868\u793a\u8282\u70b9 i \u7684\u5165\u5ea6\uff0c\u5728\u8f93\u5165\u65f6\u9884\u5904\u7406\u3002 \u5b9a\u4e49\u4e00\u4e2a \u961f\u5217 \uff0c\u7528\u4e8e\u5b58\u653e\u7ed3\u70b9\uff1b \u5c06\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u5165\u961f\uff1b \u5c06\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u5e76\u5220\u9664\u8be5\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u3002\u82e5\u51fa\u73b0\u65b0\u7684\u7ed3\u70b9\u5165\u5ea6\u4e3a\u96f6\uff0c\u5219\u5c06\u5176\u5165\u961f\u3002 \u62d3\u6251\u6392\u5e8f\u7ed3\u675f\u65f6\uff0c\u82e5\u62d3\u6251\u5e8f\u5217\u672a\u5305\u542b\u5168\u90e8\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u5269\u4e0b\u7684\u8282\u70b9\u5f62\u6210\u4e86\u95ed\u73af\u3002\u6b64\u65f6\u4e0d\u5b58\u5728\u5408\u6cd5\u62d3\u6251\u5e8f\u5217\u3002 Code vector < int > topSort () { vector < int > vec ; queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! deg [ i ]) q . push ( i ); while ( ! q . empty ()) { int top = q . front (); q . pop (); vec . push_back ( top ); for ( int i = 0 ; i < g [ top ]. size (); i ++ ) if ( ! -- deg [ g [ top ][ i ]]) q . push ( g [ top ][ i ]); } if ( vec . size () != n ) return vector < int > (); return vec ; }","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"posts/graph/topsort/#aov","text":"\u7ed9\u51fa\u51e0\u7ec4\u5173\u7cfb\uff1a a > b \uff0c a > c \uff0c b > c \uff0c b > d \uff0c ... \uff0c\u6c42\u53ef\u80fd\u7684 a b c d ... \u7684\u5927\u5c0f\u987a\u5e8f\uff1f \u5c06\u4e0a\u8ff0\u5173\u7cfb\u8f6c\u5316\u4e3a\u6709\u5411\u56fe\uff0c\u5176\u4e2d a \u2192 b \u4ee3\u8868 a > b \u3002\u8fd9\u79cd\u80fd\u8868\u793a\u7ed3\u70b9\u5927\u5c0f\u5173\u7cfb\u7684\u6709\u5411\u56fe\u53eb\u505a AOV \u7f51 \u3002","title":"AOV \u7f51"},{"location":"posts/graph/topsort/#_1","text":"\u62d3\u6251\u6392\u5e8f \u6c42\u7684\u662f\u5408\u6cd5\u7684\u4f18\u5148\u987a\u5e8f\uff0c\u6c42\u5f97\u7684\u5e8f\u5217\u79f0\u4e3a \u62d3\u6251\u5e8f\u5217 \u3002\u540c\u4e00\u5f20 AOV \u7f51\u53ef\u80fd\u6709\u591a\u4e2a\u5408\u6cd5\u7684\u62d3\u6251\u5e8f\u5217\u3002 \u6ca1\u6709\u88ab\u6307\u5411\u7684\u8282\u70b9\uff08\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\uff09\u662f\u5f53\u524d\u6700\u5927\u7684\u8282\u70b9\u3002 \u8282\u70b9 a \u7684\u5165\u5ea6\u4e3a 0\uff0c\u6545\u5728\u62d3\u6251\u5e8f\u5217\u4e2d\u8ffd\u52a0 a\uff0c\u5e76\u5220\u9664 a \u548c\u5b83\u7684\u6240\u6709\u90bb\u8fb9\uff1a \u5bf9\u8282\u70b9 e \u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff1a \u5bf9\u8282\u70b9 b \u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff1a \\(\\cdots \\ \\cdots\\) \u6545\u6837\u4f8b\u7684\u4e00\u79cd\u62d3\u6251\u5e8f\u5217\u4e3a a e b c d f \u3002 deg[i] \u8868\u793a\u8282\u70b9 i \u7684\u5165\u5ea6\uff0c\u5728\u8f93\u5165\u65f6\u9884\u5904\u7406\u3002 \u5b9a\u4e49\u4e00\u4e2a \u961f\u5217 \uff0c\u7528\u4e8e\u5b58\u653e\u7ed3\u70b9\uff1b \u5c06\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u5165\u961f\uff1b \u5c06\u961f\u5934\u7ed3\u70b9\u51fa\u961f\uff0c\u5e76\u5220\u9664\u8be5\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u3002\u82e5\u51fa\u73b0\u65b0\u7684\u7ed3\u70b9\u5165\u5ea6\u4e3a\u96f6\uff0c\u5219\u5c06\u5176\u5165\u961f\u3002 \u62d3\u6251\u6392\u5e8f\u7ed3\u675f\u65f6\uff0c\u82e5\u62d3\u6251\u5e8f\u5217\u672a\u5305\u542b\u5168\u90e8\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u5269\u4e0b\u7684\u8282\u70b9\u5f62\u6210\u4e86\u95ed\u73af\u3002\u6b64\u65f6\u4e0d\u5b58\u5728\u5408\u6cd5\u62d3\u6251\u5e8f\u5217\u3002 Code vector < int > topSort () { vector < int > vec ; queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! deg [ i ]) q . push ( i ); while ( ! q . empty ()) { int top = q . front (); q . pop (); vec . push_back ( top ); for ( int i = 0 ; i < g [ top ]. size (); i ++ ) if ( ! -- deg [ g [ top ][ i ]]) q . push ( g [ top ][ i ]); } if ( vec . size () != n ) return vector < int > (); return vec ; }","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/graph/treap/","text":"Code long m , n , tot = 0 , root ;; long a [ 30010 ]; long fa [ 30010 ], left [ 30010 ], right [ 30010 ], data [ 30010 ], key [ 30010 ], size [ 30010 ]; void Init () { long i ; scanf ( \"%ld%ld\" , & m , & n ); for ( i = 1 ; i <= m ; i ++ ) scanf ( \"%ld\" , & a [ i ]); } void Rotate ( long x ) { long y , z ; y = fa [ x ]; z = fa [ y ]; fa [ x ] = z ; fa [ y ] = x ; if ( x == left [ y ]) { fa [ right [ x ]] = y ; left [ y ] = right [ x ]; right [ x ] = y ; } else { fa [ left [ x ]] = y ; right [ y ] = left [ x ]; left [ x ] = y ; } if ( y == left [ z ]) left [ z ] = x ; else right [ z ] = x ; size [ y ] = size [ left [ y ]] + size [ right [ y ]] + 1 ; size [ x ] = size [ left [ x ]] + size [ right [ x ]] + 1 ; if ( y == root ) root = x ; } void Insert ( long x ) { long p , q ; if ( tot == 0 ) { tot ++ ; root = tot ; fa [ tot ] = left [ tot ] = right [ tot ] = 0 ; data [ tot ] = x ; key [ tot ] = rand () + rand () + rand (); size [ tot ] = 1 ; return ; } p = root ; while ( 1 ) { q = p ; size [ q ] ++ ; if ( data [ q ] <= x ) p = right [ q ]; else p = left [ q ]; if ( p == 0 ) break ; } tot ++ ; fa [ tot ] = q ; left [ tot ] = right [ tot ] = 0 ; data [ tot ] = x ; size [ tot ] = 1 ; key [ tot ] = rand () + rand () + rand (); if ( data [ q ] <= x ) right [ q ] = tot ; else left [ q ] = tot ; p = tot ; while ( key [ p ] > key [ fa [ p ]]) Rotate ( p ); } long Find ( long x ) { long p = root ; while ( 1 ) { if ( size [ left [ p ]] + 1 == x ) return data [ p ]; if ( size [ left [ p ]] + 1 < x ) { x = x - size [ left [ p ]] -1 ; p = right [ p ]; } else p = left [ p ]; } } void Work () { long i , j , x , now = 0 ; key [ 0 ] = 2147483647 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld\" , & x ); for ( j = now + 1 ; j <= x ; j ++ ) Insert ( a [ j ]); now = x ; printf ( \"%ld \\n \" , Find ( i )); } }","title":"\u4e8c\u53c9\u5e73\u8861\u6811"},{"location":"posts/graph/tree/","text":"\u6811\u7684\u5b9a\u4e49 $ \u6811\u6709\u591a\u79cd\u7b49\u4ef7\u7684\u5b9a\u4e49\u65b9\u5f0f\uff1a \u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\uff1b \u6709 \\(n\\) \u4e2a\u8282\u70b9\u548c \\(n-1\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff1b \u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u95f4\u53ea\u6709\u4e00\u6761\u8def\u5f84\u7684\u65e0\u5411\u56fe\u3002 \u56fe\u8bba\u4e2d\u7684\u6811\u770b\u8d77\u6765\u66f4\u50cf\u73b0\u5b9e\u4e2d\u5012\u60ac\u7684\u6811\uff1a \u6811\u7684\u8282\u70b9\u5b58\u5728\u300c\u7236\u5b50\u5173\u7cfb\u300d\u3002\u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff1a \u6709\u8fde\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e2d\uff0c\u4e0a\u8282\u70b9\u4e3a\u4e0b\u8282\u70b9\u7684 \u7236\u8282\u70b9 \u3002\u5982\u8282\u70b9 \\(2\\) \u662f\u8282\u70b9 \\(5\\) \u7684\u7236\u8282\u70b9\uff1b \u6709\u8fde\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e2d\uff0c\u4e0b\u8282\u70b9\u4e3a\u4e0a\u8282\u70b9\u7684 \u5b50\u8282\u70b9 \uff0c\u5982\u8282\u70b9 \\(5\\) \u662f\u8282\u70b9 \\(2\\) \u7684\u5b50\u8282\u70b9\uff1b \u6ca1\u6709\u7236\u8282\u70b9\u7684\u8282\u70b9\u4e3a \u6839\u8282\u70b9 \uff0c\u5982\u8282\u70b9 \\(1\\) \uff1b \u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u4e3a \u53f6\u8282\u70b9 \uff0c\u5982\u8282\u70b9 \\(5,6,3,8,9\\) \u3002 \u6709\u6839\u6811\u548c\u65e0\u6839\u6811 $ \u6709\u6839\u6811 \u5fc5\u987b\u660e\u786e\u6839\u8282\u70b9\uff0c\u800c \u65e0\u6839\u6811 \u7684\u4efb\u610f\u8282\u70b9\u90fd\u53ef\u4ee5\u662f\u6839\u8282\u70b9\u3002\u4e0b\u9762\u7684\u5de6\u56fe\u548c\u53f3\u56fe\u662f\u540c\u4e00\u68f5\u65e0\u6839\u6811\uff1a \u5b50\u6811 $ \u5c06\u8282\u70b9 \\(i\\) \u548c\u5176\u7236\u8282\u70b9\u65ad\u5f00\uff0c\u5206\u88c2\u51fa\u7684\u4ee5 \\(i\\) \u4e3a\u6839\u7684\u65b0\u6811\uff0c\u79f0\u4f5c\u8282\u70b9 \\(i\\) \u7684 \u5b50\u6811 \u3002\u5982\u4e0b\u56fe\uff0c\u7ea2\u8272\u90e8\u5206\u4e3a\u8282\u70b9 \\(3\\) \u7684\u5b50\u6811\u3002 \u5c42\u548c\u6df1\u5ea6 $ \u5b9a\u4e49\u6839\u8282\u70b9\u5728\u7b2c \\(1\\) \u5c42\uff0c\u5b50\u8282\u70b9\u5c42\u6570 \\(=\\) \u7236\u8282\u70b9\u5c42\u6570 \\(+1\\) \uff1a \u6811\u7684\u6df1\u5ea6 \\(=\\) \u603b\u5c42\u6570\u3002\u4e0a\u56fe\u4e2d\u6811\u7684\u6df1\u5ea6\u4e3a \\(4\\) \u3002 \u4e8c\u53c9\u6811 $ \u4efb\u610f\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf \\(\u22642\\) \u7684\u6811\u662f \u4e8c\u53c9\u6811 \uff1a \u6ee1\u4e8c\u53c9\u6811 $ \u6df1\u5ea6\u4e3a \\(k\\) \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002\u8282\u70b9\u6700\u591a\u7684\u90a3\u68f5\u6811\u662f \u6ee1\u4e8c\u53c9\u6811 \uff1a \u6ee1\u4e8c\u53c9\u6811\u9664\u6700\u540e\u4e00\u5c42\u5916\uff0c\u5176\u5b83\u5c42\u4efb\u610f\u8282\u70b9\u90fd\u6709 \\(2\\) \u4e2a\u5b50\u8282\u70b9\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811 $ \u5c06 \u6ee1\u4e8c\u53c9\u6811 \u6700\u540e\u4e00\u5c42\u53f3\u8fb9\u8fde\u7eed\u7684\u82e5\u5e72\u8282\u70b9\u5220\u9664\uff0c\u5f97\u5230 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a \u6ee1\u4e8c\u53c9\u6811\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\u3002 \u68ee\u6797 $ \u591a\u68f5\u6811\u7ec4\u6210\u7684\u56fe\u4e3a \u68ee\u6797 \uff1a","title":"\u7b80\u4ecb"},{"location":"posts/graph/tree/#_1","text":"\u6811\u6709\u591a\u79cd\u7b49\u4ef7\u7684\u5b9a\u4e49\u65b9\u5f0f\uff1a \u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\uff1b \u6709 \\(n\\) \u4e2a\u8282\u70b9\u548c \\(n-1\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff1b \u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u95f4\u53ea\u6709\u4e00\u6761\u8def\u5f84\u7684\u65e0\u5411\u56fe\u3002 \u56fe\u8bba\u4e2d\u7684\u6811\u770b\u8d77\u6765\u66f4\u50cf\u73b0\u5b9e\u4e2d\u5012\u60ac\u7684\u6811\uff1a \u6811\u7684\u8282\u70b9\u5b58\u5728\u300c\u7236\u5b50\u5173\u7cfb\u300d\u3002\u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff1a \u6709\u8fde\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e2d\uff0c\u4e0a\u8282\u70b9\u4e3a\u4e0b\u8282\u70b9\u7684 \u7236\u8282\u70b9 \u3002\u5982\u8282\u70b9 \\(2\\) \u662f\u8282\u70b9 \\(5\\) \u7684\u7236\u8282\u70b9\uff1b \u6709\u8fde\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e2d\uff0c\u4e0b\u8282\u70b9\u4e3a\u4e0a\u8282\u70b9\u7684 \u5b50\u8282\u70b9 \uff0c\u5982\u8282\u70b9 \\(5\\) \u662f\u8282\u70b9 \\(2\\) \u7684\u5b50\u8282\u70b9\uff1b \u6ca1\u6709\u7236\u8282\u70b9\u7684\u8282\u70b9\u4e3a \u6839\u8282\u70b9 \uff0c\u5982\u8282\u70b9 \\(1\\) \uff1b \u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u4e3a \u53f6\u8282\u70b9 \uff0c\u5982\u8282\u70b9 \\(5,6,3,8,9\\) \u3002","title":"\u6811\u7684\u5b9a\u4e49"},{"location":"posts/graph/tree/#_2","text":"\u6709\u6839\u6811 \u5fc5\u987b\u660e\u786e\u6839\u8282\u70b9\uff0c\u800c \u65e0\u6839\u6811 \u7684\u4efb\u610f\u8282\u70b9\u90fd\u53ef\u4ee5\u662f\u6839\u8282\u70b9\u3002\u4e0b\u9762\u7684\u5de6\u56fe\u548c\u53f3\u56fe\u662f\u540c\u4e00\u68f5\u65e0\u6839\u6811\uff1a","title":"\u6709\u6839\u6811\u548c\u65e0\u6839\u6811"},{"location":"posts/graph/tree/#_3","text":"\u5c06\u8282\u70b9 \\(i\\) \u548c\u5176\u7236\u8282\u70b9\u65ad\u5f00\uff0c\u5206\u88c2\u51fa\u7684\u4ee5 \\(i\\) \u4e3a\u6839\u7684\u65b0\u6811\uff0c\u79f0\u4f5c\u8282\u70b9 \\(i\\) \u7684 \u5b50\u6811 \u3002\u5982\u4e0b\u56fe\uff0c\u7ea2\u8272\u90e8\u5206\u4e3a\u8282\u70b9 \\(3\\) \u7684\u5b50\u6811\u3002","title":"\u5b50\u6811"},{"location":"posts/graph/tree/#_4","text":"\u5b9a\u4e49\u6839\u8282\u70b9\u5728\u7b2c \\(1\\) \u5c42\uff0c\u5b50\u8282\u70b9\u5c42\u6570 \\(=\\) \u7236\u8282\u70b9\u5c42\u6570 \\(+1\\) \uff1a \u6811\u7684\u6df1\u5ea6 \\(=\\) \u603b\u5c42\u6570\u3002\u4e0a\u56fe\u4e2d\u6811\u7684\u6df1\u5ea6\u4e3a \\(4\\) \u3002","title":"\u5c42\u548c\u6df1\u5ea6"},{"location":"posts/graph/tree/#_5","text":"\u4efb\u610f\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf \\(\u22642\\) \u7684\u6811\u662f \u4e8c\u53c9\u6811 \uff1a","title":"\u4e8c\u53c9\u6811"},{"location":"posts/graph/tree/#_6","text":"\u6df1\u5ea6\u4e3a \\(k\\) \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002\u8282\u70b9\u6700\u591a\u7684\u90a3\u68f5\u6811\u662f \u6ee1\u4e8c\u53c9\u6811 \uff1a \u6ee1\u4e8c\u53c9\u6811\u9664\u6700\u540e\u4e00\u5c42\u5916\uff0c\u5176\u5b83\u5c42\u4efb\u610f\u8282\u70b9\u90fd\u6709 \\(2\\) \u4e2a\u5b50\u8282\u70b9\u3002","title":"\u6ee1\u4e8c\u53c9\u6811"},{"location":"posts/graph/tree/#_7","text":"\u5c06 \u6ee1\u4e8c\u53c9\u6811 \u6700\u540e\u4e00\u5c42\u53f3\u8fb9\u8fde\u7eed\u7684\u82e5\u5e72\u8282\u70b9\u5220\u9664\uff0c\u5f97\u5230 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a \u6ee1\u4e8c\u53c9\u6811\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\u3002","title":"\u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"posts/graph/tree/#_8","text":"\u591a\u68f5\u6811\u7ec4\u6210\u7684\u56fe\u4e3a \u68ee\u6797 \uff1a","title":"\u68ee\u6797"},{"location":"posts/graph/tree/MST/","text":"\u7b80\u4ecb $ \u65e0\u5411 \u8fde\u901a\u56fe \u7684 \u751f\u6210\u6811 \u5305\u542b\u539f\u56fe\u6240\u6709\u8282\u70b9\uff0c\u5e76\u4e14\u5177\u6709\u6811\u7684\u6027\u8d28\u3002\u4e0b\u56fe\u7684 \\(b\\) \u548c \\(c\\) \u7686\u4e3a \\(a\\) \u7684\u751f\u6210\u6811\u3002 \u6700\u5c0f\u751f\u6210\u6811 \u662f\u6240\u6709\u751f\u6210\u6811\u4e2d\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6811\u3002 \\(n\\) \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u6700\u5c0f\u751f\u6210\u6811\u6709 \\(n-1\\) \u6761\u8fb9\u3002 Kruskal \u7b97\u6cd5 $ Kruskal \u7b97\u6cd5\u662f\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u5c06 \\(m\\) \u6761\u8fb9\u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff1b \u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8fb9\uff0c\u82e5\u6b64\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u672a\u8fde\u901a\uff0c\u5219\u5728\u6811\u4e2d\u52a0\u5165\u6b64\u8fb9\uff0c\u5e76\u8fde\u901a\u4e24\u4e2a\u9876\u70b9\u3002\u91cd\u590d\u76f4\u5230\u5171\u52a0\u5165 \\(n-1\\) \u6761\u8fb9\u3002 \u4f7f\u7528 \u5e76\u67e5\u96c6 \u5224\u65ad\u548c\u7ef4\u62a4\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u8fde\u901a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\log{m})\\) \uff0c\u9002\u7528\u4e8e \u7a00\u758f\u56fe \u3002 Code int n , m , fa []; struct edge { int x , y , len ; } g []; bool cmp ( edge x , edge y ) { return x . len < y . len ; } int find ( int x ) { return ! fa [ x ] ? x : fa [ x ] = find ( fa [ x ]); } int kruskal () { sort ( g + 1 , g + m + 1 , cmp ); int tot = 0 , sum = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( tot == n - 1 ) break ; int rx = find ( g [ i ]. x ); int ry = find ( g [ i ]. y ); if ( rx != ry ) { tot ++ , fa [ rx ] = ry , sum += g [ i ]. len ; } } return tot == n - 1 ? sum : -1 ; //\u5982\u679c\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5219\u8fd4\u56de\u8fb9\u6743\u548c\uff0c\u5426\u5219\u8fd4\u56de -1 } Prim \u7b97\u6cd5 $ \\(dis[i]\\) \u8868\u793a\u8282\u70b9 \\(i\\) \u5230\u6811\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5efa\u7acb\u4e00\u68f5\u53ea\u6709\u8282\u70b9 \\(1\\) \u7684\u6811\uff0c \\(dis[1]=0\\) \uff1b \u9009\u62e9\u79bb\u6811\u6700\u8fd1\uff08 \\(dis\\) \u503c\u6700\u5c0f\uff09\u7684\u70b9\u52a0\u5165\u6811\uff0c\u5bf9\u8be5\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u8fdb\u884c \u677e\u5f1b\u64cd\u4f5c \u3002\u91cd\u590d\u6267\u884c\u76f4\u5230\u52a0\u5165 \\(n-1\\) \u6761\u8fb9\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \uff0c\u9002\u7528\u4e8e \u7a20\u5bc6\u56fe \u3002 Code int prim () { int sum = 0 ; memset ( avl , true , sizeof avl ); memset ( dis , 0x7f , sizeof dis ); dis [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { int minn = INF , minp = 0 ; for ( int j = 2 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] < minn ) minn = dis [ j ], minp = j ; if ( ! minp ) return -1 ; avl [ minp ] = false , sum += minn ; for ( int j = 1 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] > g [ minp ][ j ]) dis [ j ] = g [ minp ][ j ]; } return sum ; }","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"posts/graph/tree/MST/#_1","text":"\u65e0\u5411 \u8fde\u901a\u56fe \u7684 \u751f\u6210\u6811 \u5305\u542b\u539f\u56fe\u6240\u6709\u8282\u70b9\uff0c\u5e76\u4e14\u5177\u6709\u6811\u7684\u6027\u8d28\u3002\u4e0b\u56fe\u7684 \\(b\\) \u548c \\(c\\) \u7686\u4e3a \\(a\\) \u7684\u751f\u6210\u6811\u3002 \u6700\u5c0f\u751f\u6210\u6811 \u662f\u6240\u6709\u751f\u6210\u6811\u4e2d\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6811\u3002 \\(n\\) \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u6700\u5c0f\u751f\u6210\u6811\u6709 \\(n-1\\) \u6761\u8fb9\u3002","title":"\u7b80\u4ecb"},{"location":"posts/graph/tree/MST/#kruskal","text":"Kruskal \u7b97\u6cd5\u662f\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\u3002 \u5c06 \\(m\\) \u6761\u8fb9\u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff1b \u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8fb9\uff0c\u82e5\u6b64\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u672a\u8fde\u901a\uff0c\u5219\u5728\u6811\u4e2d\u52a0\u5165\u6b64\u8fb9\uff0c\u5e76\u8fde\u901a\u4e24\u4e2a\u9876\u70b9\u3002\u91cd\u590d\u76f4\u5230\u5171\u52a0\u5165 \\(n-1\\) \u6761\u8fb9\u3002 \u4f7f\u7528 \u5e76\u67e5\u96c6 \u5224\u65ad\u548c\u7ef4\u62a4\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u8fde\u901a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m\\log{m})\\) \uff0c\u9002\u7528\u4e8e \u7a00\u758f\u56fe \u3002 Code int n , m , fa []; struct edge { int x , y , len ; } g []; bool cmp ( edge x , edge y ) { return x . len < y . len ; } int find ( int x ) { return ! fa [ x ] ? x : fa [ x ] = find ( fa [ x ]); } int kruskal () { sort ( g + 1 , g + m + 1 , cmp ); int tot = 0 , sum = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( tot == n - 1 ) break ; int rx = find ( g [ i ]. x ); int ry = find ( g [ i ]. y ); if ( rx != ry ) { tot ++ , fa [ rx ] = ry , sum += g [ i ]. len ; } } return tot == n - 1 ? sum : -1 ; //\u5982\u679c\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5219\u8fd4\u56de\u8fb9\u6743\u548c\uff0c\u5426\u5219\u8fd4\u56de -1 }","title":"Kruskal \u7b97\u6cd5"},{"location":"posts/graph/tree/MST/#prim","text":"\\(dis[i]\\) \u8868\u793a\u8282\u70b9 \\(i\\) \u5230\u6811\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5efa\u7acb\u4e00\u68f5\u53ea\u6709\u8282\u70b9 \\(1\\) \u7684\u6811\uff0c \\(dis[1]=0\\) \uff1b \u9009\u62e9\u79bb\u6811\u6700\u8fd1\uff08 \\(dis\\) \u503c\u6700\u5c0f\uff09\u7684\u70b9\u52a0\u5165\u6811\uff0c\u5bf9\u8be5\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u8fdb\u884c \u677e\u5f1b\u64cd\u4f5c \u3002\u91cd\u590d\u6267\u884c\u76f4\u5230\u52a0\u5165 \\(n-1\\) \u6761\u8fb9\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2)\\) \uff0c\u9002\u7528\u4e8e \u7a20\u5bc6\u56fe \u3002 Code int prim () { int sum = 0 ; memset ( avl , true , sizeof avl ); memset ( dis , 0x7f , sizeof dis ); dis [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { int minn = INF , minp = 0 ; for ( int j = 2 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] < minn ) minn = dis [ j ], minp = j ; if ( ! minp ) return -1 ; avl [ minp ] = false , sum += minn ; for ( int j = 1 ; j <= n ; j ++ ) if ( avl [ j ] && dis [ j ] > g [ minp ][ j ]) dis [ j ] = g [ minp ][ j ]; } return sum ; }","title":"Prim \u7b97\u6cd5"},{"location":"posts/graph/tree/ergodic/","text":"\u7b80\u4ecb $ \u9012\u5f52\u8bbf\u95ee\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u8fc7\u7a0b\u53eb\u505a \u6811\u7684\u904d\u5386 \u3002\u672c\u7ae0\u4ecb\u7ecd\u4e8c\u53c9\u6811\u7684 \\(3\\) \u79cd\u904d\u5386\u65b9\u5f0f\u3002 \u524d\u5e8f\u904d\u5386 $ \u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u518d\u904d\u5386\u5de6\u5b50\u6811\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\u3002\u4e0a\u56fe\u7684\u524d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a \\(1\u21922\u21924\u21925\u21923\\) \u3002 Code void dfs ( int u ) { // \u6253\u5370\u4ee5 u \u4e3a\u6839\u7684\u6811\u7684\u904d\u5386\u987a\u5e8f if ( ! u ) return ; cout << u << endl ; dfs ( l [ u ]); // l[u] \u8868\u793a u \u7684\u5de6\u5b50\u8282\u70b9 dfs ( r [ u ]); // r[u] \u8868\u793a u \u7684\u53f3\u5b50\u8282\u70b9 } \u4e2d\u5e8f\u904d\u5386 $ \u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\u3002\u4e0a\u56fe\u7684\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a \\(4\u21922\u21925\u21921\u21923\\) \u3002 Code void dfs ( int u ) { if ( ! u ) return ; dfs ( l [ u ]); cout << u << endl ; dfs ( r [ u ]); } \u540e\u5e8f\u904d\u5386 $ \u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9\u3002\u4e0a\u56fe\u7684\u540e\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a \\(4\u21925\u21922\u21923\u21921\\) \u3002 Code void dfs ( int u ) { if ( ! u ) return ; dfs ( l [ u ]); dfs ( r [ u ]); cout << u << endl ; } \u6811\u7684\u6062\u590d $ Faq \u8be5\u6a21\u5757\u6b63\u5728\u5f00\u53d1\u4e2d \\(\\cdots \\ \\cdots\\)","title":"\u6811\u7684\u904d\u5386"},{"location":"posts/graph/tree/ergodic/#_1","text":"\u9012\u5f52\u8bbf\u95ee\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u8fc7\u7a0b\u53eb\u505a \u6811\u7684\u904d\u5386 \u3002\u672c\u7ae0\u4ecb\u7ecd\u4e8c\u53c9\u6811\u7684 \\(3\\) \u79cd\u904d\u5386\u65b9\u5f0f\u3002","title":"\u7b80\u4ecb"},{"location":"posts/graph/tree/ergodic/#_2","text":"\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u518d\u904d\u5386\u5de6\u5b50\u6811\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\u3002\u4e0a\u56fe\u7684\u524d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a \\(1\u21922\u21924\u21925\u21923\\) \u3002 Code void dfs ( int u ) { // \u6253\u5370\u4ee5 u \u4e3a\u6839\u7684\u6811\u7684\u904d\u5386\u987a\u5e8f if ( ! u ) return ; cout << u << endl ; dfs ( l [ u ]); // l[u] \u8868\u793a u \u7684\u5de6\u5b50\u8282\u70b9 dfs ( r [ u ]); // r[u] \u8868\u793a u \u7684\u53f3\u5b50\u8282\u70b9 }","title":"\u524d\u5e8f\u904d\u5386"},{"location":"posts/graph/tree/ergodic/#_3","text":"\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\u3002\u4e0a\u56fe\u7684\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a \\(4\u21922\u21925\u21921\u21923\\) \u3002 Code void dfs ( int u ) { if ( ! u ) return ; dfs ( l [ u ]); cout << u << endl ; dfs ( r [ u ]); }","title":"\u4e2d\u5e8f\u904d\u5386"},{"location":"posts/graph/tree/ergodic/#_4","text":"\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9\u3002\u4e0a\u56fe\u7684\u540e\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a \\(4\u21925\u21922\u21923\u21921\\) \u3002 Code void dfs ( int u ) { if ( ! u ) return ; dfs ( l [ u ]); dfs ( r [ u ]); cout << u << endl ; }","title":"\u540e\u5e8f\u904d\u5386"},{"location":"posts/graph/tree/ergodic/#_5","text":"Faq \u8be5\u6a21\u5757\u6b63\u5728\u5f00\u53d1\u4e2d \\(\\cdots \\ \\cdots\\)","title":"\u6811\u7684\u6062\u590d"},{"location":"posts/math/factor/","text":"\u5b9a\u4e49 $ \u82e5\u6574\u6570 \\(n\\%d=0\\) \uff0c\u5219 \\(d\\) \u662f \\(n\\) \u7684 \u56e0\u6570 \uff0c\u8bb0\u4e3a \\(d|n\\) \u3002 \u4efb\u610f \\(n\\in Z^{+}\\) \u90fd\u80fd\u552f\u4e00\u5206\u89e3\u4e3a\u6709\u9650\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\uff1a \\[ n=p_1^{c_1}\u00d7p_2^{c_2}\u00d7...\u00d7p_m^{c_m} \\ , \\ p_i\u2208\\mathbb{P},c_i\\in Z^{+} \\] \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 $ \u6700\u5927\u516c\u56e0\u6570 $ Question \u5982\u4f55\u6c42 \\(a\\) \u548c \\(b\\) \u7684\u6700\u5927\u516c\u56e0\u6570\uff1f \\(gcd(a,b)\\) \u8868\u793a \\(a\\) \u548c \\(b\\) \u7684\u6700\u5927\u516c\u56e0\u6570\u3002 \u8bbe \\(a > b\\) \uff0c \\(gcd(a, b)=x\\) \uff0c\u5219 \\(a|x, b|x,(a\\%b)|x\\) \uff0c \\(\u2234gcd(a,b)=gcd(b,a\\%b)(a > b > a\\%b)\\) \u3002 \u4e8e\u662f\u300c\u6c42 \\(gcd(a,b)\\) \u300d\u7684\u95ee\u9898\u88ab\u8f6c\u5316\u4e3a\u300c\u6c42 \\(gcd(b,a\\%b)\\) \u300d\u8fd9\u4e00\u8303\u56f4\u66f4\u5c0f\u7684\u95ee\u9898\u3002\u5f53 \\(b=0\\) \u65f6\uff0c \\(a\\) \u5373\u4e3a\u6700\u5927\u516c\u56e0\u6570\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(log{(a+b)})\\) \u3002 Code int gcd ( a , b ) { if ( ! b ) return a ; return gcd ( b , a % b ); } \u6700\u5c0f\u516c\u500d\u6570 $ Question \u5982\u4f55\u6c42 \\(a\\) \u548c \\(b\\) \u7684\u6700\u5c0f\u516c\u500d\u6570\uff1f \\(lcm(a,b)\\) \u8868\u793a \\(a\\) \u548c \\(b\\) \u7684\u6700\u5c0f\u516c\u500d\u6570\u3002 \u8bbe \\(gcd(a,b)=x\\) \uff0c\u5219\u6709 \\(a = k_1x,\\) \\(b=k_2x,\\) \\(k_i \\in Z^{+}\\) \uff0c \\(\\displaystyle\u2234lcm(a,b)=k_1k_2x=\\frac{ab}{x}\\) \uff0c\u5373 \\(\\displaystyle lcm(a,b)=\\frac{ab}{gcd(a,b)}\\) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u548c \\(gcd\\) \u4e00\u81f4\u3002 Code int lcm ( a , b ) { return a * b / gcd ( a , b ); } \u4e92\u8d28\u6570 $ \u516c\u56e0\u6570\u53ea\u6709 \\(1\\) \u7684\u4e00\u5bf9\u7684\u6574\u6570\u662f\u4e92\u8d28\u6570\u3002 Code bool isCoprime ( int a , int b ) { return gcd ( a , b ) == 1 ; } \u5206\u89e3\u8d28\u56e0\u6570 $ Question \u5982\u4f55\u5c06 \\(n\\) \u5206\u89e3\u4e3a\u591a\u4e2a\u8d28\u6570\u76f8\u4e58\u7684\u5f62\u5f0f\uff08\u89c1 \u7b97\u6570\u57fa\u672c\u5b9a\u7406 \uff09\uff1f \u8bd5\u9664\u6cd5 $ \u5224\u65ad \\(n\\) \u80fd\u5426\u6574\u9664 \\([2,\\sqrt{n}]\\) \u4e2d\u7684\u6240\u6709\u6574\u6570 \\(i\\) \uff0c\u5982\u679c\u80fd\uff0c\u5219\u4ece \\(n\\) \u4e2d\u9664\u6389\u6240\u6709\u7684\u56e0\u5b50 \\(i\\) \uff0c\u5e76\u8bb0\u5f55\u56e0\u5b50 \\(i\\) \u7684\u4e2a\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt n)\\) \u3002 \u6837\u4f8b\u7a0b\u5e8f\u4e2d\uff0c \\(vec[i].first\\) \u4e3a \\(n\\) \u7684\u7b2c \\(i\\) \u4e2a\u56e0\u6570\uff0c \\(vec[i].second\\) \u4e3a\u5176\u6307\u6570\u3002 Code vector < pair < int , int > > devide ( int n ) { vector < pair < int , int > > vec ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) { if ( n % i == 0 ) { vec . push_back ( make_pair ( i , 0 )); while ( n % i == 0 ) n /= i , vec . back (). second ++ ; } } if ( n != 1 ) vec . push_back ( make_pair ( n , 1 )); return vec ; } \u500d\u6570\u6cd5 $ Question \u5982\u4f55\u6c42 \\([1,n]\\) \u4e2d\u6240\u6709\u6574\u6570\u7684\u56e0\u6570\u96c6\u5408\uff1f \u7528\u300c\u8bd5\u9664\u6cd5\u300d\u5f88\u5bb9\u6613\u8d85\u65f6\uff0c\u6b64\u65f6\u8003\u8651\u300c\u500d\u6570\u6cd5\u300d\uff1a \\(i\\) \u4e00\u5b9a\u662f \\(i\u00b7j(j\\in Z^{+})\\) \u7684\u56e0\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nlog{n})\\) \u3002 Code vector < vector < int > > factor ( int n ) { vector < vector < int > > vec = vector < vector < int > > ( n + 1 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; i * j <= n ; j ++ ) vec [ i * j ]. push_back ( i ); return vec ; } \u6b27\u62c9\u51fd\u6570 $ Info \\(n\\) \u7684\u6b27\u62c9\u51fd\u6570\u4e3a \\([1,n]\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8bb0\u4e3a \\(\\phi(n)\\) \u3002\u7279\u522b\u5730\uff0c \\(\\phi(1)=1\\) \u3002 Question \u5982\u4f55\u6c42 \\([1,n]\\) \u4e2d\u4efb\u610f\u6570\u7684\u6b27\u62c9\u51fd\u6570\uff1f \u5982\u679c \\(p\\) \u662f \\(n\\) \u7684\u8d28\u56e0\u5b50\uff0c\u5219 \\(p\\) \u7684\u6240\u6709\u500d\u6570\uff08 \\(2p,3p,\\cdots,\\) \u5171 \\(\\displaystyle\\frac{n}{p}\\) \u4e2a\uff09\u90fd\u4e0d\u4e0e \\(n\\) \u4e92\u8d28\u3002\u5219\u53ef\u80fd\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u53ea\u5269 \\(\\displaystyle n\u00b7(1-\\frac{1}{p})\\) \u4e2a\u3002 \u8bbe \\(n\\) \u7684\u8d28\u56e0\u5b50\u4e3a \\(p_1,p_2,\\cdots,p_m\\) \uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u6709\uff1a \\[ \\phi(n)=n(1-\\frac{1}{p_1})(1-\\frac{1}{p_2})\\cdots(1-\\frac{1}{p_m})=n\\prod_{i=1}^{m}(1-\\frac{1}{p_i}) \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt{n})\\) \u3002 Code int phi ( int n ) { int ans = n ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) if ( n % i == 0 ) { ans = ans / i * ( i - 1 ); while ( n % i == 0 ) n /= i ; } if ( n > 1 ) ans = ans / n * ( n - 1 ); return ans ; } \u7ebf\u6027\u6b27\u62c9\u7b97\u6cd5 $ Info \u5982\u4f55\u6c42 \\([1,n]\\) \u4e2d\u6240\u6709\u6570\u7684\u6b27\u62c9\u51fd\u6570\u96c6\u5408\uff1f \u57fa\u4e8e\u8d28\u6570\u7684\u7ebf\u6027\u7b5b\u6cd5\u8fdb\u884c\u6539\u5199\uff1a \u82e5 \\(a,b\\) \u4e92\u8d28\uff0c\u5219 \\(\\phi(ab)=\\phi(a) \\cdot \\phi(b)\\) \u3002\u5728\u7ebf\u6027\u7b5b\u6cd5\u6784\u9020\u5408\u6570 \\(i \\cdot prime[j]\\) \u65f6\uff0c\u7531\u4e8e \\(i\\) \u548c \\(prime[j]\\) \u4e92\u8d28\uff0c\u4ee4 \\(phi[i \u00d7 prime[j]]=phi[i] \u00d7 phi[prime[j]]\\) \u3002 \u82e5 \\(phi[i] = 0\\) \uff0c\u5219 \\(i\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\uff0c\u662f\u8d28\u6570\uff0c\u4ee4 \\(phi[i]=i-1\\) \u3002 \u5f53 \\(i\\%prime[j]=0\\) \u65f6\uff0c \\(i\\) \u548c \\(prime[j]\\) \u4e0d\u4e92\u8d28\uff0c\u9000\u51fa\u5faa\u73af\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code vector < int > phi ( int n ) { if ( n == 1 ) return vector < int > { 0 , 1 }; vector < int > prime , phi ( n + 1 ); for ( int i = 2 ; i <= n ; i ++ ) { if ( ! phi [ i ]) phi [ i ] = i - 1 , prime . push_back ( i ); for ( int j = 0 ; i * prime [ j ] <= n ; j ++ ) { if ( i % prime [ j ] == 0 ) break ; phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; } } return phi ; }","title":"\u56e0\u6570"},{"location":"posts/math/factor/#_1","text":"\u82e5\u6574\u6570 \\(n\\%d=0\\) \uff0c\u5219 \\(d\\) \u662f \\(n\\) \u7684 \u56e0\u6570 \uff0c\u8bb0\u4e3a \\(d|n\\) \u3002 \u4efb\u610f \\(n\\in Z^{+}\\) \u90fd\u80fd\u552f\u4e00\u5206\u89e3\u4e3a\u6709\u9650\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\uff1a \\[ n=p_1^{c_1}\u00d7p_2^{c_2}\u00d7...\u00d7p_m^{c_m} \\ , \\ p_i\u2208\\mathbb{P},c_i\\in Z^{+} \\]","title":"\u5b9a\u4e49"},{"location":"posts/math/factor/#_2","text":"","title":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"posts/math/factor/#_3","text":"Question \u5982\u4f55\u6c42 \\(a\\) \u548c \\(b\\) \u7684\u6700\u5927\u516c\u56e0\u6570\uff1f \\(gcd(a,b)\\) \u8868\u793a \\(a\\) \u548c \\(b\\) \u7684\u6700\u5927\u516c\u56e0\u6570\u3002 \u8bbe \\(a > b\\) \uff0c \\(gcd(a, b)=x\\) \uff0c\u5219 \\(a|x, b|x,(a\\%b)|x\\) \uff0c \\(\u2234gcd(a,b)=gcd(b,a\\%b)(a > b > a\\%b)\\) \u3002 \u4e8e\u662f\u300c\u6c42 \\(gcd(a,b)\\) \u300d\u7684\u95ee\u9898\u88ab\u8f6c\u5316\u4e3a\u300c\u6c42 \\(gcd(b,a\\%b)\\) \u300d\u8fd9\u4e00\u8303\u56f4\u66f4\u5c0f\u7684\u95ee\u9898\u3002\u5f53 \\(b=0\\) \u65f6\uff0c \\(a\\) \u5373\u4e3a\u6700\u5927\u516c\u56e0\u6570\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(log{(a+b)})\\) \u3002 Code int gcd ( a , b ) { if ( ! b ) return a ; return gcd ( b , a % b ); }","title":"\u6700\u5927\u516c\u56e0\u6570"},{"location":"posts/math/factor/#_4","text":"Question \u5982\u4f55\u6c42 \\(a\\) \u548c \\(b\\) \u7684\u6700\u5c0f\u516c\u500d\u6570\uff1f \\(lcm(a,b)\\) \u8868\u793a \\(a\\) \u548c \\(b\\) \u7684\u6700\u5c0f\u516c\u500d\u6570\u3002 \u8bbe \\(gcd(a,b)=x\\) \uff0c\u5219\u6709 \\(a = k_1x,\\) \\(b=k_2x,\\) \\(k_i \\in Z^{+}\\) \uff0c \\(\\displaystyle\u2234lcm(a,b)=k_1k_2x=\\frac{ab}{x}\\) \uff0c\u5373 \\(\\displaystyle lcm(a,b)=\\frac{ab}{gcd(a,b)}\\) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u548c \\(gcd\\) \u4e00\u81f4\u3002 Code int lcm ( a , b ) { return a * b / gcd ( a , b ); }","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"posts/math/factor/#_5","text":"\u516c\u56e0\u6570\u53ea\u6709 \\(1\\) \u7684\u4e00\u5bf9\u7684\u6574\u6570\u662f\u4e92\u8d28\u6570\u3002 Code bool isCoprime ( int a , int b ) { return gcd ( a , b ) == 1 ; }","title":"\u4e92\u8d28\u6570"},{"location":"posts/math/factor/#_6","text":"Question \u5982\u4f55\u5c06 \\(n\\) \u5206\u89e3\u4e3a\u591a\u4e2a\u8d28\u6570\u76f8\u4e58\u7684\u5f62\u5f0f\uff08\u89c1 \u7b97\u6570\u57fa\u672c\u5b9a\u7406 \uff09\uff1f","title":"\u5206\u89e3\u8d28\u56e0\u6570"},{"location":"posts/math/factor/#_7","text":"\u5224\u65ad \\(n\\) \u80fd\u5426\u6574\u9664 \\([2,\\sqrt{n}]\\) \u4e2d\u7684\u6240\u6709\u6574\u6570 \\(i\\) \uff0c\u5982\u679c\u80fd\uff0c\u5219\u4ece \\(n\\) \u4e2d\u9664\u6389\u6240\u6709\u7684\u56e0\u5b50 \\(i\\) \uff0c\u5e76\u8bb0\u5f55\u56e0\u5b50 \\(i\\) \u7684\u4e2a\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt n)\\) \u3002 \u6837\u4f8b\u7a0b\u5e8f\u4e2d\uff0c \\(vec[i].first\\) \u4e3a \\(n\\) \u7684\u7b2c \\(i\\) \u4e2a\u56e0\u6570\uff0c \\(vec[i].second\\) \u4e3a\u5176\u6307\u6570\u3002 Code vector < pair < int , int > > devide ( int n ) { vector < pair < int , int > > vec ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) { if ( n % i == 0 ) { vec . push_back ( make_pair ( i , 0 )); while ( n % i == 0 ) n /= i , vec . back (). second ++ ; } } if ( n != 1 ) vec . push_back ( make_pair ( n , 1 )); return vec ; }","title":"\u8bd5\u9664\u6cd5"},{"location":"posts/math/factor/#_8","text":"Question \u5982\u4f55\u6c42 \\([1,n]\\) \u4e2d\u6240\u6709\u6574\u6570\u7684\u56e0\u6570\u96c6\u5408\uff1f \u7528\u300c\u8bd5\u9664\u6cd5\u300d\u5f88\u5bb9\u6613\u8d85\u65f6\uff0c\u6b64\u65f6\u8003\u8651\u300c\u500d\u6570\u6cd5\u300d\uff1a \\(i\\) \u4e00\u5b9a\u662f \\(i\u00b7j(j\\in Z^{+})\\) \u7684\u56e0\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nlog{n})\\) \u3002 Code vector < vector < int > > factor ( int n ) { vector < vector < int > > vec = vector < vector < int > > ( n + 1 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; i * j <= n ; j ++ ) vec [ i * j ]. push_back ( i ); return vec ; }","title":"\u500d\u6570\u6cd5"},{"location":"posts/math/factor/#_9","text":"Info \\(n\\) \u7684\u6b27\u62c9\u51fd\u6570\u4e3a \\([1,n]\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8bb0\u4e3a \\(\\phi(n)\\) \u3002\u7279\u522b\u5730\uff0c \\(\\phi(1)=1\\) \u3002 Question \u5982\u4f55\u6c42 \\([1,n]\\) \u4e2d\u4efb\u610f\u6570\u7684\u6b27\u62c9\u51fd\u6570\uff1f \u5982\u679c \\(p\\) \u662f \\(n\\) \u7684\u8d28\u56e0\u5b50\uff0c\u5219 \\(p\\) \u7684\u6240\u6709\u500d\u6570\uff08 \\(2p,3p,\\cdots,\\) \u5171 \\(\\displaystyle\\frac{n}{p}\\) \u4e2a\uff09\u90fd\u4e0d\u4e0e \\(n\\) \u4e92\u8d28\u3002\u5219\u53ef\u80fd\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u53ea\u5269 \\(\\displaystyle n\u00b7(1-\\frac{1}{p})\\) \u4e2a\u3002 \u8bbe \\(n\\) \u7684\u8d28\u56e0\u5b50\u4e3a \\(p_1,p_2,\\cdots,p_m\\) \uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u6709\uff1a \\[ \\phi(n)=n(1-\\frac{1}{p_1})(1-\\frac{1}{p_2})\\cdots(1-\\frac{1}{p_m})=n\\prod_{i=1}^{m}(1-\\frac{1}{p_i}) \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt{n})\\) \u3002 Code int phi ( int n ) { int ans = n ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) if ( n % i == 0 ) { ans = ans / i * ( i - 1 ); while ( n % i == 0 ) n /= i ; } if ( n > 1 ) ans = ans / n * ( n - 1 ); return ans ; }","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"posts/math/factor/#_10","text":"Info \u5982\u4f55\u6c42 \\([1,n]\\) \u4e2d\u6240\u6709\u6570\u7684\u6b27\u62c9\u51fd\u6570\u96c6\u5408\uff1f \u57fa\u4e8e\u8d28\u6570\u7684\u7ebf\u6027\u7b5b\u6cd5\u8fdb\u884c\u6539\u5199\uff1a \u82e5 \\(a,b\\) \u4e92\u8d28\uff0c\u5219 \\(\\phi(ab)=\\phi(a) \\cdot \\phi(b)\\) \u3002\u5728\u7ebf\u6027\u7b5b\u6cd5\u6784\u9020\u5408\u6570 \\(i \\cdot prime[j]\\) \u65f6\uff0c\u7531\u4e8e \\(i\\) \u548c \\(prime[j]\\) \u4e92\u8d28\uff0c\u4ee4 \\(phi[i \u00d7 prime[j]]=phi[i] \u00d7 phi[prime[j]]\\) \u3002 \u82e5 \\(phi[i] = 0\\) \uff0c\u5219 \\(i\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\uff0c\u662f\u8d28\u6570\uff0c\u4ee4 \\(phi[i]=i-1\\) \u3002 \u5f53 \\(i\\%prime[j]=0\\) \u65f6\uff0c \\(i\\) \u548c \\(prime[j]\\) \u4e0d\u4e92\u8d28\uff0c\u9000\u51fa\u5faa\u73af\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code vector < int > phi ( int n ) { if ( n == 1 ) return vector < int > { 0 , 1 }; vector < int > prime , phi ( n + 1 ); for ( int i = 2 ; i <= n ; i ++ ) { if ( ! phi [ i ]) phi [ i ] = i - 1 , prime . push_back ( i ); for ( int j = 0 ; i * prime [ j ] <= n ; j ++ ) { if ( i % prime [ j ] == 0 ) break ; phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; } } return phi ; }","title":"\u7ebf\u6027\u6b27\u62c9\u7b97\u6cd5"},{"location":"posts/math/model/","text":"\u5b9a\u4e49 $ \u82e5 \\(a,b,m\\in Z,a\\%m=b\\%m\\) \uff0c\u5219 \\(a\\) \u548c \\(b\\) \u6a21 \\(m\\) \u540c\u4f59\uff0c\u8bb0\u4f5c \\(a\u2261b\\pmod{m}\\) \u3002 \u540c\u4f59\u7c7b $ \u5bf9\u4e8e\u4efb\u610f \\(a,k,m\\in Z\\) \uff0c\u90fd\u6709 \\(a+km\u2261a\\pmod{m}\\) \u3002\u96c6\u5408 \\(\\{a+km\\}\\) \u4e3a\u6a21 \\(m\\) \u7684 \u540c\u4f59\u7c7b \uff0c\u7b80\u8bb0\u4e3a \\(\\overline{a}\\) \u3002 \\(a\\) \u662f\u8be5\u540c\u4f59\u7c7b\u7684 \u4ee3\u8868\u5143 \u3002 \u6a21 \\(m\\) \u7684\u540c\u4f59\u7c7b\u6709 \\(m\\) \u4e2a\uff0c\u4e3a \\(\\overline{0},\\overline{1},\\overline{2},\\cdots,\\overline{m-1}\\) \u3002 \u540c\u4f59\u7cfb $ \u4ece\u6a21 \\(m\\) \u7684\u6240\u6709\u540c\u4f59\u7c7b\u4e2d\u5404\u53d6\u4e00\u4e2a\u6570\uff0c\u6784\u6210\u7684\u96c6\u5408\u662f \\(m\\) \u7684 \u5b8c\u5168\u540c\u4f59\u7cfb \u3002 \u6a21 \\(m\\) \u7684\u540c\u4f59\u7c7b\u4e2d\uff0c\u4ee3\u8868\u5143\u4e0e \\(m\\) \u4e92\u8d28\u7684\u6709 \\(\\phi(m)\\) \u4e2a\u3002\u4ece\u8fd9\u4e9b\u540c\u4f59\u7c7b\u4e2d\u5404\u53d6\u4e00\u4e2a\u6570\uff0c\u6784\u6210\u7684\u96c6\u5408\u662f \\(m\\) \u7684 \u7b80\u5316\u540c\u4f59\u7cfb \u3002 \u4e58\u6cd5\u5c01\u95ed $ \u82e5 \\(a,b\\in[1,m)\\) \u5206\u522b\u4e0e \\(m\\) \u4e92\u8d28\uff0c\u5219 \\(ab\\) \u4e0e \\(m\\) \u4e92\u8d28\u3002 \u53c8 \\(\u2235gcd(ab,m)=gcd(m,ab\\%m)=1\\) \uff0c \\(\u2234ab\\%m\\) \u4e5f\u4e0e \\(m\\) \u4e92\u8d28\u3002 \\(\u2234a,b,ab\\%m\\) \u90fd\u5c5e\u4e8e \\(m\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u3002 \u56e0\u6b64 \\(m\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u300c\u5173\u4e8e\u6a21 \\(m\\) \u4e58\u6cd5\u5c01\u95ed \u300d\u3002 \u540c\u4f59\u5b9a\u7406 $ \u8d39\u9a6c\u5c0f\u5b9a\u7406 $ \u82e5 \\(a\\in Z\\) \uff0c \\(p\\) \u4e3a\u8d28\u6570\u4e14 \\(a,p\\) \u4e92\u8d28\uff0c\u5219 \\(a^p\u2261a\\pmod{p}\\) \u3002 \u8bc1\u660e\uff1a \u8bbe \\(p\\) \u7684\u5b8c\u5168\u540c\u4f59\u7cfb\u4e3a \\(C=\\{0,1,2,\\cdots,p-1\\}\\) \uff0c\u5219\u6709 \\(C_i\\not\u2261C_j\\pmod{p}\\) \uff0c \\(\u2235a,C_i,C_j\\) \u5206\u522b\u4e0e \\(p\\) \u4e92\u8d28\uff0c \\(\u2234aC_i\\not\u2261aC_j\\pmod{p}\\) \uff0c \\(\u2235aC_i\\%p\\in C\\) \uff0c \\(\u2234aC=\\{0,a,2a,\\cdots,(p-1)\u00b7a\\}\\) \u4e5f\u4e3a \\(p\\) \u7684\u5b8c\u5168\u540c\u4f59\u7cfb\uff0c \\(\u2234\\prod_{i=2}^{p}C_i\u2261\\prod_{i=2}^{p}aC_i=a^{p-1}\\prod_{i=2}^{p}C_i\\pmod{p}\\) \uff0c \\(\u2234a^{p-1}\u22611\\pmod{p}\\) \uff0c\u5373 \\(a^p\u2261a\\pmod{p}\\) \u3002 \u6b27\u62c9\u5b9a\u7406 $ \u82e5 \\(a,n\\in Z\\) \u4e92\u8d28\uff0c\u5219 \\(a^{\\phi(n)}\u22611\\pmod{n}\\) \u3002 \u8bc1\u660e\uff1a \u8bbe \\(n\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u4e3a \\(C=\\{C_1,C_2,\\cdots,C_{\\phi(n)}\\}\\) \uff0c\u5219\u6709 \\(C_i\\not\u2261C_j\\pmod{n}\\) \uff0c \\(\u2235a,C_i,C_j\\) \u5206\u522b\u4e0e \\(n\\) \u4e92\u8d28\uff0c \\(\u2234aC_i\\not\u2261aC_j\\pmod{n}\\) \uff0c \\(\u2235n\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u300c\u5173\u4e8e\u6a21 \\(n\\) \u4e58\u6cd5\u5c01\u95ed\u300d\uff0c \\(\u2234aC_i\\%n\\in C\\) \uff0c \\(\u2234aC=\\{aC_1,aC_2,\\cdots,aC_{\\phi(n)}\\}\\) \u4e5f\u4e3a \\(n\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\uff0c \\(\u2234\\prod_{i=1}^{\\phi(n)}C_i\u2261\\prod_{i=1}^{\\phi(n)}aC_i=a^{\\phi(n)}\\prod_{i=1}^{\\phi(n)}C_i\\pmod{n}\\) \uff0c \\(\u2234a^{\\phi(n)}\u22611\\pmod{n}\\) \u3002 \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 $ \u82e5 \\(a,n\\in Z\\) \u4e92\u8d28\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f \\(b\\in Z\\) \uff0c\u6709 \\(a^b\u2261a^{b \\% \\phi(n)}\\pmod{n}\\) \u3002 \u8bc1\u660e\uff1a \u8bbe \\(b\\%\\phi(n)=q\\) \uff0c\u5219\u6709 \\(b=k\u00b7\\phi(n)+q(0\u2264k<\\phi(n))\\) \uff0c \\(\u2234a^b=a^{k\u00b7\\phi(n)+q}=(a^{\\phi(n)})^k\u00b7a^q\u2261a^q=a^{b\\%\\phi(n)}\\pmod{n}\\) \uff0c \u5373 \\(a^b\u2261a^{b\\%\\phi(n)}\\pmod{n}\\) \u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 $ \u8d1d\u7956\u5b9a\u7406 $ Info \u5bf9\u4e8e\u4efb\u610f \\(a,b\\in Z\\) \uff0c\u5b58\u5728 \\(x,y\\in Z\\) \uff0c\u4f7f \\(ax+by=gcd(a,b)\\) \u3002 \u4e58\u6cd5\u9006\u5143 $ Info \u82e5 \\(a,b,m\\in Z\\) \uff0c \\(b\\) \u4e0e \\(m\\) \u4e92\u8d28\u4e14 \\(b|a\\) \uff0c\u5219\u5b58\u5728 \\(x\\in Z\\) \uff0c\u4f7f \\(\\displaystyle\\frac{a}{b}\u2261ax\\pmod{m}\\) \u3002\u79f0 \\(x\\) \u4e3a \\(b\\) \u7684\u6a21 \\(m\\) \u4e58\u6cd5\u9006\u5143\uff0c\u8bb0\u4e3a \\(b^{-1}\\pmod{m}\\) \u3002","title":"\u540c\u4f59"},{"location":"posts/math/model/#_1","text":"\u82e5 \\(a,b,m\\in Z,a\\%m=b\\%m\\) \uff0c\u5219 \\(a\\) \u548c \\(b\\) \u6a21 \\(m\\) \u540c\u4f59\uff0c\u8bb0\u4f5c \\(a\u2261b\\pmod{m}\\) \u3002","title":"\u5b9a\u4e49"},{"location":"posts/math/model/#_2","text":"\u5bf9\u4e8e\u4efb\u610f \\(a,k,m\\in Z\\) \uff0c\u90fd\u6709 \\(a+km\u2261a\\pmod{m}\\) \u3002\u96c6\u5408 \\(\\{a+km\\}\\) \u4e3a\u6a21 \\(m\\) \u7684 \u540c\u4f59\u7c7b \uff0c\u7b80\u8bb0\u4e3a \\(\\overline{a}\\) \u3002 \\(a\\) \u662f\u8be5\u540c\u4f59\u7c7b\u7684 \u4ee3\u8868\u5143 \u3002 \u6a21 \\(m\\) \u7684\u540c\u4f59\u7c7b\u6709 \\(m\\) \u4e2a\uff0c\u4e3a \\(\\overline{0},\\overline{1},\\overline{2},\\cdots,\\overline{m-1}\\) \u3002","title":"\u540c\u4f59\u7c7b"},{"location":"posts/math/model/#_3","text":"\u4ece\u6a21 \\(m\\) \u7684\u6240\u6709\u540c\u4f59\u7c7b\u4e2d\u5404\u53d6\u4e00\u4e2a\u6570\uff0c\u6784\u6210\u7684\u96c6\u5408\u662f \\(m\\) \u7684 \u5b8c\u5168\u540c\u4f59\u7cfb \u3002 \u6a21 \\(m\\) \u7684\u540c\u4f59\u7c7b\u4e2d\uff0c\u4ee3\u8868\u5143\u4e0e \\(m\\) \u4e92\u8d28\u7684\u6709 \\(\\phi(m)\\) \u4e2a\u3002\u4ece\u8fd9\u4e9b\u540c\u4f59\u7c7b\u4e2d\u5404\u53d6\u4e00\u4e2a\u6570\uff0c\u6784\u6210\u7684\u96c6\u5408\u662f \\(m\\) \u7684 \u7b80\u5316\u540c\u4f59\u7cfb \u3002","title":"\u540c\u4f59\u7cfb"},{"location":"posts/math/model/#_4","text":"\u82e5 \\(a,b\\in[1,m)\\) \u5206\u522b\u4e0e \\(m\\) \u4e92\u8d28\uff0c\u5219 \\(ab\\) \u4e0e \\(m\\) \u4e92\u8d28\u3002 \u53c8 \\(\u2235gcd(ab,m)=gcd(m,ab\\%m)=1\\) \uff0c \\(\u2234ab\\%m\\) \u4e5f\u4e0e \\(m\\) \u4e92\u8d28\u3002 \\(\u2234a,b,ab\\%m\\) \u90fd\u5c5e\u4e8e \\(m\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u3002 \u56e0\u6b64 \\(m\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u300c\u5173\u4e8e\u6a21 \\(m\\) \u4e58\u6cd5\u5c01\u95ed \u300d\u3002","title":"\u4e58\u6cd5\u5c01\u95ed"},{"location":"posts/math/model/#_5","text":"","title":"\u540c\u4f59\u5b9a\u7406"},{"location":"posts/math/model/#_6","text":"\u82e5 \\(a\\in Z\\) \uff0c \\(p\\) \u4e3a\u8d28\u6570\u4e14 \\(a,p\\) \u4e92\u8d28\uff0c\u5219 \\(a^p\u2261a\\pmod{p}\\) \u3002 \u8bc1\u660e\uff1a \u8bbe \\(p\\) \u7684\u5b8c\u5168\u540c\u4f59\u7cfb\u4e3a \\(C=\\{0,1,2,\\cdots,p-1\\}\\) \uff0c\u5219\u6709 \\(C_i\\not\u2261C_j\\pmod{p}\\) \uff0c \\(\u2235a,C_i,C_j\\) \u5206\u522b\u4e0e \\(p\\) \u4e92\u8d28\uff0c \\(\u2234aC_i\\not\u2261aC_j\\pmod{p}\\) \uff0c \\(\u2235aC_i\\%p\\in C\\) \uff0c \\(\u2234aC=\\{0,a,2a,\\cdots,(p-1)\u00b7a\\}\\) \u4e5f\u4e3a \\(p\\) \u7684\u5b8c\u5168\u540c\u4f59\u7cfb\uff0c \\(\u2234\\prod_{i=2}^{p}C_i\u2261\\prod_{i=2}^{p}aC_i=a^{p-1}\\prod_{i=2}^{p}C_i\\pmod{p}\\) \uff0c \\(\u2234a^{p-1}\u22611\\pmod{p}\\) \uff0c\u5373 \\(a^p\u2261a\\pmod{p}\\) \u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"posts/math/model/#_7","text":"\u82e5 \\(a,n\\in Z\\) \u4e92\u8d28\uff0c\u5219 \\(a^{\\phi(n)}\u22611\\pmod{n}\\) \u3002 \u8bc1\u660e\uff1a \u8bbe \\(n\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u4e3a \\(C=\\{C_1,C_2,\\cdots,C_{\\phi(n)}\\}\\) \uff0c\u5219\u6709 \\(C_i\\not\u2261C_j\\pmod{n}\\) \uff0c \\(\u2235a,C_i,C_j\\) \u5206\u522b\u4e0e \\(n\\) \u4e92\u8d28\uff0c \\(\u2234aC_i\\not\u2261aC_j\\pmod{n}\\) \uff0c \\(\u2235n\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\u300c\u5173\u4e8e\u6a21 \\(n\\) \u4e58\u6cd5\u5c01\u95ed\u300d\uff0c \\(\u2234aC_i\\%n\\in C\\) \uff0c \\(\u2234aC=\\{aC_1,aC_2,\\cdots,aC_{\\phi(n)}\\}\\) \u4e5f\u4e3a \\(n\\) \u7684\u7b80\u5316\u540c\u4f59\u7cfb\uff0c \\(\u2234\\prod_{i=1}^{\\phi(n)}C_i\u2261\\prod_{i=1}^{\\phi(n)}aC_i=a^{\\phi(n)}\\prod_{i=1}^{\\phi(n)}C_i\\pmod{n}\\) \uff0c \\(\u2234a^{\\phi(n)}\u22611\\pmod{n}\\) \u3002","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"posts/math/model/#_8","text":"\u82e5 \\(a,n\\in Z\\) \u4e92\u8d28\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f \\(b\\in Z\\) \uff0c\u6709 \\(a^b\u2261a^{b \\% \\phi(n)}\\pmod{n}\\) \u3002 \u8bc1\u660e\uff1a \u8bbe \\(b\\%\\phi(n)=q\\) \uff0c\u5219\u6709 \\(b=k\u00b7\\phi(n)+q(0\u2264k<\\phi(n))\\) \uff0c \\(\u2234a^b=a^{k\u00b7\\phi(n)+q}=(a^{\\phi(n)})^k\u00b7a^q\u2261a^q=a^{b\\%\\phi(n)}\\pmod{n}\\) \uff0c \u5373 \\(a^b\u2261a^{b\\%\\phi(n)}\\pmod{n}\\) \u3002","title":"\u6269\u5c55\u6b27\u62c9\u5b9a\u7406"},{"location":"posts/math/model/#_9","text":"","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"posts/math/model/#_10","text":"Info \u5bf9\u4e8e\u4efb\u610f \\(a,b\\in Z\\) \uff0c\u5b58\u5728 \\(x,y\\in Z\\) \uff0c\u4f7f \\(ax+by=gcd(a,b)\\) \u3002","title":"\u8d1d\u7956\u5b9a\u7406"},{"location":"posts/math/model/#_11","text":"Info \u82e5 \\(a,b,m\\in Z\\) \uff0c \\(b\\) \u4e0e \\(m\\) \u4e92\u8d28\u4e14 \\(b|a\\) \uff0c\u5219\u5b58\u5728 \\(x\\in Z\\) \uff0c\u4f7f \\(\\displaystyle\\frac{a}{b}\u2261ax\\pmod{m}\\) \u3002\u79f0 \\(x\\) \u4e3a \\(b\\) \u7684\u6a21 \\(m\\) \u4e58\u6cd5\u9006\u5143\uff0c\u8bb0\u4e3a \\(b^{-1}\\pmod{m}\\) \u3002","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"posts/math/prime/","text":"\u5b9a\u4e49 $ \u8d28\u6570 \u4e0d\u80fd\u88ab \\(1\\) \u548c\u5b83\u672c\u8eab\u4e4b\u5916\u7684\u4efb\u4f55\u81ea\u7136\u6570\u6574\u9664\uff0c \u5408\u6570 \u5219\u76f8\u53cd\u3002 \\(1\\) \u65e2\u4e0d\u662f\u8d28\u6570\uff0c\u4e5f\u4e0d\u662f\u5408\u6570\u3002 \\(\\pi(n)\\) \u8868\u793a \\(n\\) \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\uff0c \\(\\displaystyle\\pi(n)\u2248\\frac{n}{\\ln{n}}\\) \u3002 \u7b2c \\(n\\) \u4e2a\u8d28\u6570\u7684\u6e10\u8fdb\u4f30\u8ba1\u4e3a \\(p(n)\\sim n\\ln{n}\\) \u3002 \u8d28\u6570\u7684\u5224\u5b9a $ Question \u5224\u5b9a\u975e\u8d1f\u6574\u6570 \\(n\\) \u662f\u5426\u4e3a\u8d28\u6570\uff1f \u8bd5\u9664\u6cd5 $ \u82e5 \\(n\\) \u4e3a\u5408\u6570\uff0c\u5219 \\(n\\) \u4e00\u5b9a\u6709\u56e0\u5b50 \\(\u2264\\sqrt{n}\\) \u3002 \u5224\u65ad \\(n\\) \u80fd\u5426\u6574\u9664 \\([2,\\sqrt n]\\) \u4e2d\u7684\u6574\u6570\uff0c\u5bf9\u4e8e \\(n=0\\) \u6216 \\(1\\) \u9700\u8981\u7279\u5224\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt n)\\) \u3002 Code bool isPrime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) if ( n % i == 0 ) return false ; return true ; } \u8d28\u6570\u7b5b\u6cd5 $ Question \u5982\u4f55\u6c42\u51fa \\(n\\) \u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570\uff1f \u6734\u7d20\u7b97\u6cd5 $ \u5bf9 \\([2,n]\\) \u4e2d\u7684\u6240\u6709\u6574\u6570\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\sqrt{n})\\) \u3002 Code bool isPrime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) if ( n % i == 0 ) return false ; return true ; } vector < int > getPrime ( int n ) { vector < int > prime ; for ( int i = 2 ; i <= n ; i ++ ) if ( isPrime ( i )) prime . push_back ( i ); return prime ; } \u57c3\u6c0f\u7b5b\u6cd5\uff08Eratosthenes \u7b5b\u6cd5\uff09 $ \u6807\u8bb0 \\(2\\) \u7684\u500d\u6570\uff08 \\(4,6,8,\\cdots\\) \uff09\uff1b \u6807\u8bb0 \\(3\\) \u7684\u500d\u6570\uff08 \\(6,9,12,\\cdots\\) \uff09\uff1b \\(4\\) \u88ab\u6807\u8bb0\u8fc7\uff0c\u4e0d\u7528\u6807\u8bb0 \\(4\\) \u7684\u500d\u6570\uff1b \u6807\u8bb0 \\(5\\) \u7684\u500d\u6570\uff1b \\(\\cdots\\) \u6700\u540e\u6ca1\u88ab\u6807\u8bb0\u7684\u6570 \\(k\\) \u4e0d\u80fd\u88ab \\([2,k-1]\\) \u4e2d\u7684\u4efb\u610f\u6574\u6570\u6574\u9664\uff0c\u662f\u8d28\u6570\u3002 \u6807\u8bb0 \\(i\\) \u7684\u500d\u6570\u65f6\uff0c \\(2i,3i,\\cdots,(i-1)\u00b7i\\) \u90fd\u88ab\u6bd4 \\(i\\) \u5c0f\u7684\u8d28\u6570\uff08 \\(2,3,\\cdots\\) \uff09\u6807\u8bb0\u8fc7\uff0c\u56e0\u6b64\u53ea\u9700\u4ece \\(i^2\\) \u5f00\u59cb\u6807\u8bb0\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n log{log{n}})\\) \u3002 Code vector < int > getPrime ( int n ) { vector < int > prime ; vector < bool > mark ( n + 1 ); for ( int i = 2 ; i <= n ; i ++ ) { if ( ! mark [ i ]) { prime . push_back ( i ); for ( int j = i ; i * j <= n ; j ++ ) mark [ i * j ] = true ; } } return prime ; } \u7ebf\u6027\u7b5b\u6cd5 $ \u5728\u57c3\u6c0f\u7b5b\u6cd5\u4e2d\uff0c\u6709\u4e9b\u5408\u6570\u4f1a\u88ab\u91cd\u590d\u6807\u8bb0\uff0c\u5982 \\(12\\) \u4f1a\u5728 \\(i=2\\) \u548c \\(i=3\\) \u65f6\u88ab\u5206\u522b\u6807\u8bb0\u3002\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u751f\u6210\u4e00\u6b21\uff0c\u5c31\u80fd\u907f\u514d\u91cd\u590d\u6807\u8bb0\u3002 \\(fact[i]\\) \u8868\u793a \\(i\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002\u6807\u8bb0 \\(i\\) \u7684\u500d\u6570\u65f6\uff0c\u679a\u4e3e\u8d28\u6570 \\(prime[j=0,1,2,\\cdots]\\) \u4e0e \\(i\\) \u76f8\u4e58\uff0c\u6784\u9020\u5408\u6570\uff1a \u82e5 \\(prime[j]\u2264fact[i]\\) \uff0c\u5219 \\(prime[j]\\) \u4e3a \\(i\u00b7prime[j]\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u6807\u8bb0\u8be5\u5408\u6570\uff1a \\(fact[i\u00b7prime[j]] = prime[j]\\) \uff1b \u5426\u5219 \\(i\u00b7prime[j]\\) \u5e94\u8be5\u88ab\u53e6\u4e00\u4e2a\u66f4\u5c0f\u7684\u8d28\u6570\u751f\u6210\uff0c\u5e94\u8df3\u51fa\u5faa\u73af\u3002 \u82e5 \\(fact[i]=0\\) \uff0c\u5219 \\(i\\) \u6ca1\u6709\u88ab\u751f\u6210\u8fc7\uff0c\u662f\u8d28\u6570\uff0c\u4ee4 \\(fact[i] = i\\) \u5e76\u5c06 \\(i\\) \u52a0\u5165\u8d28\u6570\u5bb9\u5668\u3002 \u6bcf\u4e2a\u5408\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u751f\u6210\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code vector < int > getPrime ( int n ) { vector < int > prime , fact ( n + 1 ); for ( int i = 2 ; i <= n ; i ++ ) { if ( ! fact [ i ]) fact [ i ] = i , prime . push_back ( i ); for ( int j = 0 ; i * prime [ j ] <= n ; j ++ ) { if ( prime [ j ] > fact [ i ]) break ; fact [ i * prime [ j ]] = prime [ j ]; } } return prime ; }","title":"\u8d28\u6570"},{"location":"posts/math/prime/#_1","text":"\u8d28\u6570 \u4e0d\u80fd\u88ab \\(1\\) \u548c\u5b83\u672c\u8eab\u4e4b\u5916\u7684\u4efb\u4f55\u81ea\u7136\u6570\u6574\u9664\uff0c \u5408\u6570 \u5219\u76f8\u53cd\u3002 \\(1\\) \u65e2\u4e0d\u662f\u8d28\u6570\uff0c\u4e5f\u4e0d\u662f\u5408\u6570\u3002 \\(\\pi(n)\\) \u8868\u793a \\(n\\) \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\uff0c \\(\\displaystyle\\pi(n)\u2248\\frac{n}{\\ln{n}}\\) \u3002 \u7b2c \\(n\\) \u4e2a\u8d28\u6570\u7684\u6e10\u8fdb\u4f30\u8ba1\u4e3a \\(p(n)\\sim n\\ln{n}\\) \u3002","title":"\u5b9a\u4e49"},{"location":"posts/math/prime/#_2","text":"Question \u5224\u5b9a\u975e\u8d1f\u6574\u6570 \\(n\\) \u662f\u5426\u4e3a\u8d28\u6570\uff1f","title":"\u8d28\u6570\u7684\u5224\u5b9a"},{"location":"posts/math/prime/#_3","text":"\u82e5 \\(n\\) \u4e3a\u5408\u6570\uff0c\u5219 \\(n\\) \u4e00\u5b9a\u6709\u56e0\u5b50 \\(\u2264\\sqrt{n}\\) \u3002 \u5224\u65ad \\(n\\) \u80fd\u5426\u6574\u9664 \\([2,\\sqrt n]\\) \u4e2d\u7684\u6574\u6570\uff0c\u5bf9\u4e8e \\(n=0\\) \u6216 \\(1\\) \u9700\u8981\u7279\u5224\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt n)\\) \u3002 Code bool isPrime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) if ( n % i == 0 ) return false ; return true ; }","title":"\u8bd5\u9664\u6cd5"},{"location":"posts/math/prime/#_4","text":"Question \u5982\u4f55\u6c42\u51fa \\(n\\) \u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570\uff1f","title":"\u8d28\u6570\u7b5b\u6cd5"},{"location":"posts/math/prime/#_5","text":"\u5bf9 \\([2,n]\\) \u4e2d\u7684\u6240\u6709\u6574\u6570\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\sqrt{n})\\) \u3002 Code bool isPrime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= sqrt ( n ); i ++ ) if ( n % i == 0 ) return false ; return true ; } vector < int > getPrime ( int n ) { vector < int > prime ; for ( int i = 2 ; i <= n ; i ++ ) if ( isPrime ( i )) prime . push_back ( i ); return prime ; }","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"posts/math/prime/#eratosthenes","text":"\u6807\u8bb0 \\(2\\) \u7684\u500d\u6570\uff08 \\(4,6,8,\\cdots\\) \uff09\uff1b \u6807\u8bb0 \\(3\\) \u7684\u500d\u6570\uff08 \\(6,9,12,\\cdots\\) \uff09\uff1b \\(4\\) \u88ab\u6807\u8bb0\u8fc7\uff0c\u4e0d\u7528\u6807\u8bb0 \\(4\\) \u7684\u500d\u6570\uff1b \u6807\u8bb0 \\(5\\) \u7684\u500d\u6570\uff1b \\(\\cdots\\) \u6700\u540e\u6ca1\u88ab\u6807\u8bb0\u7684\u6570 \\(k\\) \u4e0d\u80fd\u88ab \\([2,k-1]\\) \u4e2d\u7684\u4efb\u610f\u6574\u6570\u6574\u9664\uff0c\u662f\u8d28\u6570\u3002 \u6807\u8bb0 \\(i\\) \u7684\u500d\u6570\u65f6\uff0c \\(2i,3i,\\cdots,(i-1)\u00b7i\\) \u90fd\u88ab\u6bd4 \\(i\\) \u5c0f\u7684\u8d28\u6570\uff08 \\(2,3,\\cdots\\) \uff09\u6807\u8bb0\u8fc7\uff0c\u56e0\u6b64\u53ea\u9700\u4ece \\(i^2\\) \u5f00\u59cb\u6807\u8bb0\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n log{log{n}})\\) \u3002 Code vector < int > getPrime ( int n ) { vector < int > prime ; vector < bool > mark ( n + 1 ); for ( int i = 2 ; i <= n ; i ++ ) { if ( ! mark [ i ]) { prime . push_back ( i ); for ( int j = i ; i * j <= n ; j ++ ) mark [ i * j ] = true ; } } return prime ; }","title":"\u57c3\u6c0f\u7b5b\u6cd5\uff08Eratosthenes \u7b5b\u6cd5\uff09"},{"location":"posts/math/prime/#_6","text":"\u5728\u57c3\u6c0f\u7b5b\u6cd5\u4e2d\uff0c\u6709\u4e9b\u5408\u6570\u4f1a\u88ab\u91cd\u590d\u6807\u8bb0\uff0c\u5982 \\(12\\) \u4f1a\u5728 \\(i=2\\) \u548c \\(i=3\\) \u65f6\u88ab\u5206\u522b\u6807\u8bb0\u3002\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u751f\u6210\u4e00\u6b21\uff0c\u5c31\u80fd\u907f\u514d\u91cd\u590d\u6807\u8bb0\u3002 \\(fact[i]\\) \u8868\u793a \\(i\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002\u6807\u8bb0 \\(i\\) \u7684\u500d\u6570\u65f6\uff0c\u679a\u4e3e\u8d28\u6570 \\(prime[j=0,1,2,\\cdots]\\) \u4e0e \\(i\\) \u76f8\u4e58\uff0c\u6784\u9020\u5408\u6570\uff1a \u82e5 \\(prime[j]\u2264fact[i]\\) \uff0c\u5219 \\(prime[j]\\) \u4e3a \\(i\u00b7prime[j]\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u6807\u8bb0\u8be5\u5408\u6570\uff1a \\(fact[i\u00b7prime[j]] = prime[j]\\) \uff1b \u5426\u5219 \\(i\u00b7prime[j]\\) \u5e94\u8be5\u88ab\u53e6\u4e00\u4e2a\u66f4\u5c0f\u7684\u8d28\u6570\u751f\u6210\uff0c\u5e94\u8df3\u51fa\u5faa\u73af\u3002 \u82e5 \\(fact[i]=0\\) \uff0c\u5219 \\(i\\) \u6ca1\u6709\u88ab\u751f\u6210\u8fc7\uff0c\u662f\u8d28\u6570\uff0c\u4ee4 \\(fact[i] = i\\) \u5e76\u5c06 \\(i\\) \u52a0\u5165\u8d28\u6570\u5bb9\u5668\u3002 \u6bcf\u4e2a\u5408\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u751f\u6210\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Code vector < int > getPrime ( int n ) { vector < int > prime , fact ( n + 1 ); for ( int i = 2 ; i <= n ; i ++ ) { if ( ! fact [ i ]) fact [ i ] = i , prime . push_back ( i ); for ( int j = 0 ; i * prime [ j ] <= n ; j ++ ) { if ( prime [ j ] > fact [ i ]) break ; fact [ i * prime [ j ]] = prime [ j ]; } } return prime ; }","title":"\u7ebf\u6027\u7b5b\u6cd5"},{"location":"posts/string/KMP/","text":"Code int next []; void getnext ( string str ) { next [ 0 ] = -1 ; int i = 1 , j = 0 ; while ( i < str . size ()) { while ( j > -1 && str [ i ] != str [ j ]) j = next [ j ]; next [ ++ i ] = ++ j ; } } void kmp ( string str , string substr ) { getnext ( substr ); int i = 0 , j = 0 ; while ( i < str . size ()) { while ( j > -1 && str [ i ] != substr [ j ]) j = next [ j ]; if ( j == substr . size () - 1 ) printf ( \"Fount pattern at %d \\n \" , i - j ), j = next [ j ] - 1 ; i ++ , j ++ ; } }","title":"KMP \u7b97\u6cd5"},{"location":"posts/string/hash-table/","text":"Code static struct hash_map { #define MOD (999997) struct node { int val , next , key ; } edge [ MOD ]; int head [ MOD ], cnt ; int hash ( int key ) { return key % MOD ; } int & operator []( int key ) { int h = hash ( key ); for ( int p = head [ h ]; p ; p = edge [ p ]. next ) if ( edge [ p ]. key == key ) return edge [ p ]. val ; edge [ ++ cnt ] = ( node ){ 0 , head [ h ], key }, head [ h ] = cnt ; return edge [ cnt ]. val ; } hash_map () { cnt = 0 ; memset ( head , 0 , sizeof head ); } }","title":"\u54c8\u5e0c\u8868"},{"location":"posts/string/hash/","text":"\u7b80\u4ecb $ \u5b57\u7b26\u4e32\u54c8\u5e0c \u901a\u8fc7 \u54c8\u5e0c\u51fd\u6570 \u5c06\u4e0d\u540c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e0d\u540c\u6570\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u5339\u914d\u3002\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8f6c\u5316\u5f97\u5230\u7684\u6570\u503c\u79f0\u4e3a \u54c8\u5e0c\u503c \u3002 \u57fa\u672c\u539f\u7406 $ \u5047\u5b9a\u5b57\u7b26\u4e32 str \u4e2d\u53ea\u542b\u6709 a-z \u5171 \\(26\\) \u4e2a\u5c0f\u5199\u5b57\u7b26\u3002\u5c06\u5b57\u7b26 a-z \u770b\u4f5c\u6570\u5b57 \\(1\\sim 26\\) \uff0c str \u770b\u4f5c \\(27\\) \u8fdb\u5236\u6570\u3002\u5982\u4e0b\u56fe\uff0c\u5b57\u7b26\u4e32 fantasy \u7684\u54c8\u5e0c\u503c\u53ef\u4ee5\u8bbe\u8ba1\u4e3a \\(6\u00d727^6+1\u00d727^5+14\u00d727^4+\\cdots+25\u00d727^0\\) \uff1a \u6309\u6b64\u65b9\u6cd5\u8bbe\u8ba1\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u53ef\u4fdd\u8bc1\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u5fc5\u4e0d\u540c\u3002\u4f46\u6b64\u65b9\u6cd5\u7684\u7f3a\u9677\u5728\u4e8e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u8fc7\u957f\u65f6\uff0c\u54c8\u5e0c\u503c\u8fc7\u5927\uff0c\u4f1a\u8d85\u51fa int \u6216 long long \u7684\u8303\u56f4\u3002 \u6eda\u52a8\u54c8\u5e0c $ \u4e3a\u89e3\u51b3\u4e00\u822c\u54c8\u5e0c\u51fd\u6570\u9002\u7528\u8303\u56f4\u6709\u9650\u7684\u95ee\u9898\uff0c\u91c7\u7528 \u6eda\u52a8\u54c8\u5e0c \u65b9\u6cd5\uff1a \u9009\u53d6\u4e24\u4e2a\u5408\u9002\u7684\u8d28\u6570 \\(b,p\\) \uff0c\u5c06 str \u770b\u4f5c \\(b\\) \u8fdb\u5236\u6570\u3002\u5b57\u7b26\u4e32 fantasy \u7684\u54c8\u5e0c\u503c\u8bbe\u8ba1\u4e3a\uff1a \\[ (6\u00b7b^6+1\u00b7b^5+14\u00b7b^4+\\cdots+25\u00b7b^0)\\%p \\] \u6309\u6b64\u65b9\u6cd5\u8bbe\u8ba1\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u6982\u7387\u6781\u5c0f\uff0c\u4e14\u54c8\u5e0c\u503c\u4e0d\u4f1a\u8d85\u51fa int \u6216 long long \u7684\u8303\u56f4\u3002\u8ba1\u7b97\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Warning \u8d28\u6570 \\(b\\) \u5fc5\u987b\u6bd4\u5b57\u7b26\u79cd\u7c7b\u6570\u5927\u3002 Code typedef long long LL ; const LL b = 29 , p = 10000019 ; LL getHash ( string str ) { // \u8fd4\u56de str \u7684\u54c8\u5e0c\u503c LL h = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) h = ( h * b + str [ i ] - '0' ) % p ; return h ; } \u54c8\u5e0c\u51b2\u7a81 $ \u4f7f\u7528 \u6eda\u52a8\u54c8\u5e0c \u65f6\uff0c\u6709\u6982\u7387\u4f1a\u4f7f\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u76f8\u540c\u3002\u8be5\u73b0\u8c61\u79f0\u4e3a\u300c \u54c8\u5e0c\u51b2\u7a81 \u300d\u3002 \u4e00\u79cd\u964d\u4f4e\u54c8\u5e0c\u51b2\u7a81\u6982\u7387\u7684\u53ef\u9760\u65b9\u6cd5\u662f\u300c \u53cc\u54c8\u5e0c \u300d\uff1a\u4f7f\u7528\u4e24\u7ec4\u4e0d\u540c\u7684\u8d28\u6570 \\(b_1,p_1\\) \u548c \\(b_2,p_2\\) \uff0c\u5206\u522b\u8ba1\u7b97\u54c8\u5e0c\u503c\u3002\u53ea\u6709\u4e24\u4e2a\u54c8\u5e0c\u503c\u5206\u522b\u76f8\u540c\uff0c\u624d\u80fd\u5224\u5b9a\u5b57\u7b26\u4e32\u7684\u5339\u914d\u3002 Code typedef long long LL ; const LL b_1 = 29 , p_1 = 10000019 ; const LL b_2 = 31 , p_2 = 10000079 ; LL getHash_1 ( string str ) { LL h = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) h = ( h * b_1 + str [ i ] - '0' ) % p_1 ; return h ; } LL getHash_2 ( string str ) { LL h = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) h = ( h * b_2 + str [ i ] - '0' ) % p_2 ; return h ; } bool cmp ( string s1 , string s2 ) { // \u6bd4\u8f83 s1 \u548c s2 \u7684\u54c8\u5e0c\u503c\u662f\u5426\u76f8\u540c return getHash_1 ( s1 ) == getHash_1 ( s2 ) && getHash_2 ( s1 ) == getHash_2 ( s2 ); } \u53e6\u4e00\u79cd\u80fd\u591f\u6709\u6548\u89c4\u907f\u54c8\u5e0c\u51b2\u7a81\u7684\u7b97\u6cd5\u662f \u54c8\u5e0c\u8868 \uff0c\u5c06\u4e8e\u4e0b\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u3002","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c"},{"location":"posts/string/hash/#_1","text":"\u5b57\u7b26\u4e32\u54c8\u5e0c \u901a\u8fc7 \u54c8\u5e0c\u51fd\u6570 \u5c06\u4e0d\u540c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e0d\u540c\u6570\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u5339\u914d\u3002\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8f6c\u5316\u5f97\u5230\u7684\u6570\u503c\u79f0\u4e3a \u54c8\u5e0c\u503c \u3002","title":"\u7b80\u4ecb"},{"location":"posts/string/hash/#_2","text":"\u5047\u5b9a\u5b57\u7b26\u4e32 str \u4e2d\u53ea\u542b\u6709 a-z \u5171 \\(26\\) \u4e2a\u5c0f\u5199\u5b57\u7b26\u3002\u5c06\u5b57\u7b26 a-z \u770b\u4f5c\u6570\u5b57 \\(1\\sim 26\\) \uff0c str \u770b\u4f5c \\(27\\) \u8fdb\u5236\u6570\u3002\u5982\u4e0b\u56fe\uff0c\u5b57\u7b26\u4e32 fantasy \u7684\u54c8\u5e0c\u503c\u53ef\u4ee5\u8bbe\u8ba1\u4e3a \\(6\u00d727^6+1\u00d727^5+14\u00d727^4+\\cdots+25\u00d727^0\\) \uff1a \u6309\u6b64\u65b9\u6cd5\u8bbe\u8ba1\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u53ef\u4fdd\u8bc1\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u5fc5\u4e0d\u540c\u3002\u4f46\u6b64\u65b9\u6cd5\u7684\u7f3a\u9677\u5728\u4e8e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u8fc7\u957f\u65f6\uff0c\u54c8\u5e0c\u503c\u8fc7\u5927\uff0c\u4f1a\u8d85\u51fa int \u6216 long long \u7684\u8303\u56f4\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"posts/string/hash/#_3","text":"\u4e3a\u89e3\u51b3\u4e00\u822c\u54c8\u5e0c\u51fd\u6570\u9002\u7528\u8303\u56f4\u6709\u9650\u7684\u95ee\u9898\uff0c\u91c7\u7528 \u6eda\u52a8\u54c8\u5e0c \u65b9\u6cd5\uff1a \u9009\u53d6\u4e24\u4e2a\u5408\u9002\u7684\u8d28\u6570 \\(b,p\\) \uff0c\u5c06 str \u770b\u4f5c \\(b\\) \u8fdb\u5236\u6570\u3002\u5b57\u7b26\u4e32 fantasy \u7684\u54c8\u5e0c\u503c\u8bbe\u8ba1\u4e3a\uff1a \\[ (6\u00b7b^6+1\u00b7b^5+14\u00b7b^4+\\cdots+25\u00b7b^0)\\%p \\] \u6309\u6b64\u65b9\u6cd5\u8bbe\u8ba1\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u6982\u7387\u6781\u5c0f\uff0c\u4e14\u54c8\u5e0c\u503c\u4e0d\u4f1a\u8d85\u51fa int \u6216 long long \u7684\u8303\u56f4\u3002\u8ba1\u7b97\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 Warning \u8d28\u6570 \\(b\\) \u5fc5\u987b\u6bd4\u5b57\u7b26\u79cd\u7c7b\u6570\u5927\u3002 Code typedef long long LL ; const LL b = 29 , p = 10000019 ; LL getHash ( string str ) { // \u8fd4\u56de str \u7684\u54c8\u5e0c\u503c LL h = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) h = ( h * b + str [ i ] - '0' ) % p ; return h ; }","title":"\u6eda\u52a8\u54c8\u5e0c"},{"location":"posts/string/hash/#_4","text":"\u4f7f\u7528 \u6eda\u52a8\u54c8\u5e0c \u65f6\uff0c\u6709\u6982\u7387\u4f1a\u4f7f\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u76f8\u540c\u3002\u8be5\u73b0\u8c61\u79f0\u4e3a\u300c \u54c8\u5e0c\u51b2\u7a81 \u300d\u3002 \u4e00\u79cd\u964d\u4f4e\u54c8\u5e0c\u51b2\u7a81\u6982\u7387\u7684\u53ef\u9760\u65b9\u6cd5\u662f\u300c \u53cc\u54c8\u5e0c \u300d\uff1a\u4f7f\u7528\u4e24\u7ec4\u4e0d\u540c\u7684\u8d28\u6570 \\(b_1,p_1\\) \u548c \\(b_2,p_2\\) \uff0c\u5206\u522b\u8ba1\u7b97\u54c8\u5e0c\u503c\u3002\u53ea\u6709\u4e24\u4e2a\u54c8\u5e0c\u503c\u5206\u522b\u76f8\u540c\uff0c\u624d\u80fd\u5224\u5b9a\u5b57\u7b26\u4e32\u7684\u5339\u914d\u3002 Code typedef long long LL ; const LL b_1 = 29 , p_1 = 10000019 ; const LL b_2 = 31 , p_2 = 10000079 ; LL getHash_1 ( string str ) { LL h = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) h = ( h * b_1 + str [ i ] - '0' ) % p_1 ; return h ; } LL getHash_2 ( string str ) { LL h = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) h = ( h * b_2 + str [ i ] - '0' ) % p_2 ; return h ; } bool cmp ( string s1 , string s2 ) { // \u6bd4\u8f83 s1 \u548c s2 \u7684\u54c8\u5e0c\u503c\u662f\u5426\u76f8\u540c return getHash_1 ( s1 ) == getHash_1 ( s2 ) && getHash_2 ( s1 ) == getHash_2 ( s2 ); } \u53e6\u4e00\u79cd\u80fd\u591f\u6709\u6548\u89c4\u907f\u54c8\u5e0c\u51b2\u7a81\u7684\u7b97\u6cd5\u662f \u54c8\u5e0c\u8868 \uff0c\u5c06\u4e8e\u4e0b\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u3002","title":"\u54c8\u5e0c\u51b2\u7a81"},{"location":"posts/string/trie/","text":"Code int trie [][], tot ; bool end []; void insert ( string str ) { // \u5f80 trie \u6811\u4e2d\u63d2\u5165\u5b57\u7b26\u4e32 str int p = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) { int ch = str . at ( i ); if ( ! trie [ p ][ ch ]) trie [ p ][ ch ] = ++ tot ; p = trie [ p ][ ch ]; } end [ p ] = true ; } bool search ( string str ) { // \u67e5\u8be2 trie \u6811\u4e2d\u662f\u5426\u6709\u5b57\u7b26\u4e32 str int p = 0 ; for ( int i = 0 ; i < str . size (); i ++ ) { int ch = str . at ( i ); if ( ! trie [ p ][ ch ]) return false ; p = trie [ p ][ ch ]; } return end [ p ]; }","title":"Trie \u6811"},{"location":"posts/tools/","text":"\u5de5\u5177 \u5143\u7d20\u5468\u671f\u8868 \u9b54\u65b9\u6a21\u62df\u5668 Diagram Graph Editor VisuAlgo \u9898\u5e93 \u6d1b\u8c37 \u957f\u4e50 OJ \u822a\u7535 OJ ACWing AtCoder CodeForces CS Academy LeetCode Libre OJ OpenJudge \u4e0b\u8f7d Bat To Exe Dev-C++ Enigma Box Git Lemon Msi To Exe Node.js OCam Python ResHacker SWF Player VSCode WinRAR .md-typeset .md-button { color: darkblue; padding: .625em 2em; border-radius: .5em; margin-top: 10px; margin-left: 5px; }","title":"\u5de5\u5177"},{"location":"posts/tools/Dev-Cpp/","text":"Dev-C++ $ Dev-C++ \u662f Windows \u73af\u5883\u4e0b\u7684\u8f7b\u91cf\u7ea7 C/C++ \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\u3002\u5b83\u96c6\u5408\u4e86\u529f\u80fd\u5f3a\u5927\u7684\u6e90\u7801\u7f16\u8f91\u5668\u3001MinGW64 / TDM-GCC \u7f16\u8bd1\u5668\u3001GDB \u8c03\u8bd5\u5668\u548c AStyle \u683c\u5f0f\u6574\u7406\u5668\u7b49\u4f17\u591a\u81ea\u7531\u8f6f\u4ef6\uff0c\u9002\u5408\u4e8e\u5728\u6559\u5b66\u4e2d\u4f9b C/C++\u8bed\u8a00\u521d\u5b66\u8005\u4f7f\u7528\uff0c\u4e5f\u9002\u5408\u4e8e\u975e\u5546\u4e1a\u7ea7\u666e\u901a\u5f00\u53d1\u8005\u4f7f\u7528\u3002 \u4e0b\u8f7d Dev-C++ 5.11 Dev-C++ 5.10 Dev-C++ 5.09 Dev-C++ 5.08 Dev-C++ 5.07 Dev-C++ 5.06 \u9884\u89c8 .md-typeset .md-button { color: darkblue; padding: .625em 2em; border-radius: .5em; margin-top: 10px; margin-left: 5px; }","title":"Dev-C++"},{"location":"posts/tools/Dev-Cpp/#dev-c","text":"Dev-C++ \u662f Windows \u73af\u5883\u4e0b\u7684\u8f7b\u91cf\u7ea7 C/C++ \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\u3002\u5b83\u96c6\u5408\u4e86\u529f\u80fd\u5f3a\u5927\u7684\u6e90\u7801\u7f16\u8f91\u5668\u3001MinGW64 / TDM-GCC \u7f16\u8bd1\u5668\u3001GDB \u8c03\u8bd5\u5668\u548c AStyle \u683c\u5f0f\u6574\u7406\u5668\u7b49\u4f17\u591a\u81ea\u7531\u8f6f\u4ef6\uff0c\u9002\u5408\u4e8e\u5728\u6559\u5b66\u4e2d\u4f9b C/C++\u8bed\u8a00\u521d\u5b66\u8005\u4f7f\u7528\uff0c\u4e5f\u9002\u5408\u4e8e\u975e\u5546\u4e1a\u7ea7\u666e\u901a\u5f00\u53d1\u8005\u4f7f\u7528\u3002 \u4e0b\u8f7d Dev-C++ 5.11 Dev-C++ 5.10 Dev-C++ 5.09 Dev-C++ 5.08 Dev-C++ 5.07 Dev-C++ 5.06 \u9884\u89c8 .md-typeset .md-button { color: darkblue; padding: .625em 2em; border-radius: .5em; margin-top: 10px; margin-left: 5px; }","title":"Dev-C++"},{"location":"posts/tools/Python/","text":"Python $ Python \u662f\u4e00\u79cd\u8de8\u5e73\u53f0\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\uff0c\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u8fd8\u80fd\u7b80\u5355\u6709\u6548\u5730\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002Python \u8bed\u6cd5\u548c\u52a8\u6001\u7c7b\u578b\uff0c\u4ee5\u53ca\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u672c\u8d28\uff0c\u4f7f\u5b83\u6210\u4e3a\u591a\u6570\u5e73\u53f0\u4e0a\u5199\u811a\u672c\u548c\u5feb\u901f\u5f00\u53d1\u5e94\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u968f\u7740\u7248\u672c\u7684\u4e0d\u65ad\u66f4\u65b0\u548c\u8bed\u8a00\u65b0\u529f\u80fd\u7684\u6dfb\u52a0\uff0c\u9010\u6e10\u88ab\u7528\u4e8e\u72ec\u7acb\u7684\u3001\u5927\u578b\u9879\u76ee\u7684\u5f00\u53d1\u3002 \u4e0b\u8f7d Python 3.9 Python 3.8 Python 3.7 Python 3.6 Python 3.5 Python 3.4 Python 3.3 Python 3.2 Python 3.1 Python 2.7 Python 2.6 Python 2.5 Python 2.4 \u9884\u89c8 \" .md-typeset .md-button { color: darkblue; padding: .625em 2em; border-radius: .5em; margin-top: 10px; margin-left: 5px; }","title":"Python"},{"location":"posts/tools/Python/#python","text":"Python \u662f\u4e00\u79cd\u8de8\u5e73\u53f0\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\uff0c\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u8fd8\u80fd\u7b80\u5355\u6709\u6548\u5730\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002Python \u8bed\u6cd5\u548c\u52a8\u6001\u7c7b\u578b\uff0c\u4ee5\u53ca\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u672c\u8d28\uff0c\u4f7f\u5b83\u6210\u4e3a\u591a\u6570\u5e73\u53f0\u4e0a\u5199\u811a\u672c\u548c\u5feb\u901f\u5f00\u53d1\u5e94\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u968f\u7740\u7248\u672c\u7684\u4e0d\u65ad\u66f4\u65b0\u548c\u8bed\u8a00\u65b0\u529f\u80fd\u7684\u6dfb\u52a0\uff0c\u9010\u6e10\u88ab\u7528\u4e8e\u72ec\u7acb\u7684\u3001\u5927\u578b\u9879\u76ee\u7684\u5f00\u53d1\u3002 \u4e0b\u8f7d Python 3.9 Python 3.8 Python 3.7 Python 3.6 Python 3.5 Python 3.4 Python 3.3 Python 3.2 Python 3.1 Python 2.7 Python 2.6 Python 2.5 Python 2.4 \u9884\u89c8 \" .md-typeset .md-button { color: darkblue; padding: .625em 2em; border-radius: .5em; margin-top: 10px; margin-left: 5px; }","title":"Python"}]}